% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nnmf_sparse.R
\name{step_nnmf_sparse}
\alias{step_nnmf_sparse}
\title{Non-Negative Matrix Factorization Signal Extraction with lasso Penalization}
\usage{
step_nnmf_sparse(
  recipe,
  ...,
  role = "predictor",
  trained = FALSE,
  num_comp = 2,
  penalty = 0.001,
  options = list(),
  res = NULL,
  prefix = "NNMF",
  seed = sample.int(10^5, 1),
  keep_original_cols = FALSE,
  skip = FALSE,
  id = rand_id("nnmf_sparse")
)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{...}{One or more selector functions to choose variables
for this step. See \code{\link[=selections]{selections()}} for more details.}

\item{role}{For model terms created by this step, what analysis role should
they be assigned? By default, the new columns created by this step from
the original variables will be used as \emph{predictors} in a model.}

\item{trained}{A logical to indicate if the quantities for
preprocessing have been estimated.}

\item{num_comp}{The number of components to retain as new predictors. If
\code{num_comp} is greater than the number of columns or the number of possible
components, a smaller value will be used.}

\item{penalty}{A non-negative number used as a penalization factor for the
loadings. Values are usually between zero and one.}

\item{options}{A list of options to \code{nmf()} in the RcppML package. That
package has a separate function \code{setRcppMLthreads()} that controls the
amount of internal parallelization. \strong{Note} that the argument \code{A}, \code{k},
\code{L1}, and \code{seed} should not be passed here.}

\item{res}{A matrix of loadings is stored here, along with the names of the
original predictors, once this preprocessing step has been trained by
\code{\link[=prep.recipe]{prep()}}.}

\item{prefix}{A character string for the prefix of the resulting new
variables. See notes below.}

\item{seed}{An integer that will be used to set the seed in isolation when
computing the factorization.}

\item{keep_original_cols}{A logical to keep the original variables in the
output. Defaults to \code{FALSE}.}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[=bake.recipe]{bake.recipe()}}? While all operations are baked
when \code{\link[=prep.recipe]{prep.recipe()}} is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using \code{skip = TRUE} as it may affect
the computations for subsequent operations.}

\item{id}{A character string that is unique to this step to identify it.}
}
\value{
An updated version of \code{recipe} with the new step added to the
sequence of any existing operations.
}
\description{
\code{step_nnmf_sparse()} creates a \emph{specification} of a recipe step
that will convert numeric data into one or more non-negative
components.
}
\details{
Non-negative matrix factorization computes latent components that
have non-negative values and take into account that the original data have
non-negative values.

The argument \code{num_comp} controls the number of components that will be
retained (the original variables that are used to derive the components are
removed from the data). The new components will have names that begin with
\code{prefix} and a sequence of numbers. The variable names are padded with
zeros. For example, if \code{num < 10}, their names will be \code{NNMF1} - \code{NNMF9}. If
\code{num = 101}, the names would be \code{NNMF001} - \code{NNMF101}.

When you \code{\link[=tidy]{tidy()}} this step, a tibble with column \code{terms} (the selectors
or variables selected) and the number of components is returned.
}
\examples{
if (rlang::is_installed("RcppML")) {

  library(Matrix)
  library(modeldata)
  data(biomass)

  rec <- recipe(HHV ~ ., data = biomass) \%>\%
    update_role(sample, new_role = "id var") \%>\%
    update_role(dataset, new_role = "split variable") \%>\%
    step_nnmf_sparse(
      all_numeric_predictors(),
      num_comp = 2,
      seed = 473,
      penalty = 0.01
    ) \%>\%
    prep(training = biomass)

  bake(rec, new_data = NULL)
  library(ggplot2)
  bake(rec, new_data = NULL) \%>\%
    ggplot(aes(x = NNMF2, y = NNMF1, col = HHV)) + geom_point()
}
}
\concept{{multivariate transformation steps}}
