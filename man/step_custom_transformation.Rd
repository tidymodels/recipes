% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/step_custom_transformation.R
\name{step_custom_transformation}
\alias{step_custom_transformation}
\alias{tidy.step_custom_transformation}
\title{Custom Transformation}
\usage{
step_custom_transformation(recipe, ..., role = "predictor",
  trained = FALSE, prep_function = NULL, prep_options = NULL,
  prep_output = NULL, bake_function = NULL, bake_options = NULL,
  bake_how = "bind_cols", selected_vars = NULL, skip = FALSE,
  id = rand_id("custom_transformation"))

\method{tidy}{step_custom_transformation}(x, ...)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the sequence of
operations for this recipe.}

\item{...}{One or more selector functions to choose which variables are
affected by the step. See \code{\link[=selections]{selections()}} for more details. The names of the
selected variables will be stored in the \code{selected_vars} argument.}

\item{role}{For model terms created by this step, what analysis role should
they be assigned? By default, the function assumes that the new columns
will be used as predictors in a model.}

\item{trained}{A logical to indicate if the quantities for preprocessing have
been estimated.}

\item{prep_function}{A function. This is a helper function for the
\code{\link[=prep.recipe]{prep.recipe()}} method. It will be invoked, when the recipe is 'prepped'
by \code{\link[=prep.recipe]{prep.recipe()}}. The function MUST satisfy the following conditions:
(1) the function must take an argument \code{x}: input data with only the
selected variables (\code{selected_vars}), (2) the function MUST return the
(required) estimated parameters from a training set that can be later
applied to other data sets. This output can be of any appropriate type and
shape. Leave \code{prep_function} as NULL, if the preparation of new data sets
does not depend on parameters learned on the training set.}

\item{prep_options}{A list with (any) additional arguments for the prep
helper function call EXCEPT for the \code{x} argument. Leave as NULL, if no
\code{prep_function} is given.}

\item{prep_output}{Output from prep helper (\code{prep_function}) function call
consisting of the estimated parameters from the training set, that will be
applied to other data sets. Results are not computed until \code{\link[=prep.recipe]{prep.recipe()}}
is called.}

\item{bake_function}{A function. This is a helper function for the 'bake'
method. It will be invoked, when the recipe is 'baked' by \code{bake.recipe()}.
The function MUST satisfy the following conditions: (1) the function must
take an argument \code{x}: data set with only the selected variables
(\code{selected_vars}) from the new data set, (2) if the preparation of new data
sets depends on parameters learned on the train set, the function must take
the argument \code{prep_output}: the output from the prep helper fct
(\code{prep_function}), (3) the output from from the function should be the
transformed variables. The output must be of a type and shape, that allows
it to be binded column wise to the new data set after converting it to a
\code{tibble}.}

\item{bake_options}{A list with (any) arguments for the bake helper function
call EXCEPT for the \code{x} and \code{prep_output} arguments.}

\item{bake_how}{A character. How should the transformed variables be appended
to the new data set? Choose from options (1) \code{bind_cols}: simply bind the
transformed variables to the new data set or (2) \code{replace}: replace the
selected variables (\code{selected vars}) from the new data set with the
transformed variables.}

\item{selected_vars}{A character string that contains the names of the
selected variables. These values are not determined until \code{\link[=prep.recipe]{prep.recipe()}}
is called.}

\item{skip}{A logical. Should the step be skipped when the recipe is baked by
\code{\link[=bake.recipe]{bake.recipe()}}? While all operations are baked when \code{\link[=prep.recipe]{prep.recipe()}} is
run, some operations may not be able to be conducted on new data (e.g.
processing the outcome variable(s)). Care should be taken when using \code{skip = TRUE} as it may affect the computations for subsequent operations.}

\item{id}{A character string that is unique to this step to identify it.}

\item{x}{A \code{step_custom_transformation} object.}
}
\value{
An updated version of \code{recipe} with the new step added to the
sequence of existing steps (if any). For the \code{tidy} method, a \code{tibble} with
columns \code{terms} (the selectors or variables selected).
}
\description{
\code{step_custom_transformation} creates a \emph{specification} of a (higher order)
recipe step that will make a transformation of the input data from (custom)
\code{prep} and \code{bake} helper functions.
}
\examples{
library(dplyr)
library(tidyselect)
library(purrr)
library(tibble)

# generate data.
df <- tibble(a = rnorm(100),
             b = rnorm(100),
             c = rnorm(100))

# define prep helper function, that computes means and standard deviations
# for all variables in a data set.
compute_means_sd <- function(x, na.rm = FALSE, trim = 0) {

  map(x, ~ list(mean = mean(.x, na.rm = na.rm, trim = trim),
                sd = sd(.x)))

}

# define bake helper function, that subtracts k means from the variable and
# then divides by the standard deviation.
center_scale <- function(x, prep_output, k) {

  newdata <- select(x, names(prep_output))

  map2(.x = newdata,
       .y = prep_output,
       ~ (.x - k * .y$mean) / .y$sd)
}

# create recipe.
rec <- recipe(df) \%>\%
  step_custom_transformation(b, c,
                             prep_function = compute_means_sd,
                             prep_options = list(na.rm = TRUE, trim = 0.05),
                             bake_function = center_scale,
                             bake_options = list(k = 2),
                             bake_how = "bind_cols")

# prep recipe.
rec_prep <- prep(rec)

# bake recipe.
rec_baked <- bake(rec_prep, df)
rec_baked

# inspect output.
rec
rec_baked
tidy(rec)
tidy(rec, 1)
tidy(rec_prep)
tidy(rec_prep, 1)
}
\seealso{
\code{\link[=recipe]{recipe()}} \code{\link[=prep.recipe]{prep.recipe()}} \code{\link[=bake.recipe]{bake.recipe()}}
}
\concept{preprocessing}
\keyword{datagen}
