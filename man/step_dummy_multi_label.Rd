% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dummy_multi_label.R
\name{step_dummy_multi_label}
\alias{step_dummy_multi_label}
\title{multi Label Dummy Variables Creation}
\usage{
step_dummy_multi_label(
  recipe,
  ...,
  role = "predictor",
  trained = FALSE,
  threshold = 0,
  levels = NULL,
  input = NULL,
  other = "other",
  naming = dummy_names,
  prefix = NULL,
  keep_original_cols = FALSE,
  skip = FALSE,
  id = rand_id("dummy_multi_label")
)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{...}{One or more selector functions to choose which variables will be
used to compute the components. See \code{\link[=selections]{selections()}} for more details.}

\item{role}{For model terms created by this step, what analysis
role should they be assigned?. By default, the function assumes
that the binary dummy variable columns created by the original
variables will be used as predictors in a model.}

\item{trained}{A logical to indicate if the quantities for
preprocessing have been estimated.}

\item{threshold}{A numeric value between 0 and 1 or an integer greater or
equal to one.  If it's less than one then factor levels whose rate of
occurrence in the training set are below \code{threshold} will be "othered". If
it's greater or equal to one then it's treated as a frequency and factor
levels that occur less then \code{threshold} times will be "othered".}

\item{levels}{A list that contains the information needed to
create dummy variables for each variable contained in
\code{terms}. This is \code{NULL} until the step is trained by
\code{\link[=prep.recipe]{prep.recipe()}}.}

\item{input}{A character vector containing the names of the columns used.
This is \code{NULL} until the step is trained by \code{\link[=prep.recipe]{prep.recipe()}}.}

\item{other}{A single character value for the "other" category.}

\item{naming}{A function that defines the naming convention for
new dummy columns. See Details below.}

\item{prefix}{A character string that will be the prefix to the resulting
new variables. See notes below.}

\item{keep_original_cols}{A logical to keep the original variables in the
output. Defaults to \code{FALSE}.}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[=bake.recipe]{bake.recipe()}}? While all operations are baked
when \code{\link[=prep.recipe]{prep.recipe()}} is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using \code{skip = TRUE} as it may affect
the computations for subsequent operations}

\item{id}{A character string that is unique to this step to identify it.}
}
\value{
An updated version of \code{recipe} with the new step added to the
sequence of existing steps (if any).
}
\description{
\code{step_dummy_multi_label} creates a \emph{specification} of a recipe
step that will convert multiple nominal data (e.g. character or factors)
into one or more numeric binary model terms for the levels of
the original data.
}
\details{
\code{step_dummy_multi_label()} will create a set of binary dummy
variables from a selection of factor variable. For data looking
like\preformatted{lang_1     lang_2     lang_3
English    Italian    NA
Spanish    NA         French
Armenian   English    French
NA         NA         NA
}

would end up looking like this\preformatted{Armenian English French Italian Spanish
0       1      0       1       0
0       0      1       0       1
1       1      1       0       0
0       0      0       0       0
}

The function allows for non-standard naming of the resulting
variables. For an unordered factor named \code{x}, with levels \code{"a"}
and \code{"b"}, the default naming convention would be to create a
new variable called \code{x_b}. Note that if the factor levels are
not valid variable names (e.g. "some text with spaces"), it will
be changed by \code{\link[base:make.names]{base::make.names()}} to be valid (see the example
below). The naming format can be changed using the \code{naming}
argument and the function \code{\link[=dummy_names]{dummy_names()}} is the default. This
function will also change the names of ordinal dummy variables.
Instead of values such as "\code{.L}", "\code{.Q}", or "\verb{^4}", ordinal
dummy variables are given simple integer suffixes such as
"\verb{_1}", "\verb{_2}", etc.
}
\examples{
library(tibble)
languages <- tribble(
  ~lang_1,    ~lang_2,   ~lang_3,
  "English",  "Italian", NA,
  "Spanish",  NA,        "French",
  "Armenian", "English", "French",
  NA,         NA,        NA
)

dummy_multi_label_rec <- recipe(~ ., data = languages) \%>\%
  step_dummy_multi_label(starts_with("lang")) \%>\%
  prep()

bake(dummy_multi_label_rec, new_data = NULL)
tidy(dummy_multi_label_rec, number = 1)

dummy_multi_label_rec2 <- recipe(~ ., data = languages) \%>\%
  step_dummy_multi_label(starts_with("lang"), prefix = "lang",
                         threshold = 0.2) \%>\%
  prep()

bake(dummy_multi_label_rec2, new_data = NULL)
tidy(dummy_multi_label_rec2, number = 1)
}
\seealso{
\code{\link[=step_dummy]{step_dummy()}}
}
\concept{dummy_multi_label}
\concept{preprocessing}
\concept{projection_methods}
\keyword{datagen}
