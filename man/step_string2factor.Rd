% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/string2factor.R
\name{step_string2factor}
\alias{step_string2factor}
\title{Convert Strings to Factors}
\usage{
step_string2factor(
  recipe,
  ...,
  role = NA,
  trained = FALSE,
  levels = NULL,
  ordered = FALSE,
  skip = FALSE,
  id = rand_id("string2factor")
)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{...}{One or more selector functions to choose variables
for this step. See \code{\link[=selections]{selections()}} for more details.}

\item{role}{Not used by this step since no new variables are
created.}

\item{trained}{A logical to indicate if the quantities for
preprocessing have been estimated.}

\item{levels}{An options specification of the levels to be used
for the new factor. If left \code{NULL}, the sorted unique
values present when \code{bake} is called will be used.}

\item{ordered}{A single logical value; should the factor(s) be
ordered?}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[=bake.recipe]{bake.recipe()}}? While all operations are baked
when \code{\link[=prep.recipe]{prep.recipe()}} is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using \code{skip = TRUE} as it may affect
the computations for subsequent operations.}

\item{id}{A character string that is unique to this step to identify it.}
}
\value{
An updated version of \code{recipe} with the new step added to the
sequence of any existing operations.
}
\description{
\code{step_string2factor} will convert one or more character
vectors to factors (ordered or unordered).
}
\details{
If \code{levels} is given, \code{step_string2factor} will
convert all variables affected by this step to have the same
levels.

Also, note that \code{prep} has an option \code{strings_as_factors} that
defaults to \code{TRUE}. This should be changed so that raw character
data will be applied to \code{step_string2factor}. However, this step
can also take existing factors (but will leave them as-is).

When you \code{\link[=tidy]{tidy()}} this step, a tibble with columns \code{terms} (the
selectors or variables selected) and \code{ordered} is returned.
}
\examples{
library(modeldata)
data(okc)

rec <- recipe(~ diet + location, data = okc)

make_factor <- rec \%>\%
  step_string2factor(diet)
make_factor <- prep(make_factor,
                    training = okc,
                    strings_as_factors = FALSE)

# note that `diet` is a factor
bake(make_factor, new_data = NULL) \%>\% head
okc \%>\% head
tidy(make_factor, number = 1)
}
\seealso{
Other dummy variable and encoding steps: 
\code{\link{step_bin2factor}()},
\code{\link{step_count}()},
\code{\link{step_date}()},
\code{\link{step_dummy_multi_choice}()},
\code{\link{step_dummy}()},
\code{\link{step_factor2string}()},
\code{\link{step_holiday}()},
\code{\link{step_indicate_na}()},
\code{\link{step_integer}()},
\code{\link{step_novel}()},
\code{\link{step_num2factor}()},
\code{\link{step_ordinalscore}()},
\code{\link{step_other}()},
\code{\link{step_regex}()},
\code{\link{step_relevel}()},
\code{\link{step_unknown}()},
\code{\link{step_unorder}()}
}
\concept{dummy variable and encoding steps}
