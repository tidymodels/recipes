% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/poly.R
\name{step_poly}
\alias{step_poly}
\title{Orthogonal polynomial basis functions}
\usage{
step_poly(
  recipe,
  ...,
  role = "predictor",
  trained = FALSE,
  objects = NULL,
  degree = 2L,
  options = list(),
  keep_original_cols = FALSE,
  skip = FALSE,
  id = rand_id("poly")
)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{...}{One or more selector functions to choose variables
for this step. See \code{\link[=selections]{selections()}} for more details.}

\item{role}{For model terms created by this step, what analysis role should
they be assigned? By default, the new columns created by this step from
the original variables will be used as \emph{predictors} in a model.}

\item{trained}{A logical to indicate if the quantities for
preprocessing have been estimated.}

\item{objects}{A list of \code{\link[stats:poly]{stats::poly()}} objects created once the step has
been trained.}

\item{degree}{The polynomial degree (an integer).}

\item{options}{A list of options for \code{\link[stats:poly]{stats::poly()}} which should not include
\code{x}, \code{degree}, or \code{simple}. Note that the option \code{raw = TRUE} will produce
the regular polynomial values (not orthogonalized).}

\item{keep_original_cols}{A logical to keep the original variables in the
output. Defaults to \code{FALSE}.}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[=bake]{bake()}}? While all operations are baked
when \code{\link[=prep]{prep()}} is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using \code{skip = TRUE} as it may affect
the computations for subsequent operations.}

\item{id}{A character string that is unique to this step to identify it.}
}
\value{
An updated version of \code{recipe} with the new step added to the
sequence of any existing operations.
}
\description{
\code{step_poly()} creates a \emph{specification} of a recipe step that will create new
columns that are basis expansions of variables using orthogonal polynomials.
}
\details{
\code{step_poly()} can create new features from a single variable that enable
fitting routines to model this variable in a nonlinear manner. The extent of
the possible nonlinearity is determined by the \code{degree} argument of
\code{\link[stats:poly]{stats::poly()}}. The original variables are removed from the data by default,
but can be retained by setting \code{keep_original_cols = TRUE} and new columns
are added. The naming convention for the new variables is \code{varname_poly_1}
and so on.

The orthogonal polynomial expansion is used by default because it yields
variables that are uncorrelated and doesn't produce large values which would
otherwise be a problem for large values of \code{degree}. Orthogonal polynomial
expansion pick up the same signal as their uncorrelated counterpart.
}
\section{Tidying}{
When you \code{\link[=tidy.recipe]{tidy()}} this step, a tibble is returned with
columns \code{terms}, \code{degree} , and \code{id}:

\describe{
\item{terms}{character, the selectors or variables selected}
\item{degree}{integer, the polynomial degree}
\item{id}{character, id of this step}
}
}

\section{Tuning Parameters}{
This step has 1 tuning parameters:
\itemize{
\item \code{degree}: Polynomial Degree (type: integer, default: 2)
}
}

\section{Case weights}{


The underlying operation does not allow for case weights.
}

\examples{
\dontshow{if (rlang::is_installed("modeldata")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
data(biomass, package = "modeldata")

biomass_tr <- biomass[biomass$dataset == "Training", ]
biomass_te <- biomass[biomass$dataset == "Testing", ]

rec <- recipe(
  HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,
  data = biomass_tr
)

quadratic <- rec \%>\%
  step_poly(carbon, hydrogen)
quadratic <- prep(quadratic, training = biomass_tr)

expanded <- bake(quadratic, biomass_te)
expanded

tidy(quadratic, number = 1)
\dontshow{\}) # examplesIf}
}
\seealso{
Other individual transformation steps: 
\code{\link{step_BoxCox}()},
\code{\link{step_YeoJohnson}()},
\code{\link{step_bs}()},
\code{\link{step_harmonic}()},
\code{\link{step_hyperbolic}()},
\code{\link{step_inverse}()},
\code{\link{step_invlogit}()},
\code{\link{step_log}()},
\code{\link{step_logit}()},
\code{\link{step_mutate}()},
\code{\link{step_ns}()},
\code{\link{step_percentile}()},
\code{\link{step_relu}()},
\code{\link{step_sqrt}()}
}
\concept{individual transformation steps}
