[{"path":[]},{"path":"https://recipes.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://recipes.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others‚Äô private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://recipes.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://recipes.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://recipes.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://recipes.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://recipes.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://recipes.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://recipes.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://recipes.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://recipes.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla‚Äôs code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://recipes.tidymodels.org/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidymodels","title":"Contributing to tidymodels","text":"detailed information contributing tidymodels packages, see development contributing guide.","code":""},{"path":"https://recipes.tidymodels.org/dev/CONTRIBUTING.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Contributing to tidymodels","text":"Typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES ‚úÖ: edit roxygen comment .R file R/ directory. üö´: edit .Rd file man/ directory. use roxygen2, Markdown syntax, documentation.","code":""},{"path":"https://recipes.tidymodels.org/dev/CONTRIBUTING.html","id":"code","dir":"","previous_headings":"","what":"Code","title":"Contributing to tidymodels","text":"submit üéØ pull request tidymodels package, always file issue confirm tidymodels team agrees idea happy basic proposal. tidymodels packages work together. package contains unit tests, integration tests tests using packages contained extratests. pull requests, recommend create fork repo usethis::create_from_github(), initiate new branch usethis::pr_init(). Look build status making changes. README contains badges continuous integration services used package. New code follow tidyverse style guide. can use styler package apply styles, please don‚Äôt restyle code nothing PR. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s). use testthat. Contributions test cases included easier accept. contribution spans use one package, consider building extratests changes check breakages /adding new tests . Let us know PR ran extra tests.","code":""},{"path":"https://recipes.tidymodels.org/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"Code","what":"Code of Conduct","title":"Contributing to tidymodels","text":"project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://recipes.tidymodels.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 recipes authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://recipes.tidymodels.org/dev/articles/Dummies.html","id":"creating-dummy-variables","dir":"Articles","previous_headings":"","what":"Creating Dummy Variables","title":"Handling categorical predictors","text":"Let‚Äôs start, course, iris data. four numeric columns single factor column three levels: 'setosa', 'versicolor', 'virginica'. initial recipe outcome: contrast function R method translating column categorical values one numeric columns take place original. can also known encoding method parameterization function. default approach create dummy variables using ‚Äúreference cell‚Äù parameterization. means , C levels factor, C - 1 dummy variables created first factor level made new columns: Note column used make new columns (Species) longer . See section obtaining entire set C columns. different types contrasts can used different types factors. defaults : Looking ?contrast, options. One alternative little known Helmert contrast: contr.helmert returns Helmert contrasts, contrast second level first, third average first two, . get encoding, global option contrasts can changed saved. step_dummy picks makes correct calculations: Note column names reference specific level species variable. contrast function columns can involve multiple levels; level-specific columns wouldn‚Äôt make sense. columns selected (perhaps due earlier step_zv()), bake() function return data -(e.g.¬†dummy variables). Finally, step_dummy() option called keep_original_cols can used keep original columns used create dummy variables.","code":"library(recipes)  # make a copy for use below iris <- iris %>% mutate(original = Species)  iris_rec <- recipe( ~ ., data = iris) summary(iris_rec) #> # A tibble: 6 √ó 4 #>   variable     type      role      source   #>   <chr>        <list>    <chr>     <chr>    #> 1 Sepal.Length <chr [2]> predictor original #> 2 Sepal.Width  <chr [2]> predictor original #> 3 Petal.Length <chr [2]> predictor original #> 4 Petal.Width  <chr [2]> predictor original #> 5 Species      <chr [3]> predictor original #> 6 original     <chr [3]> predictor original ref_cell <-    iris_rec %>%    step_dummy(Species) %>%   prep(training = iris) summary(ref_cell) #> # A tibble: 7 √ó 4 #>   variable           type      role      source   #>   <chr>              <list>    <chr>     <chr>    #> 1 Sepal.Length       <chr [2]> predictor original #> 2 Sepal.Width        <chr [2]> predictor original #> 3 Petal.Length       <chr [2]> predictor original #> 4 Petal.Width        <chr [2]> predictor original #> 5 original           <chr [3]> predictor original #> 6 Species_versicolor <chr [2]> predictor derived  #> 7 Species_virginica  <chr [2]> predictor derived  # Get a row for each factor level bake(ref_cell, new_data = NULL, original, starts_with(\"Species\")) %>% distinct() #> # A tibble: 3 √ó 3 #>   original   Species_versicolor Species_virginica #>   <fct>                   <dbl>             <dbl> #> 1 setosa                      0                 0 #> 2 versicolor                  1                 0 #> 3 virginica                   0                 1 param <- getOption(\"contrasts\") param #>         unordered           ordered  #> \"contr.treatment\"      \"contr.poly\" # change it: go_helmert <- param go_helmert[\"unordered\"] <- \"contr.helmert\" options(contrasts = go_helmert)  # now make dummy variables with new parameterization helmert <-    iris_rec %>%    step_dummy(Species) %>%   prep(training = iris) summary(helmert) #> # A tibble: 7 √ó 4 #>   variable     type      role      source   #>   <chr>        <list>    <chr>     <chr>    #> 1 Sepal.Length <chr [2]> predictor original #> 2 Sepal.Width  <chr [2]> predictor original #> 3 Petal.Length <chr [2]> predictor original #> 4 Petal.Width  <chr [2]> predictor original #> 5 original     <chr [3]> predictor original #> 6 Species_X1   <chr [2]> predictor derived  #> 7 Species_X2   <chr [2]> predictor derived  bake(helmert, new_data = NULL, original, starts_with(\"Species\")) %>% distinct() #> # A tibble: 3 √ó 3 #>   original   Species_X1 Species_X2 #>   <fct>           <dbl>      <dbl> #> 1 setosa             -1         -1 #> 2 versicolor          1         -1 #> 3 virginica           0          2  # Yuk; go back to the original method options(contrasts = param)"},{"path":"https://recipes.tidymodels.org/dev/articles/Dummies.html","id":"interactions-with-dummy-variables","dir":"Articles","previous_headings":"","what":"Interactions with Dummy Variables","title":"Handling categorical predictors","text":"Creating interactions recipes requires use model formula, R model formulae, using * two variables expand *b = + b + :b main effects included. step_interact, can use *, interactions recorded columns need created. One thing recipes differently base R constructs design matrix sequential iterations. relevant thinking interactions continuous categorical predictors. example, use standard formula interface, creation dummy variables happens time interactions created: recipes, create sequentially. raises issue: type interaction effects specific names using dummy variables? pain, may obvious dummy variables available (especially step_other used). solution use selector: happens starts_with(\"Species\") executed data available previous steps applied data. means dummy variable columns present. results selector translated additive function results. case, means becomes entire interaction formula shown : interactions multiple sets dummy variables, formula include multiple selectors (e.g.¬†starts_with(\"x_\"):starts_with(\"y_\")).","code":"iris_int <-    iris_rec %>%   step_interact( ~ Sepal.Width:Sepal.Length) %>%   prep(training = iris) summary(iris_int) #> # A tibble: 7 √ó 4 #>   variable                   type      role      source   #>   <chr>                      <list>    <chr>     <chr>    #> 1 Sepal.Length               <chr [2]> predictor original #> 2 Sepal.Width                <chr [2]> predictor original #> 3 Petal.Length               <chr [2]> predictor original #> 4 Petal.Width                <chr [2]> predictor original #> 5 Species                    <chr [3]> predictor original #> 6 original                   <chr [3]> predictor original #> 7 Sepal.Width_x_Sepal.Length <chr [2]> predictor derived model.matrix(~ Species*Sepal.Length, data = iris) %>%    as.data.frame() %>%    # show a few specific rows   slice(c(1, 51, 101)) %>%    as.data.frame() #>     (Intercept) Speciesversicolor Speciesvirginica Sepal.Length #> 1             1                 0                0          5.1 #> 51            1                 1                0          7.0 #> 101           1                 0                1          6.3 #>     Speciesversicolor:Sepal.Length Speciesvirginica:Sepal.Length #> 1                                0                           0.0 #> 51                               7                           0.0 #> 101                              0                           6.3 # Must I do this? iris_rec %>%   step_interact( ~ Species_versicolor:Sepal.Length +                     Species_virginica:Sepal.Length) iris_int <-    iris_rec %>%    step_dummy(Species) %>%   step_interact( ~ starts_with(\"Species\"):Sepal.Length) %>%   prep(training = iris) summary(iris_int) #> # A tibble: 9 √ó 4 #>   variable                          type      role      source   #>   <chr>                             <list>    <chr>     <chr>    #> 1 Sepal.Length                      <chr [2]> predictor original #> 2 Sepal.Width                       <chr [2]> predictor original #> 3 Petal.Length                      <chr [2]> predictor original #> 4 Petal.Width                       <chr [2]> predictor original #> 5 original                          <chr [3]> predictor original #> 6 Species_versicolor                <chr [2]> predictor derived  #> 7 Species_virginica                 <chr [2]> predictor derived  #> 8 Species_versicolor_x_Sepal.Length <chr [2]> predictor derived  #> 9 Species_virginica_x_Sepal.Length  <chr [2]> predictor derived starts_with(\"Species\") (Species_versicolor + Species_virginica) iris_int"},{"path":"https://recipes.tidymodels.org/dev/articles/Dummies.html","id":"warning","dir":"Articles","previous_headings":"","what":"Warning!","title":"Handling categorical predictors","text":"work didn‚Äôt convert species factor used interactions step? columns Species isn‚Äôt affected warning issued. Basically, get half model.matrix really problematic subsequent steps.","code":"iris_int <-    iris_rec %>%    step_interact( ~ Species:Sepal.Length) %>%   prep(training = iris) summary(iris_int) #> # A tibble: 8 √ó 4 #>   variable                         type      role      source   #>   <chr>                            <list>    <chr>     <chr>    #> 1 Sepal.Length                     <chr [2]> predictor original #> 2 Sepal.Width                      <chr [2]> predictor original #> 3 Petal.Length                     <chr [2]> predictor original #> 4 Petal.Width                      <chr [2]> predictor original #> 5 Species                          <chr [3]> predictor original #> 6 original                         <chr [3]> predictor original #> 7 Speciesversicolor_x_Sepal.Length <chr [2]> predictor derived  #> 8 Speciesvirginica_x_Sepal.Length  <chr [2]> predictor derived"},{"path":"https://recipes.tidymodels.org/dev/articles/Dummies.html","id":"getting-all-of-the-indicator-variables","dir":"Articles","previous_headings":"","what":"Getting All of the Indicator Variables","title":"Handling categorical predictors","text":"mentioned , C levels factor, C - 1 dummy variables created. might want get back. Historically, C - 1 used linear dependency avoided design matrix; C dummy variables add row-wise intercept column inverse matrix linear regression can‚Äôt computed. technical term design matrix like ‚Äúless full rank‚Äù. models (e.g.¬†glmnet others) can avoid issue might want get columns. , step_dummy option called one_hot make sure C produced: option named way since computer scientists call ‚Äúone-hot encoding‚Äù. Warning! () give full set indicators , use typical contrast function, . might seemingly weird (legitimate) things used contrasts: Since contrast doesn‚Äôt make sense using C columns, reverts back default encoding.","code":"iris_rec %>%    step_dummy(Species, one_hot = TRUE) %>%   prep(training = iris) %>%   bake(original, new_data = NULL, starts_with(\"Species\")) %>%   distinct() #> # A tibble: 3 √ó 4 #>   original   Species_setosa Species_versicolor Species_virginica #>   <fct>               <dbl>              <dbl>             <dbl> #> 1 setosa                  1                  0                 0 #> 2 versicolor              0                  1                 0 #> 3 virginica               0                  0                 1 hot_reference <-    iris_rec %>%    step_dummy(Species, one_hot = TRUE) %>%   prep(training = iris) %>%   bake(original, new_data = NULL, starts_with(\"Species\")) %>%   distinct()  hot_reference #> # A tibble: 3 √ó 4 #>   original   Species_setosa Species_versicolor Species_virginica #>   <fct>               <dbl>              <dbl>             <dbl> #> 1 setosa                  1                  0                 0 #> 2 versicolor              0                  1                 0 #> 3 virginica               0                  0                 1  # from above options(contrasts = go_helmert)  hot_helmert <-    iris_rec %>%    step_dummy(Species, one_hot = TRUE) %>%   prep(training = iris) %>%   bake(original, new_data = NULL, starts_with(\"Species\")) %>%   distinct()  hot_helmert #> # A tibble: 3 √ó 4 #>   original   Species_setosa Species_versicolor Species_virginica #>   <fct>               <dbl>              <dbl>             <dbl> #> 1 setosa                  1                  0                 0 #> 2 versicolor              0                  1                 0 #> 3 virginica               0                  0                 1"},{"path":"https://recipes.tidymodels.org/dev/articles/Dummies.html","id":"novel-levels","dir":"Articles","previous_headings":"","what":"Novel Levels","title":"Handling categorical predictors","text":"recipe used new samples, factors may acquired new levels present prep run. step_dummy encounters situation, warning issued (‚Äúnew levels factor‚Äù) indicator variables correspond factor assigned missing values. One way around use step_other. step can convert infrequently occurring levels new category (defaults ‚Äú‚Äù). step can also used convert new factor levels ‚Äú‚Äù also. Also, step_integer functionality similar LabelEncoder encodes new values zero. embed package can also handle novel factors levels within recipe. step_embed step_tfembed assign common numeric score novel levels.","code":""},{"path":"https://recipes.tidymodels.org/dev/articles/Dummies.html","id":"other-steps-related-to-dummy-variables","dir":"Articles","previous_headings":"","what":"Other Steps Related to Dummy Variables","title":"Handling categorical predictors","text":"bunch steps related going -factors dummy variables: step_unknown assigns missing factor values 'unknown' category. step_other can collapse infrequently occurring levels ''. step_regex create single dummy variable based applying regular expression text field. Similarly, step_count counts occurrences pattern string. step_holiday creates dummy variables date fields capture holidays. step_lincomb can useful -specify interactions need remove linear dependencies. step_zv can remove dummy variables never show 1 column (.e.¬†zero-variance). step_bin2factor takes binary indicator makes factor variable. can useful using naive Bayes models. step_embed, step_lencode_glm, step_lencode_bayes others embed package can use one (non-binary) values encode factor predictors numeric form. step_dummy_extract can create binary indicators strings especially useful multiple choice columns. step_dummy also works ordered factors. seen , default encoding create series polynomial variables. also steps ordered factors: step_ordinalscore can translate levels single numeric score. step_unorder can convert unordered factor.","code":""},{"path":"https://recipes.tidymodels.org/dev/articles/Ordering.html","id":"transforming-a-variable","dir":"Articles","previous_headings":"","what":"Transforming a variable","title":"Ordering of steps","text":"using Box-Cox transformation, don‚Äôt center data first operations might make data non-positive. Alternatively, use Yeo-Johnson transformation don‚Äôt worry .","code":""},{"path":"https://recipes.tidymodels.org/dev/articles/Ordering.html","id":"handling-levels-in-categorical-data","dir":"Articles","previous_headings":"","what":"Handling levels in categorical data","title":"Ordering of steps","text":"order steps handling categorical levels important, step sets levels next step use input. steps create factor output, even input character type. Typically use step_novel() steps changing factor levels, new factor level can set desire rather coerced NA factor handling steps. Use steps like step_unknown() step_other() steps changing factor levels. creating dummy variables categorical variable (see ), complete handling categorical variable‚Äôs levels step_dummy().","code":""},{"path":"https://recipes.tidymodels.org/dev/articles/Ordering.html","id":"dummy-variables","dir":"Articles","previous_headings":"","what":"Dummy variables","title":"Ordering of steps","text":"Recipes automatically create dummy variables (unlike formula methods). want center, scale, operations predictors, run step_dummy() first numeric columns data set instead factors. noted help file step_interact(), make dummy variables creating interactions.","code":""},{"path":"https://recipes.tidymodels.org/dev/articles/Ordering.html","id":"recommended-preprocessing-outline","dir":"Articles","previous_headings":"","what":"Recommended preprocessing outline","title":"Ordering of steps","text":"every individual project‚Äôs needs different, suggested order potential steps work problems: Impute Handle factor levels Individual transformations skewness issues Discretize (needed choice) Create dummy variables Create interactions Normalization steps (center, scale, range, etc) Multivariate transformation (e.g.¬†PCA, spatial sign, etc) , mileage may vary particular problem.","code":""},{"path":"https://recipes.tidymodels.org/dev/articles/Roles.html","id":"the-formula-method","dir":"Articles","previous_headings":"","what":"The Formula Method","title":"Roles in recipes","text":"recipe created using formula interface, defines roles columns data set. summary() can used view tibble containing information regarding roles. roles can updated despite initial assignment. update_role() can modify single existing role: want get rid role column, use remove_role(). represents lack role NA, means variable used recipe, yet declared role. Setting role manually NA allowed: cases column used one context, add_role() can create additional roles: variable multiple existing roles want update one , additional old_role argument update_role() must used resolve ambiguity. Additional variable roles allow use has_role() combination selection methods (see ?selections) target specific variables subsequent processing steps. example, following recipe, adding role \"nocenter\" HHV predictor, can use -has_role(\"nocenter\") exclude HHV centering all_predictors(). selector all_numeric_predictors() can also used place compound specification .","code":"library(recipes)  recipe(Species ~ ., data = iris) %>% summary() #> # A tibble: 5 √ó 4 #>   variable     type      role      source   #>   <chr>        <list>    <chr>     <chr>    #> 1 Sepal.Length <chr [2]> predictor original #> 2 Sepal.Width  <chr [2]> predictor original #> 3 Petal.Length <chr [2]> predictor original #> 4 Petal.Width  <chr [2]> predictor original #> 5 Species      <chr [3]> outcome   original  recipe( ~ Species, data = iris) %>% summary() #> # A tibble: 1 √ó 4 #>   variable type      role      source   #>   <chr>    <list>    <chr>     <chr>    #> 1 Species  <chr [3]> predictor original  recipe(Sepal.Length + Sepal.Width ~ ., data = iris) %>% summary() #> # A tibble: 5 √ó 4 #>   variable     type      role      source   #>   <chr>        <list>    <chr>     <chr>    #> 1 Petal.Length <chr [2]> predictor original #> 2 Petal.Width  <chr [2]> predictor original #> 3 Species      <chr [3]> predictor original #> 4 Sepal.Length <chr [2]> outcome   original #> 5 Sepal.Width  <chr [2]> outcome   original library(modeldata) data(biomass)  recipe(HHV ~ ., data = biomass) %>%    update_role(dataset, new_role = \"dataset split variable\") %>%    update_role(sample, new_role = \"sample ID\") %>%    summary() #> # A tibble: 8 √ó 4 #>   variable type      role                   source   #>   <chr>    <list>    <chr>                  <chr>    #> 1 sample   <chr [3]> sample ID              original #> 2 dataset  <chr [3]> dataset split variable original #> 3 carbon   <chr [2]> predictor              original #> 4 hydrogen <chr [2]> predictor              original #> 5 oxygen   <chr [2]> predictor              original #> 6 nitrogen <chr [2]> predictor              original #> 7 sulfur   <chr [2]> predictor              original #> 8 HHV      <chr [2]> outcome                original recipe(HHV ~ ., data = biomass) %>%    remove_role(sample, old_role = \"predictor\") %>%    summary() #> # A tibble: 8 √ó 4 #>   variable type      role      source   #>   <chr>    <list>    <chr>     <chr>    #> 1 sample   <chr [3]> NA        original #> 2 dataset  <chr [3]> predictor original #> 3 carbon   <chr [2]> predictor original #> 4 hydrogen <chr [2]> predictor original #> 5 oxygen   <chr [2]> predictor original #> 6 nitrogen <chr [2]> predictor original #> 7 sulfur   <chr [2]> predictor original #> 8 HHV      <chr [2]> outcome   original recipe(HHV ~ ., data = biomass) %>%    update_role(sample, new_role = NA_character_) #> Error in `update_role()`: #> ! `new_role` must be a single string, not a character `NA`. multi_role <- recipe(HHV ~ ., data = biomass) %>%    update_role(dataset, new_role = \"dataset split variable\") %>%    update_role(sample, new_role = \"sample ID\") %>%    # Roles below from https://wordcounter.net/random-word-generator   add_role(sample, new_role = \"jellyfish\")   multi_role %>%    summary() #> # A tibble: 9 √ó 4 #>   variable type      role                   source   #>   <chr>    <list>    <chr>                  <chr>    #> 1 sample   <chr [3]> sample ID              original #> 2 sample   <chr [3]> jellyfish              original #> 3 dataset  <chr [3]> dataset split variable original #> 4 carbon   <chr [2]> predictor              original #> 5 hydrogen <chr [2]> predictor              original #> 6 oxygen   <chr [2]> predictor              original #> 7 nitrogen <chr [2]> predictor              original #> 8 sulfur   <chr [2]> predictor              original #> 9 HHV      <chr [2]> outcome                original multi_role %>%   update_role(sample, new_role = \"flounder\", old_role = \"jellyfish\") %>%   summary() #> # A tibble: 9 √ó 4 #>   variable type      role                   source   #>   <chr>    <list>    <chr>                  <chr>    #> 1 sample   <chr [3]> sample ID              original #> 2 sample   <chr [3]> flounder               original #> 3 dataset  <chr [3]> dataset split variable original #> 4 carbon   <chr [2]> predictor              original #> 5 hydrogen <chr [2]> predictor              original #> 6 oxygen   <chr [2]> predictor              original #> 7 nitrogen <chr [2]> predictor              original #> 8 sulfur   <chr [2]> predictor              original #> 9 HHV      <chr [2]> outcome                original multi_role %>%    add_role(HHV, new_role = \"nocenter\") %>%    step_center(all_predictors(), -has_role(\"nocenter\")) %>%    prep(training = biomass, retain = TRUE) %>%    bake(new_data = NULL) %>%    head() #> # A tibble: 6 √ó 8 #>   sample             dataset carbon hydrogen oxygen nitrogen  sulfur   HHV #>   <fct>              <fct>    <dbl>    <dbl>  <dbl>    <dbl>   <dbl> <dbl> #> 1 Akhrot Shell       Traini‚Ä¶  1.52    0.181    4.37  -0.667  -0.234   20.0 #> 2 Alabama Oak Wood ‚Ä¶ Traini‚Ä¶  1.21    0.241    2.73  -0.877  -0.234   19.2 #> 3 Alder              Traini‚Ä¶ -0.475   0.341    7.68  -0.967  -0.214   18.3 #> 4 Alfalfa            Traini‚Ä¶ -3.19   -0.489   -2.97   2.22   -0.0736  18.2 #> 5 Alfalfa Seed Straw Traini‚Ä¶ -1.53   -0.0586   2.15  -0.0772 -0.214   18.4 #> 6 Alfalfa Stalks     Traini‚Ä¶ -2.89    0.291    1.63   0.963  -0.134   18.5"},{"path":"https://recipes.tidymodels.org/dev/articles/Roles.html","id":"the-non-formula-interface","dir":"Articles","previous_headings":"","what":"The Non-Formula Interface","title":"Roles in recipes","text":"can start recipe without roles: roles can added bulk needed:","code":"recipe(biomass) %>%    summary() #> # A tibble: 8 √ó 4 #>   variable type      role  source   #>   <chr>    <list>    <chr> <chr>    #> 1 sample   <chr [3]> NA    original #> 2 dataset  <chr [3]> NA    original #> 3 carbon   <chr [2]> NA    original #> 4 hydrogen <chr [2]> NA    original #> 5 oxygen   <chr [2]> NA    original #> 6 nitrogen <chr [2]> NA    original #> 7 sulfur   <chr [2]> NA    original #> 8 HHV      <chr [2]> NA    original recipe(biomass) %>%    update_role(contains(\"gen\"), new_role = \"lunchroom\") %>%    update_role(sample, HHV, new_role = \"snail\") %>%    summary() #> # A tibble: 8 √ó 4 #>   variable type      role      source   #>   <chr>    <list>    <chr>     <chr>    #> 1 sample   <chr [3]> snail     original #> 2 dataset  <chr [3]> NA        original #> 3 carbon   <chr [2]> NA        original #> 4 hydrogen <chr [2]> lunchroom original #> 5 oxygen   <chr [2]> lunchroom original #> 6 nitrogen <chr [2]> lunchroom original #> 7 sulfur   <chr [2]> NA        original #> 8 HHV      <chr [2]> snail     original"},{"path":"https://recipes.tidymodels.org/dev/articles/Roles.html","id":"role-inheritance","dir":"Articles","previous_headings":"","what":"Role Inheritance","title":"Roles in recipes","text":"recipes steps role argument lets set role new columns generated step. recipe modifies column -place, role never modified. example, ?step_center documentation: role: used step since new variables created cases, roles defaulted relevant value based context. example, ?step_dummy role: model terms created step, analysis role assigned?. default, function assumes binary dummy variable columns created original variables used predictors model. , default, predictors don‚Äôt :","code":"recipe( ~ ., data = iris) %>%    step_dummy(Species) %>%    prep() %>%    bake(new_data = NULL, all_predictors()) %>%    dplyr::select(starts_with(\"Species\")) %>%    names() #> [1] \"Species_versicolor\" \"Species_virginica\"  # or something else recipe( ~ ., data = iris) %>%    step_dummy(Species, role = \"trousers\") %>%    prep() %>%    bake(new_data = NULL, has_role(\"trousers\")) %>%    names() #> [1] \"Species_versicolor\" \"Species_virginica\""},{"path":"https://recipes.tidymodels.org/dev/articles/Skipping.html","id":"example-class-imbalance-sampling-and-skipping-steps","dir":"Articles","previous_headings":"","what":"Example: Class Imbalance Sampling and Skipping Steps","title":"On skipping steps","text":"example second case, consider problem severe class imbalance. Suppose two classes predicted event interest occurs 5% time. Many models quickly optimize accuracy overfitting majority class predicting everything non-event. One method compensate -sample training set class frequencies equal. Although somewhat counter-intuitive, can often lead better models. important consideration preprocessing applied training set can impact model fit. test set unaffected operation. recipe used create design matrix model, -sampling remove rows. bad idea test set since data represent population samples looks like ‚Äúwild.‚Äù. Based , recipe included -sample skip step data baked test set.","code":""},{"path":"https://recipes.tidymodels.org/dev/articles/Skipping.html","id":"other-examples","dir":"Articles","previous_headings":"","what":"Other Examples","title":"On skipping steps","text":"steps default value skip = TRUE: step_filter() allows arbitrary filtering rows. step_slice() also removes (adds) rows data. step_sample() enables random sampling data set. step_naomit() remove rows missing values certain columns. main issue steps applied new data (.e.¬†recipe trained) non-outcome rows can become --sync outcome data. example, bake() run step_naomit(skip = FALSE) missing values, predictors fewer rows outcome vector. model predictions produced merged data, discordant rows. case, better missing values predictions full data set subset predictions complete data. general rule tidymodels , models, return value tibble number rows data predicted order.","code":""},{"path":"https://recipes.tidymodels.org/dev/articles/Skipping.html","id":"how-to-skip-steps","dir":"Articles","previous_headings":"","what":"How To Skip Steps","title":"On skipping steps","text":"version recipes 0.1.2, step optional logical argument called skip. almost every case, default FALSE. using option: steps skipped prep() Steps skip = TRUE applied data bake() called Recall two ways getting results training set recipes. First, bake() can used usual. Second, bake(new_data = NULL) shortcut use already processed data contained recipe prep(recipe, retain = TRUE) used. bake(new_data = NULL) much faster way get training set steps applied data. reason, almost always used retain = TRUE steps skipped (warning produced otherwise).","code":""},{"path":"https://recipes.tidymodels.org/dev/articles/Skipping.html","id":"be-careful","dir":"Articles","previous_headings":"","what":"Be Careful!","title":"On skipping steps","text":"Skipping necessary feature can dangerous used carelessly. example, skipping operation whose variables used later might issue: emphasize bake(new_data = NULL) used get training set values whenever step skipped.","code":"library(recipes) car_recipe <- recipe(mpg ~ ., data = mtcars) %>%   step_log(disp, skip = TRUE) %>%   step_center(all_numeric_predictors()) %>%   prep(training = mtcars)  # These *should* produce the same results (as they do for `hp`) bake(car_recipe, new_data = NULL)   %>% head() %>% select(disp, hp) #> # A tibble: 6 √ó 2 #>     disp    hp #>    <dbl> <dbl> #> 1 -0.210 -36.7 #> 2 -0.210 -36.7 #> 3 -0.603 -53.7 #> 4  0.268 -36.7 #> 5  0.601  28.3 #> 6  0.131 -41.7 bake(car_recipe, new_data = mtcars) %>% head() %>% select(disp, hp) #> # A tibble: 6 √ó 2 #>    disp    hp #>   <dbl> <dbl> #> 1  155. -36.7 #> 2  155. -36.7 #> 3  103. -53.7 #> 4  253. -36.7 #> 5  355.  28.3 #> 6  220. -41.7"},{"path":"https://recipes.tidymodels.org/dev/articles/recipes.html","id":"an-example","dir":"Articles","previous_headings":"","what":"An Example","title":"Introduction to recipes","text":"packages contains data set used predict whether person pay back bank loan. 13 predictor columns factor variable Status (outcome). first separate data training test set: Note missing values data: Rather remove , values imputed. idea preprocessing operations created using training set steps applied training test set.","code":"library(recipes) library(rsample) library(modeldata)  data(\"credit_data\")  set.seed(55) train_test_split <- initial_split(credit_data)  credit_train <- training(train_test_split) credit_test <- testing(train_test_split) vapply(credit_train, function(x) mean(!is.na(x)), numeric(1)) #>    Status Seniority      Home      Time       Age   Marital   Records  #>     1.000     1.000     0.998     1.000     1.000     1.000     1.000  #>       Job  Expenses    Income    Assets      Debt    Amount     Price  #>     0.999     1.000     0.910     0.989     0.996     1.000     1.000"},{"path":"https://recipes.tidymodels.org/dev/articles/recipes.html","id":"an-initial-recipe","dir":"Articles","previous_headings":"","what":"An Initial Recipe","title":"Introduction to recipes","text":"First, create recipe object original data specify processing steps. Recipes can created manually sequentially adding roles variables data set. analysis requires outcomes predictors, easiest way create initial recipe use standard formula method: data contained data argument need training set; data used catalog names variables types (e.g.¬†numeric, etc.). (Note formula method used declare variables, roles nothing else. use inline functions (e.g.¬†log) complain. types operations can added later.)","code":"rec_obj <- recipe(Status ~ ., data = credit_train) rec_obj"},{"path":"https://recipes.tidymodels.org/dev/articles/recipes.html","id":"preprocessing-steps","dir":"Articles","previous_headings":"","what":"Preprocessing Steps","title":"Introduction to recipes","text":", preprocessing steps step X can added sequentially one two ways: step_dummy functions always return updated recipes. One important facet code method specifying variables used different steps. manual page ?selections details dplyr-like selector functions can used: use basic variable names (e.g.¬†x1, x2), dplyr functions selecting variables: contains(), ends_with(), everything(), matches(), num_range(), starts_with(), functions subset role variables specified far: all_outcomes(), all_predictors(), has_role(), similar functions type data: all_nominal(), all_numeric(), has_type(), compound selectors all_nominal_predictors() all_numeric_predictors(). Note methods listed ones can used select variables inside steps. Also, minus signs can used deselect variables. data, can add operation impute predictors. many ways recipes includes steps purpose: , K-nearest neighbor imputation used. works numeric non-numeric predictors defaults K five , selects predictors removes numeric: important realize specific variables declared yet (shown recipe printed ). preprocessing steps, variables added removed current list possible variables. Since predictors categorical nature (.e.¬†nominal), make sense convert factor predictors numeric dummy variables (aka indicator variables) using step_dummy(). , step selects non-numeric predictors: point recipe, predictor encoded numeric, can add steps center scale : preprocessing steps predictors, can now estimate means standard deviations training set. prep function used recipe data set: Note real variables listed (e.g.¬†Home etc.) instead selectors (all_numeric_predictors()). Now statistics estimated, preprocessing can applied training test set: bake returns tibble , default, includes variables: Selectors can also used. example, predictors needed, can use bake(object, new_data, all_predictors()). number steps included package:","code":"rec_obj <- step_{X}(rec_obj, arguments)    ## or rec_obj <- rec_obj %>% step_{X}(arguments) grep(\"impute_\", ls(\"package:recipes\"), value = TRUE) #> [1] \"step_impute_bag\"    \"step_impute_knn\"    \"step_impute_linear\" #> [4] \"step_impute_lower\"  \"step_impute_mean\"   \"step_impute_median\" #> [7] \"step_impute_mode\"   \"step_impute_roll\" imputed <- rec_obj %>%   step_impute_knn(all_predictors())  imputed ind_vars <- imputed %>%   step_dummy(all_nominal_predictors())  ind_vars standardized <- ind_vars %>%   step_center(all_numeric_predictors()) %>%   step_scale(all_numeric_predictors())  standardized trained_rec <- prep(standardized, training = credit_train) trained_rec train_data <- bake(trained_rec, new_data = credit_train) test_data  <- bake(trained_rec, new_data = credit_test) class(test_data) #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\" test_data #> # A tibble: 1,114 √ó 23 #>    Seniority   Time    Age Expenses  Income Assets   Debt  Amount    Price #>        <dbl>  <dbl>  <dbl>    <dbl>   <dbl>  <dbl>  <dbl>   <dbl>    <dbl> #>  1     1.09   0.924  1.88    -0.385 -0.131  -0.488 -0.295 -0.0817  0.297   #>  2    -0.977  0.924 -0.459    1.77  -0.437   0.845 -0.295  0.333   0.760   #>  3    -0.977  0.103  0.349    1.77  -0.783  -0.488 -0.295  0.333   0.00254 #>  4    -0.247  0.103 -0.280    0.231 -0.207  -0.133 -0.295  0.229   0.171   #>  5    -0.125 -0.718 -0.729    0.231 -0.258  -0.222 -0.295 -0.807  -0.854   #>  6    -0.855  0.924 -0.549   -1.05  -0.0539 -0.488 -0.295  0.436  -0.331   #>  7     2.31   0.924  0.349    0.949 -0.0155 -0.488 -0.295 -0.185   0.0475  #>  8     0.848 -0.718  0.529    1.00   1.40   -0.133 -0.295  1.58    1.69    #>  9    -0.977 -0.718 -1.27    -0.538 -0.246  -0.266 -0.295 -1.32   -1.65    #> 10    -0.855  0.514 -0.100    0.744 -0.540  -0.488 -0.295 -0.185  -0.800   #> # ‚Ñπ 1,104 more rows #> # ‚Ñπ 14 more variables: Status <fct>, Home_other <dbl>, Home_owner <dbl>, #> #   Home_parents <dbl>, Home_priv <dbl>, Home_rent <dbl>, #> #   Marital_married <dbl>, Marital_separated <dbl>, Marital_single <dbl>, #> #   Marital_widow <dbl>, Records_yes <dbl>, Job_freelance <dbl>, #> #   Job_others <dbl>, Job_partime <dbl> vapply(test_data, function(x) mean(!is.na(x)), numeric(1)) #>         Seniority              Time               Age          Expenses  #>                 1                 1                 1                 1  #>            Income            Assets              Debt            Amount  #>                 1                 1                 1                 1  #>             Price            Status        Home_other        Home_owner  #>                 1                 1                 1                 1  #>      Home_parents         Home_priv         Home_rent   Marital_married  #>                 1                 1                 1                 1  #> Marital_separated    Marital_single     Marital_widow       Records_yes  #>                 1                 1                 1                 1  #>     Job_freelance        Job_others       Job_partime  #>                 1                 1                 1 #>  [1] \"step_arrange\"            \"step_bagimpute\"          #>  [3] \"step_bin2factor\"         \"step_BoxCox\"             #>  [5] \"step_bs\"                 \"step_center\"             #>  [7] \"step_classdist\"          \"step_classdist_shrunken\" #>  [9] \"step_corr\"               \"step_count\"              #> [11] \"step_cut\"                \"step_date\"               #> [13] \"step_depth\"              \"step_discretize\"         #> [15] \"step_dummy\"              \"step_dummy_extract\"      #> [17] \"step_dummy_multi_choice\" \"step_factor2string\"      #> [19] \"step_filter\"             \"step_filter_missing\"     #> [21] \"step_geodist\"            \"step_harmonic\"           #> [23] \"step_holiday\"            \"step_hyperbolic\"         #> [25] \"step_ica\"                \"step_impute_bag\"         #> [27] \"step_impute_knn\"         \"step_impute_linear\"      #> [29] \"step_impute_lower\"       \"step_impute_mean\"        #> [31] \"step_impute_median\"      \"step_impute_mode\"        #> [33] \"step_impute_roll\"        \"step_indicate_na\"        #> [35] \"step_integer\"            \"step_interact\"           #> [37] \"step_intercept\"          \"step_inverse\"            #> [39] \"step_invlogit\"           \"step_isomap\"             #> [41] \"step_knnimpute\"          \"step_kpca\"               #> [43] \"step_kpca_poly\"          \"step_kpca_rbf\"           #> [45] \"step_lag\"                \"step_lincomb\"            #> [47] \"step_log\"                \"step_logit\"              #> [49] \"step_lowerimpute\"        \"step_meanimpute\"         #> [51] \"step_medianimpute\"       \"step_modeimpute\"         #> [53] \"step_mutate\"             \"step_mutate_at\"          #> [55] \"step_naomit\"             \"step_nnmf\"               #> [57] \"step_nnmf_sparse\"        \"step_normalize\"          #> [59] \"step_novel\"              \"step_ns\"                 #> [61] \"step_num2factor\"         \"step_nzv\"                #> [63] \"step_ordinalscore\"       \"step_other\"              #> [65] \"step_pca\"                \"step_percentile\"         #> [67] \"step_pls\"                \"step_poly\"               #> [69] \"step_poly_bernstein\"     \"step_profile\"            #> [71] \"step_range\"              \"step_ratio\"              #> [73] \"step_regex\"              \"step_relevel\"            #> [75] \"step_relu\"               \"step_rename\"             #> [77] \"step_rename_at\"          \"step_rm\"                 #> [79] \"step_rollimpute\"         \"step_sample\"             #> [81] \"step_scale\"              \"step_select\"             #> [83] \"step_shuffle\"            \"step_slice\"              #> [85] \"step_spatialsign\"        \"step_spline_b\"           #> [87] \"step_spline_convex\"      \"step_spline_monotone\"    #> [89] \"step_spline_natural\"     \"step_spline_nonnegative\" #> [91] \"step_sqrt\"               \"step_string2factor\"      #> [93] \"step_time\"               \"step_unknown\"            #> [95] \"step_unorder\"            \"step_window\"             #> [97] \"step_YeoJohnson\"         \"step_zv\""},{"path":"https://recipes.tidymodels.org/dev/articles/recipes.html","id":"checks","dir":"Articles","previous_headings":"","what":"Checks","title":"Introduction to recipes","text":"Another type operation can added recipes check. Checks conduct sort data validation , issue found, returns data -; otherwise, error thrown. example, check_missing fail variables selected validation missing values. check done recipe prepared well data baked. Checks added way steps: Currently, recipes includes:","code":"trained_rec <- trained_rec %>%   check_missing(contains(\"Marital\")) #> [1] \"check_class\"      \"check_cols\"       \"check_missing\"    #> [4] \"check_name\"       \"check_new_data\"   \"check_new_values\" #> [7] \"check_range\"      \"check_type\""},{"path":"https://recipes.tidymodels.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Max Kuhn. Author, maintainer. Hadley Wickham. Author. Emil Hvitfeldt. Author. . Copyright holder, funder.","code":""},{"path":"https://recipes.tidymodels.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kuhn M, Wickham H, Hvitfeldt E (2024). recipes: Preprocessing Feature Engineering Steps Modeling. R package version 1.1.0.9000, https://recipes.tidymodels.org/, https://github.com/tidymodels/recipes.","code":"@Manual{,   title = {recipes: Preprocessing and Feature Engineering Steps for Modeling},   author = {Max Kuhn and Hadley Wickham and Emil Hvitfeldt},   year = {2024},   note = {R package version 1.1.0.9000,     https://recipes.tidymodels.org/},   url = {https://github.com/tidymodels/recipes}, }"},{"path":"https://recipes.tidymodels.org/dev/contributors.html","id":"contributors-to-recipes-package-sorted-alphabetically","dir":"","previous_headings":"","what":"Contributors to recipes package (sorted alphabetically)","title":"NA","text":"Lionel Henry PR greatly simplified selection code. Kirk Mettler Contributed imported caret code linear combination identification. Jed Wing Contributed imported caret code linear combination identification. Alex Hayes Contributed initial implementations step_intercept step_relu.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Preprocessing and Feature Engineering Steps for Modeling","text":"recipes, can use dplyr-like pipeable sequences feature engineering steps get data ready modeling. example, create recipe containing outcome plus two numeric predictors center scale (‚Äúnormalize‚Äù) predictors: information recipes can found Get Started page tidymodels.org. may consider recipes alternative method creating preprocessing design matrices (also known model matrices) can used modeling visualization. R already long-standing methods creating matrices (e.g.¬†formulas model.matrix), limitations existing infrastructure can .","code":"library(recipes) data(ad_data, package = \"modeldata\")  ad_rec <- recipe(Class ~ tau + VEGF, data = ad_data) %>%   step_normalize(all_numeric_predictors())  ad_rec"},{"path":"https://recipes.tidymodels.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Preprocessing and Feature Engineering Steps for Modeling","text":"several ways install recipes:","code":"# The easiest way to get recipes is to install all of tidymodels: install.packages(\"tidymodels\")  # Alternatively, install just recipes: install.packages(\"recipes\")  # Or the development version from GitHub: # install.packages(\"pak\") pak::pak(\"tidymodels/recipes\")"},{"path":"https://recipes.tidymodels.org/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Preprocessing and Feature Engineering Steps for Modeling","text":"questions discussions tidymodels packages, modeling, machine learning, please post RStudio Community. think encountered bug, please submit issue. Either way, learn create share reprex (minimal, reproducible example), clearly communicate code. Check details contributing guidelines tidymodels packages get help.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/add_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a New Operation to the Current Recipe ‚Äî add_step","title":"Add a New Operation to the Current Recipe ‚Äî add_step","text":"add_step adds step last location recipe. add_check checks.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/add_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a New Operation to the Current Recipe ‚Äî add_step","text":"","code":"add_step(rec, object)  add_check(rec, object)"},{"path":"https://recipes.tidymodels.org/dev/reference/add_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a New Operation to the Current Recipe ‚Äî add_step","text":"rec recipe(). object step check object.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/add_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a New Operation to the Current Recipe ‚Äî add_step","text":"updated recipe() new operation last slot.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/bake.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a trained preprocessing recipe ‚Äî bake","title":"Apply a trained preprocessing recipe ‚Äî bake","text":"recipe least one preprocessing operation trained prep(), apply computations new data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/bake.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a trained preprocessing recipe ‚Äî bake","text":"","code":"bake(object, ...)  # S3 method for class 'recipe' bake(object, new_data, ..., composition = \"tibble\")"},{"path":"https://recipes.tidymodels.org/dev/reference/bake.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a trained preprocessing recipe ‚Äî bake","text":"object trained object recipe() least one preprocessing operation. ... One selector functions choose variables returned function. See selections() details. selectors given, default use dplyr::everything(). new_data data frame tibble preprocessing applied. NULL given new_data, pre-processed training data returned (assuming prep(retain = TRUE) used). composition Either \"tibble\", \"matrix\", \"data.frame\", \"dgCMatrix\" format processed data set. Note computations baking process done non-sparse format. Also, note argument called selectors selectors resolve numeric columns (otherwise error thrown).","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/bake.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a trained preprocessing recipe ‚Äî bake","text":"tibble, matrix, sparse matrix may different columns original columns new_data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/bake.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a trained preprocessing recipe ‚Äî bake","text":"bake() takes trained recipe applies operations data set create design matrix. using recipe preprocessor modeling, highly recommend use workflow() instead manually applying recipe (see example recipe()). data set large, time can saved using retain = TRUE option prep(). stores processed version training set. option set, bake(object, new_data = NULL) return free. Also, steps skip = TRUE applied data bake() invoked data set new_data. bake(object, new_data = NULL) always steps applied.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/bake.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a trained preprocessing recipe ‚Äî bake","text":"","code":"data(ames, package = \"modeldata\")  ames <- mutate(ames, Sale_Price = log10(Sale_Price))  ames_rec <-   recipe(Sale_Price ~ ., data = ames[-(1:6), ]) %>%   step_other(Neighborhood, threshold = 0.05) %>%   step_dummy(all_nominal()) %>%   step_interact(~ starts_with(\"Central_Air\"):Year_Built) %>%   step_ns(Longitude, Latitude, deg_free = 2) %>%   step_zv(all_predictors()) %>%   prep()  # return the training set (already embedded in ames_rec) bake(ames_rec, new_data = NULL) #> # A tibble: 2,924 √ó 259 #>    Lot_Frontage Lot_Area Year_Built Year_Remod_Add Mas_Vnr_Area #>           <dbl>    <int>      <int>          <int>        <dbl> #>  1           41     4920       2001           2001            0 #>  2           43     5005       1992           1992            0 #>  3           39     5389       1995           1996            0 #>  4           60     7500       1999           1999            0 #>  5           75    10000       1993           1994            0 #>  6            0     7980       1992           2007            0 #>  7           63     8402       1998           1998            0 #>  8           85    10176       1990           1990            0 #>  9            0     6820       1985           1985            0 #> 10           47    53504       2003           2003          603 #> # ‚Ñπ 2,914 more rows #> # ‚Ñπ 254 more variables: BsmtFin_SF_1 <dbl>, BsmtFin_SF_2 <dbl>, #> #   Bsmt_Unf_SF <dbl>, Total_Bsmt_SF <dbl>, First_Flr_SF <int>, #> #   Second_Flr_SF <int>, Gr_Liv_Area <int>, Bsmt_Full_Bath <dbl>, #> #   Bsmt_Half_Bath <dbl>, Full_Bath <int>, Half_Bath <int>, #> #   Bedroom_AbvGr <int>, Kitchen_AbvGr <int>, TotRms_AbvGrd <int>, #> #   Fireplaces <int>, Garage_Cars <dbl>, Garage_Area <dbl>, ‚Ä¶  # apply processing to other data: bake(ames_rec, new_data = head(ames)) #> # A tibble: 6 √ó 259 #>   Lot_Frontage Lot_Area Year_Built Year_Remod_Add Mas_Vnr_Area #>          <dbl>    <int>      <int>          <int>        <dbl> #> 1          141    31770       1960           1960          112 #> 2           80    11622       1961           1961            0 #> 3           81    14267       1958           1958          108 #> 4           93    11160       1968           1968            0 #> 5           74    13830       1997           1998            0 #> 6           78     9978       1998           1998           20 #> # ‚Ñπ 254 more variables: BsmtFin_SF_1 <dbl>, BsmtFin_SF_2 <dbl>, #> #   Bsmt_Unf_SF <dbl>, Total_Bsmt_SF <dbl>, First_Flr_SF <int>, #> #   Second_Flr_SF <int>, Gr_Liv_Area <int>, Bsmt_Full_Bath <dbl>, #> #   Bsmt_Half_Bath <dbl>, Full_Bath <int>, Half_Bath <int>, #> #   Bedroom_AbvGr <int>, Kitchen_AbvGr <int>, TotRms_AbvGrd <int>, #> #   Fireplaces <int>, Garage_Cars <dbl>, Garage_Area <dbl>, #> #   Wood_Deck_SF <int>, Open_Porch_SF <int>, Enclosed_Porch <int>, ‚Ä¶  # only return selected variables: bake(ames_rec, new_data = head(ames), all_numeric_predictors()) #> # A tibble: 6 √ó 258 #>   Lot_Frontage Lot_Area Year_Built Year_Remod_Add Mas_Vnr_Area #>          <dbl>    <int>      <int>          <int>        <dbl> #> 1          141    31770       1960           1960          112 #> 2           80    11622       1961           1961            0 #> 3           81    14267       1958           1958          108 #> 4           93    11160       1968           1968            0 #> 5           74    13830       1997           1998            0 #> 6           78     9978       1998           1998           20 #> # ‚Ñπ 253 more variables: BsmtFin_SF_1 <dbl>, BsmtFin_SF_2 <dbl>, #> #   Bsmt_Unf_SF <dbl>, Total_Bsmt_SF <dbl>, First_Flr_SF <int>, #> #   Second_Flr_SF <int>, Gr_Liv_Area <int>, Bsmt_Full_Bath <dbl>, #> #   Bsmt_Half_Bath <dbl>, Full_Bath <int>, Half_Bath <int>, #> #   Bedroom_AbvGr <int>, Kitchen_AbvGr <int>, TotRms_AbvGrd <int>, #> #   Fireplaces <int>, Garage_Cars <dbl>, Garage_Area <dbl>, #> #   Wood_Deck_SF <int>, Open_Porch_SF <int>, Enclosed_Porch <int>, ‚Ä¶ bake(ames_rec, new_data = head(ames), starts_with(c(\"Longitude\", \"Latitude\"))) #> # A tibble: 6 √ó 4 #>   Longitude_ns_1 Longitude_ns_2 Latitude_ns_1 Latitude_ns_2 #>            <dbl>          <dbl>         <dbl>         <dbl> #> 1          0.570       -0.0141          0.472         0.394 #> 2          0.570       -0.0142          0.481         0.360 #> 3          0.569       -0.00893         0.484         0.348 #> 4          0.563        0.0212          0.496         0.301 #> 5          0.562       -0.212           0.405         0.634 #> 6          0.562       -0.212           0.407         0.630"},{"path":"https://recipes.tidymodels.org/dev/reference/case-weight-helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Helpers for steps with case weights ‚Äî case-weight-helpers","title":"Helpers for steps with case weights ‚Äî case-weight-helpers","text":"functions can used basic calculations without case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/case-weight-helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helpers for steps with case weights ‚Äî case-weight-helpers","text":"","code":"get_case_weights(info, .data, call = rlang::caller_env())  averages(x, wts = NULL, na_rm = TRUE)  medians(x, wts = NULL)  variances(x, wts = NULL, na_rm = TRUE)  correlations(x, wts = NULL, use = \"everything\", method = \"pearson\")  covariances(x, wts = NULL, use = \"everything\", method = \"pearson\")  pca_wts(x, wts = NULL)  are_weights_used(wts, unsupervised = FALSE)"},{"path":"https://recipes.tidymodels.org/dev/reference/case-weight-helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helpers for steps with case weights ‚Äî case-weight-helpers","text":"info data frame info argument within steps .data training data call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information. x numeric vector data frame wts vector case weights na_rm logical value indicating whether NA values removed computations. use Used correlations() covariances() pass argument cor() cov() method Used correlations() covariances() pass argument cor() cov() unsupervised Can step handle unsupervised weights","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/case-weight-helpers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helpers for steps with case weights ‚Äî case-weight-helpers","text":"get_case_weights() designed developers recipe steps, return column role \"case weight\" vector. functions, rows missing case weights removed calculations. averages() variances(), missing values data (case weights) affect calculations rows. correlations(), correlation matrix computation first removes rows missing values (equal \"complete.obs\" strategy stats::cor()). are_weights_used() designed developers recipe steps used inside print method determine printing done.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/case_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Using case weights with recipes ‚Äî case_weights","title":"Using case weights with recipes ‚Äî case_weights","text":"Case weights positive numeric values may influence much data point preprocessing. variety situations case weights can used.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/case_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Using case weights with recipes ‚Äî case_weights","text":"tidymodels packages differentiate different types case weights used entire data analysis process, including preprocessing data, model fitting, performance calculations, etc. tidymodels packages require users convert numeric vectors vector class reflects used. example, situations weights affect operations centering scaling preprocessing operations. types weights allowed tidymodels : Frequency weights via hardhat::frequency_weights() Importance weights via hardhat::importance_weights() types can added request. recipes, distinguish supervised unsupervised steps. Supervised steps use outcome calculations, type steps use frequency importance weights. Unsupervised steps use outcome use frequency weights. 3 main principles case weights used within recipes. First, data set passed recipe() function already case weights column . column can created beforehand using hardhat::frequency_weights() hardhat::importance_weights(). Second, can 1 case weights column recipe given time. Third, can modify case weights column steps using update_role() add_role() functions. principles ensure experience minimal surprises using case weights, steps automatically apply case weighted operations supported. printing method additionally show steps weighted steps ignored weights incompatible type.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/check_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Check variable class ‚Äî check_class","title":"Check variable class ‚Äî check_class","text":"check_class creates specification recipe check check variable designated class.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check variable class ‚Äî check_class","text":"","code":"check_class(   recipe,   ...,   role = NA,   trained = FALSE,   class_nm = NULL,   allow_additional = FALSE,   skip = FALSE,   class_list = NULL,   id = rand_id(\"class\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/check_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check variable class ‚Äî check_class","text":"recipe recipe object. check added sequence operations recipe. ... One selector functions choose variables check. See selections() details. role used check since new variables created. trained logical whether selectors ... resolved prep(). class_nm character vector used inherits check class. NULL classes learned prep. Can contain one class. allow_additional TRUE variable allowed additional classes one(s) checked. skip logical. check skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. class_list named list column classes. NULL computed prep(). id character string unique check identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check variable class ‚Äî check_class","text":"updated version recipe new check added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check variable class ‚Äî check_class","text":"function can check classes variables two ways. class argument provided check variables specified given class. argument NULL, check learn classes specified variables prep. ways break bake variables requested class. variable multiple classes prep, classes checked. Please note prep argument strings_as_factors defaults TRUE. train set contains character variables check break bake strings_as_factors TRUE.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_class.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Check variable class ‚Äî check_class","text":"tidy() check, tibble columns terms (selectors variables selected) value (type) returned.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_class.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Check variable class ‚Äî check_class","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/check_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check variable class ‚Äî check_class","text":"","code":"library(dplyr) data(Sacramento, package = \"modeldata\")  # Learn the classes on the train set train <- Sacramento[1:500, ] test <- Sacramento[501:nrow(Sacramento), ] recipe(train, sqft ~ .) %>%   check_class(everything()) %>%   prep(train, strings_as_factors = FALSE) %>%   bake(test) #> # A tibble: 432 √ó 9 #>    city           zip     beds baths type   price latitude longitude  sqft #>    <fct>          <fct>  <int> <dbl> <fct>  <int>    <dbl>     <dbl> <int> #>  1 SACRAMENTO     z95834     4   2   Resi‚Ä¶ 328578     38.6     -122.  1659 #>  2 ELK_GROVE      z95757     3   3   Resi‚Ä¶ 331000     38.4     -121.  2442 #>  3 RANCHO_CORDOVA z95742     4   3   Resi‚Ä¶ 331500     38.6     -121.  2590 #>  4 SACRAMENTO     z95833     4   2   Resi‚Ä¶ 340000     38.6     -122.  2155 #>  5 SACRAMENTO     z95838     3   2   Resi‚Ä¶ 344755     38.7     -121.  1673 #>  6 SACRAMENTO     z95828     3   2   Resi‚Ä¶ 345746     38.5     -121.  1810 #>  7 ELK_GROVE      z95757     4   2   Resi‚Ä¶ 351000     38.4     -121.  2789 #>  8 GALT           z95632     4   2   Resi‚Ä¶ 353767     38.3     -121.  1606 #>  9 GALT           z95632     5   3.5 Resi‚Ä¶ 355000     38.3     -121.  3499 #> 10 SACRAMENTO     z95835     4   2   Resi‚Ä¶ 356035     38.7     -122.  2166 #> # ‚Ñπ 422 more rows  # Manual specification recipe(train, sqft ~ .) %>%   check_class(sqft, class_nm = \"integer\") %>%   check_class(city, zip, type, class_nm = \"factor\") %>%   check_class(latitude, longitude, class_nm = \"numeric\") %>%   prep(train, strings_as_factors = FALSE) %>%   bake(test) #> # A tibble: 432 √ó 9 #>    city           zip     beds baths type   price latitude longitude  sqft #>    <fct>          <fct>  <int> <dbl> <fct>  <int>    <dbl>     <dbl> <int> #>  1 SACRAMENTO     z95834     4   2   Resi‚Ä¶ 328578     38.6     -122.  1659 #>  2 ELK_GROVE      z95757     3   3   Resi‚Ä¶ 331000     38.4     -121.  2442 #>  3 RANCHO_CORDOVA z95742     4   3   Resi‚Ä¶ 331500     38.6     -121.  2590 #>  4 SACRAMENTO     z95833     4   2   Resi‚Ä¶ 340000     38.6     -122.  2155 #>  5 SACRAMENTO     z95838     3   2   Resi‚Ä¶ 344755     38.7     -121.  1673 #>  6 SACRAMENTO     z95828     3   2   Resi‚Ä¶ 345746     38.5     -121.  1810 #>  7 ELK_GROVE      z95757     4   2   Resi‚Ä¶ 351000     38.4     -121.  2789 #>  8 GALT           z95632     4   2   Resi‚Ä¶ 353767     38.3     -121.  1606 #>  9 GALT           z95632     5   3.5 Resi‚Ä¶ 355000     38.3     -121.  3499 #> 10 SACRAMENTO     z95835     4   2   Resi‚Ä¶ 356035     38.7     -122.  2166 #> # ‚Ñπ 422 more rows  # By default only the classes that are specified #   are allowed. x_df <- tibble(time = c(Sys.time() - 60, Sys.time())) x_df$time %>% class() #> [1] \"POSIXct\" \"POSIXt\"  if (FALSE) { # \\dontrun{ recipe(x_df) %>%   check_class(time, class_nm = \"POSIXt\") %>%   prep(x_df) %>%   bake_(x_df) } # }  # Use allow_additional = TRUE if you are fine with it recipe(x_df) %>%   check_class(time, class_nm = \"POSIXt\", allow_additional = TRUE) %>%   prep(x_df) %>%   bake(x_df) #> # A tibble: 2 √ó 1 #>   time                #>   <dttm>              #> 1 2024-08-15 21:58:27 #> 2 2024-08-15 21:59:27"},{"path":"https://recipes.tidymodels.org/dev/reference/check_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if all columns are present ‚Äî check_cols","title":"Check if all columns are present ‚Äî check_cols","text":"check_cols creates specification recipe step check columns training frame present new data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if all columns are present ‚Äî check_cols","text":"","code":"check_cols(   recipe,   ...,   role = NA,   trained = FALSE,   skip = FALSE,   id = rand_id(\"cols\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/check_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if all columns are present ‚Äî check_cols","text":"recipe recipe object. check added sequence operations recipe. ... One selector functions choose variables check. See selections() details. role used check since new variables created. trained logical whether selectors ... resolved prep(). skip logical. check skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique check identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if all columns are present ‚Äî check_cols","text":"updated version recipe new check added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_cols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if all columns are present ‚Äî check_cols","text":"check break bake function specified columns present data. check passes, nothing changed data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_cols.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Check if all columns are present ‚Äî check_cols","text":"tidy() check, tibble columns terms (selectors variables selected) value (type) returned.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/check_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if all columns are present ‚Äî check_cols","text":"","code":"data(biomass, package = \"modeldata\")  biomass_rec <- recipe(HHV ~ ., data = biomass) %>%   step_rm(sample, dataset) %>%   check_cols(contains(\"gen\")) %>%   step_center(all_numeric_predictors()) if (FALSE) { # \\dontrun{ bake(biomass_rec, biomass[, c(\"carbon\", \"HHV\")]) } # }"},{"path":"https://recipes.tidymodels.org/dev/reference/check_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing values ‚Äî check_missing","title":"Check for missing values ‚Äî check_missing","text":"check_missing creates specification recipe operation check variables contain missing values.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing values ‚Äî check_missing","text":"","code":"check_missing(   recipe,   ...,   role = NA,   trained = FALSE,   columns = NULL,   skip = FALSE,   id = rand_id(\"missing\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/check_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing values ‚Äî check_missing","text":"recipe recipe object. check added sequence operations recipe. ... One selector functions choose variables check. See selections() details. role used check since new variables created. trained logical whether selectors ... resolved prep(). columns character string selected variable names. field placeholder populated prep() used. skip logical. check skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique check identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing values ‚Äî check_missing","text":"updated version recipe new check added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_missing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for missing values ‚Äî check_missing","text":"check break bake function checked columns contain NA values. check passes, nothing changed data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_missing.html","id":"tidy-results","dir":"Reference","previous_headings":"","what":"tidy() results","title":"Check for missing values ‚Äî check_missing","text":"tidy() check, tibble column terms (selectors variables selected) returned.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/check_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing values ‚Äî check_missing","text":"","code":"data(credit_data, package = \"modeldata\") is.na(credit_data) %>% colSums() #>    Status Seniority      Home      Time       Age   Marital   Records  #>         0         0         6         0         0         1         0  #>       Job  Expenses    Income    Assets      Debt    Amount     Price  #>         2         0       381        47        18         0         0   # If the test passes, `new_data` is returned unaltered recipe(credit_data) %>%   check_missing(Age, Expenses) %>%   prep() %>%   bake(credit_data) #> # A tibble: 4,454 √ó 14 #>    Status Seniority Home     Time   Age Marital Records Job       Expenses #>    <fct>      <int> <fct>   <int> <int> <fct>   <fct>   <fct>        <int> #>  1 good           9 rent       60    30 married no      freelance       73 #>  2 good          17 rent       60    58 widow   no      fixed           48 #>  3 bad           10 owner      36    46 married yes     freelance       90 #>  4 good           0 rent       60    24 single  no      fixed           63 #>  5 good           0 rent       36    26 single  no      fixed           46 #>  6 good           1 owner      60    36 married no      fixed           75 #>  7 good          29 owner      60    44 married no      fixed           75 #>  8 good           9 parents    12    27 single  no      fixed           35 #>  9 good           0 owner      60    32 married no      freelance       90 #> 10 bad            0 parents    48    41 married no      partime         90 #> # ‚Ñπ 4,444 more rows #> # ‚Ñπ 5 more variables: Income <int>, Assets <int>, Debt <int>, #> #   Amount <int>, Price <int>  # If your training set doesn't pass, prep() will stop with an error if (FALSE) { # \\dontrun{ recipe(credit_data) %>%   check_missing(Income) %>%   prep() } # }  # If `new_data` contain missing values, the check will stop `bake()`  train_data <- credit_data %>% dplyr::filter(Income > 150) test_data <- credit_data %>% dplyr::filter(Income <= 150 | is.na(Income))  rp <- recipe(train_data) %>%   check_missing(Income) %>%   prep()  bake(rp, train_data) #> # A tibble: 1,338 √ó 14 #>    Status Seniority Home   Time   Age Marital Records Job       Expenses #>    <fct>      <int> <fct> <int> <int> <fct>   <fct>   <fct>        <int> #>  1 bad           10 owner    36    46 married yes     freelance       90 #>  2 good           0 rent     60    24 single  no      fixed           63 #>  3 good           1 owner    60    36 married no      fixed           75 #>  4 good           8 owner    60    30 married no      fixed           75 #>  5 good          19 priv     36    37 married no      fixed           75 #>  6 good          15 priv     24    52 single  no      freelance       35 #>  7 good          33 rent     24    68 married no      freelance       65 #>  8 good           5 owner    60    22 single  no      fixed           45 #>  9 good          19 owner    60    43 single  no      fixed           75 #> 10 good          15 owner    36    43 married no      fixed           75 #> # ‚Ñπ 1,328 more rows #> # ‚Ñπ 5 more variables: Income <int>, Assets <int>, Debt <int>, #> #   Amount <int>, Price <int> if (FALSE) { # \\dontrun{ bake(rp, test_data) } # }"},{"path":"https://recipes.tidymodels.org/dev/reference/check_name.html","id":null,"dir":"Reference","previous_headings":"","what":"check that newly created variable names don't overlap ‚Äî check_name","title":"check that newly created variable names don't overlap ‚Äî check_name","text":"check_name used bake function ensure newly created variable names overlap existing names. Throws error check fails.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check that newly created variable names don't overlap ‚Äî check_name","text":"","code":"check_name(   res,   new_data,   object,   newname = NULL,   names = FALSE,   call = caller_env() )"},{"path":"https://recipes.tidymodels.org/dev/reference/check_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check that newly created variable names don't overlap ‚Äî check_name","text":"res data frame tibble newly created variables. new_data data frame tibble passed bake function. object trained object passed bake function. newname string variable names prefix specified trained object. names logical determining names set using names function (TRUE) colnames function (FALSE). call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument rlang::abort() information.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/check_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for required column at bake-time ‚Äî check_new_data","title":"Check for required column at bake-time ‚Äî check_new_data","text":"baking step, create information error message column used step present new_data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for required column at bake-time ‚Äî check_new_data","text":"","code":"check_new_data(req, object, new_data)"},{"path":"https://recipes.tidymodels.org/dev/reference/check_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for required column at bake-time ‚Äî check_new_data","text":"req character vector required columns. object step object. new_data tibble data baked.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for required column at bake-time ‚Äî check_new_data","text":"Invisible NULL. Side effects focus function.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/check_new_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for new values ‚Äî check_new_values","title":"Check for new values ‚Äî check_new_values","text":"check_new_values creates specification recipe operation check variables contain new values.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_new_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for new values ‚Äî check_new_values","text":"","code":"check_new_values(   recipe,   ...,   role = NA,   trained = FALSE,   columns = NULL,   ignore_NA = TRUE,   values = NULL,   skip = FALSE,   id = rand_id(\"new_values\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/check_new_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for new values ‚Äî check_new_values","text":"recipe recipe object. check added sequence operations recipe. ... One selector functions choose variables check. See selections() details. role used check since new variables created. trained logical whether selectors ... resolved prep(). columns character string selected variable names. field placeholder populated prep() used. ignore_NA logical indicates consider missing values value . Defaults TRUE. values named list allowed values. NULL computed prep.recipe(). skip logical. check skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique check identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_new_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for new values ‚Äî check_new_values","text":"updated version recipe new check added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_new_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for new values ‚Äî check_new_values","text":"check break bake function checked columns contain values contain prep called recipe. check passes, nothing changed data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_new_values.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Check for new values ‚Äî check_new_values","text":"tidy() check, tibble columns terms (selectors variables selected) returned.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_new_values.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Check for new values ‚Äî check_new_values","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/check_new_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for new values ‚Äî check_new_values","text":"","code":"data(credit_data, package = \"modeldata\")  # If the test passes, `new_data` is returned unaltered recipe(credit_data) %>%   check_new_values(Home) %>%   prep() %>%   bake(new_data = credit_data) #> # A tibble: 4,454 √ó 14 #>    Status Seniority Home     Time   Age Marital Records Job       Expenses #>    <fct>      <int> <fct>   <int> <int> <fct>   <fct>   <fct>        <int> #>  1 good           9 rent       60    30 married no      freelance       73 #>  2 good          17 rent       60    58 widow   no      fixed           48 #>  3 bad           10 owner      36    46 married yes     freelance       90 #>  4 good           0 rent       60    24 single  no      fixed           63 #>  5 good           0 rent       36    26 single  no      fixed           46 #>  6 good           1 owner      60    36 married no      fixed           75 #>  7 good          29 owner      60    44 married no      fixed           75 #>  8 good           9 parents    12    27 single  no      fixed           35 #>  9 good           0 owner      60    32 married no      freelance       90 #> 10 bad            0 parents    48    41 married no      partime         90 #> # ‚Ñπ 4,444 more rows #> # ‚Ñπ 5 more variables: Income <int>, Assets <int>, Debt <int>, #> #   Amount <int>, Price <int>  # If `new_data` contains values not in `x` at the [prep()] function, # the [bake()] function will break. if (FALSE) { # \\dontrun{ recipe(credit_data %>% dplyr::filter(Home != \"rent\")) %>%   check_new_values(Home) %>%   prep() %>%   bake(new_data = credit_data) } # }  # By default missing values are ignored, so this passes. recipe(credit_data %>% dplyr::filter(!is.na(Home))) %>%   check_new_values(Home) %>%   prep() %>%   bake(credit_data) #> # A tibble: 4,454 √ó 14 #>    Status Seniority Home     Time   Age Marital Records Job       Expenses #>    <fct>      <int> <fct>   <int> <int> <fct>   <fct>   <fct>        <int> #>  1 good           9 rent       60    30 married no      freelance       73 #>  2 good          17 rent       60    58 widow   no      fixed           48 #>  3 bad           10 owner      36    46 married yes     freelance       90 #>  4 good           0 rent       60    24 single  no      fixed           63 #>  5 good           0 rent       36    26 single  no      fixed           46 #>  6 good           1 owner      60    36 married no      fixed           75 #>  7 good          29 owner      60    44 married no      fixed           75 #>  8 good           9 parents    12    27 single  no      fixed           35 #>  9 good           0 owner      60    32 married no      freelance       90 #> 10 bad            0 parents    48    41 married no      partime         90 #> # ‚Ñπ 4,444 more rows #> # ‚Ñπ 5 more variables: Income <int>, Assets <int>, Debt <int>, #> #   Amount <int>, Price <int>  # Use `ignore_NA = FALSE` if you consider missing values  as a value, # that should not occur when not observed in the train set. if (FALSE) { # \\dontrun{ recipe(credit_data %>% dplyr::filter(!is.na(Home))) %>%   check_new_values(Home, ignore_NA = FALSE) %>%   prep() %>%   bake(credit_data) } # }"},{"path":"https://recipes.tidymodels.org/dev/reference/check_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Check range consistency ‚Äî check_range","title":"Check range consistency ‚Äî check_range","text":"check_range creates specification recipe check check range numeric variable changed new data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check range consistency ‚Äî check_range","text":"","code":"check_range(   recipe,   ...,   role = NA,   skip = FALSE,   trained = FALSE,   slack_prop = 0.05,   warn = FALSE,   lower = NULL,   upper = NULL,   id = rand_id(\"range_check_\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/check_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check range consistency ‚Äî check_range","text":"recipe recipe object. check added sequence operations recipe. ... One selector functions choose variables check. See selections() details. role used check since new variables created. skip logical. check skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. trained logical whether selectors ... resolved prep(). slack_prop allowed slack proportion range variable train set. warn TRUE check throw warning instead error failing. lower named numeric vector minimum values train set. NULL computed prep(). upper named numeric vector maximum values train set. NULL computed prep(). id character string unique check identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check range consistency ‚Äî check_range","text":"updated version recipe new check added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_range.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check range consistency ‚Äî check_range","text":"amount slack allowed determined slack_prop. numeric length one two. length one, proportion used ends train set range. length two, first value used compute allowed slack lower end, second compute allowed slack upper end.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_range.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Check range consistency ‚Äî check_range","text":"tidy() check, tibble columns terms (selectors variables selected) value (means) returned.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/check_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check range consistency ‚Äî check_range","text":"","code":"slack_df <- data_frame(x = 0:100) #> Warning: `data_frame()` was deprecated in tibble 1.1.0. #> ‚Ñπ Please use `tibble()` instead. slack_new_data <- data_frame(x = -10:110)  # this will fail the check both ends if (FALSE) { # \\dontrun{ recipe(slack_df) %>%   check_range(x) %>%   prep() %>%   bake(slack_new_data) } # }  # this will fail the check only at the upper end if (FALSE) { # \\dontrun{ recipe(slack_df) %>%   check_range(x, slack_prop = c(0.1, 0.05)) %>%   prep() %>%   bake(slack_new_data) } # }  # give a warning instead of an error if (FALSE) { # \\dontrun{ recipe(slack_df) %>%   check_range(x, warn = TRUE) %>%   prep() %>%   bake(slack_new_data) } # }"},{"path":"https://recipes.tidymodels.org/dev/reference/check_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantitatively check on variables ‚Äî check_type","title":"Quantitatively check on variables ‚Äî check_type","text":"internal function used prep function ensure type variables matches expectation. Throws error check fails.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantitatively check on variables ‚Äî check_type","text":"","code":"check_type(dat, quant = TRUE, types = NULL, call = caller_env())"},{"path":"https://recipes.tidymodels.org/dev/reference/check_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantitatively check on variables ‚Äî check_type","text":"dat data frame tibble training data. quant logical indicating whether data expected numeric (TRUE) factor/character (FALSE). ignored types specified. types Character vector allowed types. Following types has_role(). See details .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/check_type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantitatively check on variables ‚Äî check_type","text":"Using types fine-tuned way use . function compared using quant. types specify allowed types designated .get_data_types. Suppose want allow doubles, integers, characters, factors ordered factors, specify types = c(\"double\", \"integer\", \"string\", \"factor\", \"ordered\") get clear error message.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/detect_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect if a particular step or check is used in a recipe ‚Äî detect_step","title":"Detect if a particular step or check is used in a recipe ‚Äî detect_step","text":"Detect particular step check used recipe","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/detect_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect if a particular step or check is used in a recipe ‚Äî detect_step","text":"","code":"detect_step(recipe, name)"},{"path":"https://recipes.tidymodels.org/dev/reference/detect_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect if a particular step or check is used in a recipe ‚Äî detect_step","text":"recipe recipe check. name Character name step check, omitted prefix. , check step_intercept present, use name = intercept.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/detect_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect if a particular step or check is used in a recipe ‚Äî detect_step","text":"Logical indicating recipes contains given step.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/detect_step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect if a particular step or check is used in a recipe ‚Äî detect_step","text":"","code":"rec <- recipe(Species ~ ., data = iris) %>%   step_intercept()  detect_step(rec, \"intercept\") #> [1] TRUE"},{"path":"https://recipes.tidymodels.org/dev/reference/developer_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Developer functions for creating recipes steps ‚Äî developer_functions","title":"Developer functions for creating recipes steps ‚Äî developer_functions","text":"page provides comprehensive list exported functions creating recipes steps guidance use .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/developer_functions.html","id":"creating-steps","dir":"Reference","previous_headings":"","what":"Creating steps","title":"Developer functions for creating recipes steps ‚Äî developer_functions","text":"add_step() add_check() required creating new step. output add_step() return value steps following format:   rand_id() used arguments step_example() specify argument, see example. recipes_pkg_check() used step_example() functions together required_pkgs() alert users certain packages required. standard way using function following format:   step() check() used within step_*_new() function use new step. used following way:   recipes_eval_select() used within prep.step_*() functions, used turn terms object character vector selected variables. likely used like :   check_type() can used within prep.step_*() functions check variables passed right types. recommend use types argument offers higher flexibility matches types defined .get_data_types(). using types find better explicit, e.g. writing types = c(\"double\", \"integer\") instead types = \"numeric\", produces cleaner error messages. used like :   check_new_data() used within bake.step_*(). function used make check required columns present data. one first lines inside function. used like :   check_name() used bake.step_*() functions steps add new columns data set. function throws error column names already exist data set. called adding new columns data set. get_keep_original_cols() remove_original_cols() used within steps keep_original_cols argument. get_keep_original_cols() used prep.step_*() functions steps created keep_original_cols argument added, acts way throw warning user regenerate recipe. remove_original_cols() used bake.step_*() functions remove original columns. worth noting remove_original_cols() can remove multiple columns possible put outside loops.   recipes_remove_cols() used prep.step_*() functions, used remove columns data set, either using object$removals field using col_names argument. recipes_names_predictors() recipes_names_outcomes() used prep.step_*() functions, used get names predictors outcomes. get_case_weights() are_weights_used() functions help extract case weights help determine used within step. typically used within prep.step_*() functions step question supports case weights. print_step() used inside print.step_*() functions. function replacing internally deprecated printer() function. sel2char() mostly used within tidy.step_*() functions turn selections character vectors. names0() creates series num names common prefix. names numbered leading zeros (e.g. prefix01-prefix10 instead prefix1-prefix10). useful many types steps produce new columns.","code":"step_example <- function(recipe,                          ...,                          role = NA,                          trained = FALSE,                          skip = FALSE,                          id = rand_id(\"example\")) {   add_step(     recipe,     step_example_new(       terms = enquos(...),       role = role,       trained = trained,       skip = skip,       id = id     )   ) } recipes_pkg_check(required_pkgs.step_example()) step_example_new <- function(terms, role, trained, skip, id) {   step(     subclass = \"example\",     terms = terms,     role = role,     trained = trained,     skip = skip,     id = id   ) } col_names <- recipes_eval_select(x$terms, training, info) check_type(training[, col_names], types = c(\"double\", \"integer\")) check_new_data(names(object$columns), object, new_data) new_data <- remove_original_cols(new_data, object, names_of_original_cols)"},{"path":"https://recipes.tidymodels.org/dev/reference/developer_functions.html","id":"interacting-with-recipe-objects","dir":"Reference","previous_headings":"","what":"Interacting with recipe objects","title":"Developer functions for creating recipes steps ‚Äî developer_functions","text":"recipes_ptype() returns ptype, expected variables types, recipe object expects prep() bake() time. Controlled using stage argument. Can used functions interact recipes verify data correct passing prep() bake(). recipes_ptype_validate() checks recipe data compatible using information extracted using recipes_ptype(). Can used functions interact recipes verify data correct passing prep() bake(). detect_step() returns logical indicator determine given step check included recipe. fully_trained() returns logical indicator recipe fully trained. function is_trained() can used check individual steps trained . .get_data_types() S3 method used selections. method can extended work column types supported recipes. recipes_extension_check() recommended used package authors make sure steps prep.step_*(), bake.step_*(), print.step_*(), tidy.step_*(), required_pkgs.step_*() methods. used test, preferably like :","code":"test_that(\"recipes_extension_check\", {   expect_snapshot(     recipes::recipes_extension_check(       pkg = \"pkgname\"     )   ) })"},{"path":"https://recipes.tidymodels.org/dev/reference/discretize.html","id":null,"dir":"Reference","previous_headings":"","what":"Discretize Numeric Variables ‚Äî discretize","title":"Discretize Numeric Variables ‚Äî discretize","text":"discretize() converts numeric vector factor bins approximately number data points (based training set).","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/discretize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discretize Numeric Variables ‚Äî discretize","text":"","code":"discretize(x, ...)  # Default S3 method discretize(x, ...)  # S3 method for class 'numeric' discretize(   x,   cuts = 4,   labels = NULL,   prefix = \"bin\",   keep_na = TRUE,   infs = TRUE,   min_unique = 10,   ... )  # S3 method for class 'discretize' predict(object, new_data, ...)"},{"path":"https://recipes.tidymodels.org/dev/reference/discretize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discretize Numeric Variables ‚Äî discretize","text":"x numeric vector ... Options pass stats::quantile() include x probs. cuts integer defining many cuts make data. labels character vector defining factor levels new factor (smallest largest). length cuts+1 include level missing (see keep_na ). prefix single parameter value used prefix factor levels (e.g. bin1, bin2, ...). string valid R name, coerced one. prefix = NULL factor levels labelled according output cut(). keep_na logical whether factor level created identify missing values x. keep_na set TRUE na.rm = TRUE used calling stats::quantile(). infs logical indicating whether smallest largest cut point infinite. min_unique integer defining sample size line dignity binning. (number unique values)/(cuts+1) less min_unique, discretization takes place. object object class discretize. new_data new numeric object binned.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/discretize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discretize Numeric Variables ‚Äî discretize","text":"discretize returns object class discretize predict.discretize returns factor vector.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/discretize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Discretize Numeric Variables ‚Äî discretize","text":"discretize estimates cut points x using percentiles. example, cuts = 3, function estimates quartiles x uses cut points. cuts = 2, bins defined median x. predict method can used turn numeric vectors factor vectors. keep_na = TRUE, suffix \"_missing\" used factor level (see examples ). infs = FALSE new value greater largest value x, missing value result.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/discretize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discretize Numeric Variables ‚Äî discretize","text":"","code":"data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  median(biomass_tr$carbon) #> [1] 47.1 discretize(biomass_tr$carbon, cuts = 2) #> Bins: 3 (includes missing category) #> Breaks: -Inf, 47.1, Inf discretize(biomass_tr$carbon, cuts = 2, infs = FALSE) #> Bins: 3 (includes missing category) #> Breaks: 14.61, 47.1, 97.18 discretize(biomass_tr$carbon, cuts = 2, infs = FALSE, keep_na = FALSE) #> Bins: 2 #> Breaks: 14.61, 47.1, 97.18 discretize(biomass_tr$carbon, cuts = 2, prefix = \"maybe a bad idea to bin\") #> Warning: The prefix \"maybe a bad idea to bin\" is not a valid R name. It has been #> changed to \"maybe.a.bad.idea.to.bin\". #> Bins: 3 (includes missing category) #> Breaks: -Inf, 47.1, Inf  carbon_binned <- discretize(biomass_tr$carbon) table(predict(carbon_binned, biomass_tr$carbon)) #>  #> bin1 bin2 bin3 bin4  #>  114  115  113  114   carbon_no_infs <- discretize(biomass_tr$carbon, infs = FALSE) predict(carbon_no_infs, c(50, 100)) #> [1] bin4 <NA> #> Levels: bin1 bin2 bin3 bin4"},{"path":"https://recipes.tidymodels.org/dev/reference/fixed.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Functions for Profile Data Sets ‚Äî fixed","title":"Helper Functions for Profile Data Sets ‚Äî fixed","text":"Helper Functions Profile Data Sets","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/fixed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Functions for Profile Data Sets ‚Äî fixed","text":"","code":"fixed(x, pct, index, ...)  # Default S3 method fixed(x, pct, index, ...)  # S3 method for class 'numeric' fixed(x, pct, index, ...)  # S3 method for class 'factor' fixed(x, pct, index, ...)  # S3 method for class 'character' fixed(x, pct, index, ...)  # S3 method for class 'Date' fixed(x, pct, index, ...)  # S3 method for class 'POSIXct' fixed(x, pct, index, ...)  prof(x, grid, ...)  # S3 method for class 'numeric' prof(x, grid, ...)  # S3 method for class 'factor' prof(x, grid, ...)  # S3 method for class 'character' prof(x, grid, ...)  # S3 method for class 'Date' prof(x, grid, ...)  # S3 method for class 'POSIXct' prof(x, grid, ...)"},{"path":"https://recipes.tidymodels.org/dev/reference/fixed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Functions for Profile Data Sets ‚Äî fixed","text":"x vector pct, index, ..., grid Options pass step_profile()","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/format_ch_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Helpers for printing step functions ‚Äî format_ch_vec","title":"Helpers for printing step functions ‚Äî format_ch_vec","text":"Helpers printing step functions","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/format_ch_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helpers for printing step functions ‚Äî format_ch_vec","text":"","code":"format_ch_vec(x, sep = \", \", width = options()$width - 9)  format_selectors(x, width = options()$width - 9)"},{"path":"https://recipes.tidymodels.org/dev/reference/format_ch_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helpers for printing step functions ‚Äî format_ch_vec","text":"x vector objects. sep character string separating values. width integer split output lines.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/format_ch_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helpers for printing step functions ‚Äî format_ch_vec","text":"character string","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/formula.recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a formula from a prepared recipe ‚Äî formula.recipe","title":"Create a formula from a prepared recipe ‚Äî formula.recipe","text":"case model formula required, formula method can used recipe show predictors outcome(s) used.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/formula.recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a formula from a prepared recipe ‚Äî formula.recipe","text":"","code":"# S3 method for class 'recipe' formula(x, ...)"},{"path":"https://recipes.tidymodels.org/dev/reference/formula.recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a formula from a prepared recipe ‚Äî formula.recipe","text":"x recipe object prepared. ... Note currently used.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/formula.recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a formula from a prepared recipe ‚Äî formula.recipe","text":"formula.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/formula.recipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a formula from a prepared recipe ‚Äî formula.recipe","text":"","code":"formula(recipe(Species + Sepal.Length ~ ., data = iris) %>% prep()) #> Species + Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width #> <environment: 0x55d9160ecde0>  iris_rec <- recipe(Species ~ ., data = iris) %>%   step_center(all_numeric()) %>%   prep() formula(iris_rec) #> Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width #> <environment: 0x55d91f042220>"},{"path":"https://recipes.tidymodels.org/dev/reference/fully_trained.html","id":null,"dir":"Reference","previous_headings":"","what":"Check to see if a recipe is trained/prepared ‚Äî fully_trained","title":"Check to see if a recipe is trained/prepared ‚Äî fully_trained","text":"Check see recipe trained/prepared","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/fully_trained.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check to see if a recipe is trained/prepared ‚Äî fully_trained","text":"","code":"fully_trained(x)"},{"path":"https://recipes.tidymodels.org/dev/reference/fully_trained.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check to see if a recipe is trained/prepared ‚Äî fully_trained","text":"x recipe","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/fully_trained.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check to see if a recipe is trained/prepared ‚Äî fully_trained","text":"logical true recipe steps run prep. steps added recipe, TRUE returned recipe prepped.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/fully_trained.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check to see if a recipe is trained/prepared ‚Äî fully_trained","text":"","code":"rec <- recipe(Species ~ ., data = iris) %>%   step_center(all_numeric())  rec %>% fully_trained() #> [1] FALSE   rec %>%   prep(training = iris) %>%   fully_trained() #> [1] TRUE"},{"path":"https://recipes.tidymodels.org/dev/reference/get_data_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get types for use in recipes ‚Äî .get_data_types","title":"Get types for use in recipes ‚Äî .get_data_types","text":".get_data_types() generic used internally supply types columns used recipes. functions underlie work user sees selections.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/get_data_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get types for use in recipes ‚Äî .get_data_types","text":"","code":".get_data_types(x)  # Default S3 method .get_data_types(x)  # S3 method for class 'character' .get_data_types(x)  # S3 method for class 'ordered' .get_data_types(x)  # S3 method for class 'factor' .get_data_types(x)  # S3 method for class 'integer' .get_data_types(x)  # S3 method for class 'numeric' .get_data_types(x)  # S3 method for class 'double' .get_data_types(x)  # S3 method for class 'Surv' .get_data_types(x)  # S3 method for class 'logical' .get_data_types(x)  # S3 method for class 'Date' .get_data_types(x)  # S3 method for class 'POSIXct' .get_data_types(x)  # S3 method for class 'list' .get_data_types(x)  # S3 method for class 'textrecipes_tokenlist' .get_data_types(x)  # S3 method for class 'hardhat_case_weights' .get_data_types(x)"},{"path":"https://recipes.tidymodels.org/dev/reference/get_data_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get types for use in recipes ‚Äî .get_data_types","text":"x object","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/get_data_types.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get types for use in recipes ‚Äî .get_data_types","text":"function acts extended recipes-specific version class(). ignoring differences similar types (\"double\" \"numeric\") allowing element multiple types (\"factor\" returns \"factor\", \"unordered\", \"nominal\", \"character\" returns \"string\", \"unordered\", \"nominal\") able create natural selectors all_nominal(), all_string() all_integer(). following list shows data types different classes, defined recipes. object class supported .get_data_types(), get data type \"\". character: string, unordered, nominal ordered: ordered, nominal factor: factor, unordered, nominal integer: integer, numeric numeric: double, numeric double: double, numeric Surv: surv logical: logical Date: date POSIXct: datetime list: list textrecipes_tokenlist: tokenlist hardhat_case_weights: case_weights","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/get_data_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get types for use in recipes ‚Äî .get_data_types","text":"","code":"data(Sacramento, package = \"modeldata\") lapply(Sacramento, .get_data_types) #> $city #> [1] \"factor\"    \"unordered\" \"nominal\"   #>  #> $zip #> [1] \"factor\"    \"unordered\" \"nominal\"   #>  #> $beds #> [1] \"integer\" \"numeric\" #>  #> $baths #> [1] \"double\"  \"numeric\" #>  #> $sqft #> [1] \"integer\" \"numeric\" #>  #> $type #> [1] \"factor\"    \"unordered\" \"nominal\"   #>  #> $price #> [1] \"integer\" \"numeric\" #>  #> $latitude #> [1] \"double\"  \"numeric\" #>  #> $longitude #> [1] \"double\"  \"numeric\" #>"},{"path":"https://recipes.tidymodels.org/dev/reference/get_keep_original_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the keep_original_cols value of a recipe step ‚Äî get_keep_original_cols","title":"Get the keep_original_cols value of a recipe step ‚Äî get_keep_original_cols","text":"Get keep_original_cols value recipe step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/get_keep_original_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the keep_original_cols value of a recipe step ‚Äî get_keep_original_cols","text":"","code":"get_keep_original_cols(object)"},{"path":"https://recipes.tidymodels.org/dev/reference/get_keep_original_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the keep_original_cols value of a recipe step ‚Äî get_keep_original_cols","text":"object recipe step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/get_keep_original_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the keep_original_cols value of a recipe step ‚Äî get_keep_original_cols","text":"logical keep original variables output","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/has_role.html","id":null,"dir":"Reference","previous_headings":"","what":"Role Selection ‚Äî has_role","title":"Role Selection ‚Äî has_role","text":"has_role(), all_predictors(), all_outcomes() can used select variables formula certain roles. cases, right approach users use use predictor-specific selectors all_numeric_predictors() all_nominal_predictors(). general careful using -all_outcomes() *_predictors() selector want. Similarly, has_type(), all_numeric(), all_integer(), all_double(), all_nominal(), all_ordered(), all_unordered(), all_factor(), all_string(), all_date() all_datetime() used select columns based data type. all_factor() captures ordered unordered factors, all_string() captures characters, all_unordered() captures unordered factors characters, all_ordered() captures ordered factors, all_nominal() captures characters, unordered ordered factors. all_integer() captures integers, all_double() captures doubles, all_numeric() captures kinds numeric. all_date() captures Date() variables, all_datetime() captures POSIXct() variables. See selections details. current_info() internal function. functions limited utility outside column selection step functions.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/has_role.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Role Selection ‚Äî has_role","text":"","code":"has_role(match = \"predictor\")  has_type(match = \"numeric\")  all_outcomes()  all_predictors()  all_date()  all_date_predictors()  all_datetime()  all_datetime_predictors()  all_double()  all_double_predictors()  all_factor()  all_factor_predictors()  all_integer()  all_integer_predictors()  all_logical()  all_logical_predictors()  all_nominal()  all_nominal_predictors()  all_numeric()  all_numeric_predictors()  all_ordered()  all_ordered_predictors()  all_string()  all_string_predictors()  all_unordered()  all_unordered_predictors()  current_info()"},{"path":"https://recipes.tidymodels.org/dev/reference/has_role.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Role Selection ‚Äî has_role","text":"match single character string query. Exact matching used (.e. regular expressions work).","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/has_role.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Role Selection ‚Äî has_role","text":"Selector functions return integer vector. current_info() returns environment objects vars data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/has_role.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Role Selection ‚Äî has_role","text":"","code":"data(biomass, package = \"modeldata\")  rec <- recipe(biomass) %>%   update_role(     carbon, hydrogen, oxygen, nitrogen, sulfur,     new_role = \"predictor\"   ) %>%   update_role(HHV, new_role = \"outcome\") %>%   update_role(sample, new_role = \"id variable\") %>%   update_role(dataset, new_role = \"splitting indicator\")  recipe_info <- summary(rec) recipe_info #> # A tibble: 8 √ó 4 #>   variable type      role                source   #>   <chr>    <list>    <chr>               <chr>    #> 1 sample   <chr [3]> id variable         original #> 2 dataset  <chr [3]> splitting indicator original #> 3 carbon   <chr [2]> predictor           original #> 4 hydrogen <chr [2]> predictor           original #> 5 oxygen   <chr [2]> predictor           original #> 6 nitrogen <chr [2]> predictor           original #> 7 sulfur   <chr [2]> predictor           original #> 8 HHV      <chr [2]> outcome             original  # Centering on all predictors except carbon rec %>%   step_center(all_predictors(), -carbon) %>%   prep(training = biomass) %>%   bake(new_data = NULL) #> # A tibble: 536 √ó 8 #>    sample            dataset carbon hydrogen oxygen nitrogen  sulfur   HHV #>    <fct>             <fct>    <dbl>    <dbl>  <dbl>    <dbl>   <dbl> <dbl> #>  1 Akhrot Shell      Traini‚Ä¶   49.8   0.181   4.37   -0.667  -0.234   20.0 #>  2 Alabama Oak Wood‚Ä¶ Traini‚Ä¶   49.5   0.241   2.73   -0.877  -0.234   19.2 #>  3 Alder             Traini‚Ä¶   47.8   0.341   7.68   -0.967  -0.214   18.3 #>  4 Alfalfa           Traini‚Ä¶   45.1  -0.489  -2.97    2.22   -0.0736  18.2 #>  5 Alfalfa Seed Str‚Ä¶ Traini‚Ä¶   46.8  -0.0586  2.15   -0.0772 -0.214   18.4 #>  6 Alfalfa Stalks    Traini‚Ä¶   45.4   0.291   1.63    0.963  -0.134   18.5 #>  7 Alfalfa Stems     Traini‚Ä¶   47.2   0.531  -0.383   1.60   -0.0336  18.7 #>  8 Alfalfa Straw     Traini‚Ä¶   45.7   0.241   1.13    0.623  -0.0336  18.3 #>  9 Almond            Traini‚Ä¶   48.8   0.0414  2.33   -0.277  -0.234   18.6 #> 10 Almond Hull       Traini‚Ä¶   47.1   0.441   1.43    0.123  -0.134   18.9 #> # ‚Ñπ 526 more rows"},{"path":"https://recipes.tidymodels.org/dev/reference/juice.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract transformed training set ‚Äî juice","title":"Extract transformed training set ‚Äî juice","text":"recipes version 0.1.14, juice() superseded favor bake(object, new_data = NULL). steps estimated prep, operations applied training set. Rather running bake() duplicate processing, function return variables processed training set.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/juice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract transformed training set ‚Äî juice","text":"","code":"juice(object, ..., composition = \"tibble\")"},{"path":"https://recipes.tidymodels.org/dev/reference/juice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract transformed training set ‚Äî juice","text":"object recipe object prepared option retain = TRUE. ... One selector functions choose variables returned function. See selections() details. selectors given, default use dplyr::everything(). composition Either \"tibble\", \"matrix\", \"data.frame\", \"dgCMatrix\" format processed data set. Note computations baking process done non-sparse format. Also, note argument called selectors selectors resolve numeric columns (otherwise error thrown).","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/juice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract transformed training set ‚Äî juice","text":"juice() return results recipe steps applied data, irrespective value step's skip argument. juice() can used recipe prepped retain = TRUE. equivalent bake(object, new_data = NULL) preferred way extract transformation training data set.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/names0.html","id":null,"dir":"Reference","previous_headings":"","what":"Naming Tools ‚Äî names0","title":"Naming Tools ‚Äî names0","text":"names0 creates series num names common prefix. names numbered leading zeros (e.g. prefix01-prefix10 instead prefix1-prefix10). dummy_names can used renaming unordered ordered dummy variables (step_dummy()).","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/names0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Naming Tools ‚Äî names0","text":"","code":"names0(num, prefix = \"x\")  dummy_names(var, lvl, ordinal = FALSE, sep = \"_\")  dummy_extract_names(var, lvl, ordinal = FALSE, sep = \"_\")"},{"path":"https://recipes.tidymodels.org/dev/reference/names0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Naming Tools ‚Äî names0","text":"num single integer many elements created. prefix character string start name. var single string original factor name. lvl character vectors factor levels (order). used step_dummy(), lvl suffixes result model.matrix called (see example ). ordinal logical; original factor ordered? sep single character value separator names levels.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/names0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Naming Tools ‚Äî names0","text":"names0 returns character string length num dummy_names generates character vector length lvl.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/names0.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Naming Tools ‚Äî names0","text":"using dummy_names(), factor levels valid variable names (e.g. \"text  spaces\") changed valid names base::make.names(); see example . function also change names ordinal dummy variables. Instead values \".L\", \".Q\", \"^4\", ordinal dummy variables given simple integer suffixes \"_1\", \"_2\", etc.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/names0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Naming Tools ‚Äî names0","text":"","code":"names0(9, \"a\") #> [1] \"a1\" \"a2\" \"a3\" \"a4\" \"a5\" \"a6\" \"a7\" \"a8\" \"a9\" names0(10, \"a\") #>  [1] \"a01\" \"a02\" \"a03\" \"a04\" \"a05\" \"a06\" \"a07\" \"a08\" \"a09\" \"a10\"  example <- data.frame(   x = ordered(letters[1:5]),   y = factor(LETTERS[1:5]),   z = factor(paste(LETTERS[1:5], 1:5)) )  dummy_names(\"y\", levels(example$y)[-1]) #> [1] \"y_B\" \"y_C\" \"y_D\" \"y_E\" dummy_names(\"z\", levels(example$z)[-1]) #> [1] \"z_B.2\" \"z_C.3\" \"z_D.4\" \"z_E.5\"  after_mm <- colnames(model.matrix(~x, data = example))[-1] after_mm #> [1] \"x.L\" \"x.Q\" \"x.C\" \"x^4\" levels(example$x) #> [1] \"a\" \"b\" \"c\" \"d\" \"e\"  dummy_names(\"x\", substring(after_mm, 2), ordinal = TRUE) #> [1] \"x_1\" \"x_2\" \"x_3\" \"x_4\""},{"path":"https://recipes.tidymodels.org/dev/reference/prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a preprocessing recipe ‚Äî prep","title":"Estimate a preprocessing recipe ‚Äî prep","text":"recipe least one preprocessing operation, estimate required parameters training set can later applied data sets.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a preprocessing recipe ‚Äî prep","text":"","code":"prep(x, ...)  # S3 method for class 'recipe' prep(   x,   training = NULL,   fresh = FALSE,   verbose = FALSE,   retain = TRUE,   log_changes = FALSE,   strings_as_factors = TRUE,   ... )"},{"path":"https://recipes.tidymodels.org/dev/reference/prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a preprocessing recipe ‚Äî prep","text":"x object ... arguments passed methods (currently used). training data frame tibble used estimate parameters preprocessing. fresh logical indicating whether already trained operation re-trained. TRUE, pass data set argument training. verbose logical controls whether progress reported operations executed. retain logical: preprocessed training set saved template slot recipe training? good idea want add steps later want avoid re-training existing steps. Also, advisable use retain = TRUE steps use option skip = FALSE. Note can make final recipe size large. verbose = TRUE, message written approximate object size memory may underestimate since take environments account. log_changes logical printing summary step regarding () columns added removed training. strings_as_factors logical: character columns converted factors? affects preprocessed training set (retain = TRUE) well results bake.recipe.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a preprocessing recipe ‚Äî prep","text":"recipe whose step objects updated required quantities (e.g. parameter estimates, model objects, etc). Also, term_info object likely modified operations executed.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/prep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate a preprocessing recipe ‚Äî prep","text":"Given data set, function estimates required quantities statistics needed operations. prep() returns updated recipe estimates. using recipe preprocessor modeling, highly recommend use workflow() instead manually estimating recipe (see example recipe()). Note missing data handled steps; global na.rm option recipe level prep(). Also, recipe trained using prep() steps added, prep() update new operations. fresh = TRUE, operations (re)estimated. steps executed, training set updated. example, first step center data second scale data, step scaling given centered data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/prep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a preprocessing recipe ‚Äî prep","text":"","code":"data(ames, package = \"modeldata\")  library(dplyr)  ames <- mutate(ames, Sale_Price = log10(Sale_Price))  ames_rec <-   recipe(     Sale_Price ~ Longitude + Latitude + Neighborhood + Year_Built + Central_Air,     data = ames   ) %>%   step_other(Neighborhood, threshold = 0.05) %>%   step_dummy(all_nominal()) %>%   step_interact(~ starts_with(\"Central_Air\"):Year_Built) %>%   step_ns(Longitude, Latitude, deg_free = 5)  prep(ames_rec, verbose = TRUE) #> oper 1 step other [training]  #> oper 2 step dummy [training]  #> oper 3 step interact [training]  #> oper 4 step ns [training]  #> The retained training set is ~ 0.48 Mb  in memory. #>  #>  #> ‚îÄ‚îÄ Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 5 #>  #> ‚îÄ‚îÄ Training information  #> Training data contained 2930 data points and no incomplete rows. #>  #> ‚îÄ‚îÄ Operations  #> ‚Ä¢ Collapsing factor levels for: Neighborhood | Trained #> ‚Ä¢ Dummy variables from: Neighborhood and Central_Air | Trained #> ‚Ä¢ Interactions with: Central_Air_Y:Year_Built | Trained #> ‚Ä¢ Natural splines on: Longitude and Latitude | Trained  prep(ames_rec, log_changes = TRUE) #> step_other (other_JgwxH): same number of columns #>  #> step_dummy (dummy_Fe2kG):  #>  new (9): Neighborhood_College_Creek, Neighborhood_Old_Town, ... #>  removed (2): Neighborhood, Central_Air #>  #> step_interact (interact_LGGmr):  #>  new (1): Central_Air_Y_x_Year_Built #>  #> step_ns (ns_lWKqm):  #>  new (10): Longitude_ns_1, Longitude_ns_2, Longitude_ns_3, ... #>  removed (2): Longitude, Latitude #>  #>  #> ‚îÄ‚îÄ Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 5 #>  #> ‚îÄ‚îÄ Training information  #> Training data contained 2930 data points and no incomplete rows. #>  #> ‚îÄ‚îÄ Operations  #> ‚Ä¢ Collapsing factor levels for: Neighborhood | Trained #> ‚Ä¢ Dummy variables from: Neighborhood and Central_Air | Trained #> ‚Ä¢ Interactions with: Central_Air_Y:Year_Built | Trained #> ‚Ä¢ Natural splines on: Longitude and Latitude | Trained"},{"path":"https://recipes.tidymodels.org/dev/reference/prepper.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function for preparing recipes within resampling ‚Äî prepper","title":"Wrapper function for preparing recipes within resampling ‚Äî prepper","text":"working rsample package, simple recipe must prepared using prep function first. using recipes rsample helpful function can prepare recipe across series split objects produced package. prepper wrapper function around prep can used . See vignette \"Recipes rsample\" example.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/prepper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function for preparing recipes within resampling ‚Äî prepper","text":"","code":"prepper(split_obj, recipe, ...)"},{"path":"https://recipes.tidymodels.org/dev/reference/prepper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function for preparing recipes within resampling ‚Äî prepper","text":"split_obj rplit object recipe untrained recipe object. ... Arguments pass prep verbose retain.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/prepper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrapper function for preparing recipes within resampling ‚Äî prepper","text":"prepper() sets underlying prep() argument fresh TRUE.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/print.recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a Recipe ‚Äî print.recipe","title":"Print a Recipe ‚Äî print.recipe","text":"Print Recipe","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/print.recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a Recipe ‚Äî print.recipe","text":"","code":"# S3 method for class 'recipe' print(x, form_width = 30, ...)"},{"path":"https://recipes.tidymodels.org/dev/reference/print.recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a Recipe ‚Äî print.recipe","text":"x recipe object form_width number characters used print variables terms formula ... arguments passed methods (currently used).","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/print.recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a Recipe ‚Äî print.recipe","text":"original object (invisibly)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/rand_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a random identification field for steps ‚Äî rand_id","title":"Make a random identification field for steps ‚Äî rand_id","text":"Make random identification field steps","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/rand_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a random identification field for steps ‚Äî rand_id","text":"","code":"rand_id(prefix = \"step\", len = 5)"},{"path":"https://recipes.tidymodels.org/dev/reference/rand_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a random identification field for steps ‚Äî rand_id","text":"prefix single character string len integer number random characters","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/rand_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a random identification field for steps ‚Äî rand_id","text":"character string prefix random letters separated underscore.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing data ‚Äî recipe","title":"Create a recipe for preprocessing data ‚Äî recipe","text":"recipe description steps applied data set order prepare data analysis.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing data ‚Äî recipe","text":"","code":"recipe(x, ...)  # Default S3 method recipe(x, ...)  # S3 method for class 'data.frame' recipe(x, formula = NULL, ..., vars = NULL, roles = NULL)  # S3 method for class 'formula' recipe(formula, data, ...)  # S3 method for class 'matrix' recipe(x, ...)"},{"path":"https://recipes.tidymodels.org/dev/reference/recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing data ‚Äî recipe","text":"x, data data frame tibble template data set (see ). ... arguments passed methods (currently used). formula model formula. -line functions used (e.g. log(x), x:y, etc.) minus signs allowed. types transformations enacted using step functions package. Dots allowed simple multivariate outcome terms (.e. need cbind; see Examples). model formula may best choice high-dimensional data many columns, problems memory. vars character string column names corresponding variables used context (see ) roles character string (length vars) describes single role variable take. value anything common roles \"outcome\", \"predictor\", \"case_weight\", \"ID\"","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing data ‚Äî recipe","text":"object class recipe sub-objects: var_info tibble containing information original data set columns term_info tibble contains current set terms data set. initially defaults data contained var_info. steps list step  check objects define sequence preprocessing operations applied data. default value NULL template tibble data. initialized data given data argument can different recipe trained.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/recipe.html","id":"defining-recipes","dir":"Reference","previous_headings":"","what":"Defining recipes","title":"Create a recipe for preprocessing data ‚Äî recipe","text":"Variables recipes can type role, including outcome, predictor, observation ID, case weights, stratification variables, etc. recipe objects can created several ways. analysis contains outcomes predictors, simplest way create one use formula (e.g.¬†y ~ x1 + x2) contain inline functions log(x3) (see first example ). Alternatively, recipe object can created first specifying variables data set used sequentially defining roles (see last example). alternative excellent choice number variables high, formula method memory-inefficient many variables. two different types operations can sequentially added recipe. Steps can include operations like scaling variable, creating dummy variables interactions, . computationally complex actions dimension reduction imputation can also specified. Checks operations conduct specific tests data. test satisfied, data returned without issue modification. Otherwise, error thrown. defined recipe want see steps included, use tidy() method recipe object. Note data passed recipe() need complete data used train steps (prep()). recipe needs know names types data used. large data sets, head() used pass smaller data set save time memory.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipe.html","id":"using-recipes","dir":"Reference","previous_headings":"","what":"Using recipes","title":"Create a recipe for preprocessing data ‚Äî recipe","text":"recipe defined, needs estimated applied data. recipe steps specific quantities must calculated estimated. example, step_normalize() needs compute training set‚Äôs mean selected columns, step_dummy() needs determine factor levels selected columns order make appropriate indicator columns. two common application recipes modeling stand-alone preprocessing. recipe estimated depends used.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipe.html","id":"modeling","dir":"Reference","previous_headings":"","what":"Modeling","title":"Create a recipe for preprocessing data ‚Äî recipe","text":"best way use use recipe modeling via workflows package. bundles model preprocessor (e.g.¬†recipe) together gives user fluent way train model/recipe make predictions.     can create parsnip model, build workflow model recipe:     estimate preprocessing steps fit linear model, single call fit() used:   predicting, need anything call predict(). preprocesses new data manner training set, gives data linear model prediction code:","code":"library(dplyr) library(workflows) library(recipes) library(parsnip)  data(biomass, package = \"modeldata\")  # split data biomass_tr <- biomass %>% filter(dataset == \"Training\") biomass_te <- biomass %>% filter(dataset == \"Testing\")  # With only predictors and outcomes, use a formula: rec <- recipe(HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,               data = biomass_tr)  # Now add preprocessing steps to the recipe: sp_signed <-   rec %>%   step_normalize(all_numeric_predictors()) %>%   step_spatialsign(all_numeric_predictors()) sp_signed ##  ## -- Recipe ------------------------------------------------------------  ##  ## -- Inputs  ## Number of variables by role  ## outcome:   1 ## predictor: 5  ##  ## -- Operations  ## * Centering and scaling for: all_numeric_predictors()  ## * Spatial sign on: all_numeric_predictors() linear_mod <- linear_reg()  linear_sp_sign_wflow <-   workflow() %>%   add_model(linear_mod) %>%   add_recipe(sp_signed)  linear_sp_sign_wflow ## == Workflow ========================================================== ## Preprocessor: Recipe ## Model: linear_reg() ## ## -- Preprocessor ------------------------------------------------------ ## 2 Recipe Steps ## ## * step_normalize() ## * step_spatialsign() ## ## -- Model ------------------------------------------------------------- ## Linear Regression Model Specification (regression) ## ## Computational engine: lm linear_sp_sign_fit <- fit(linear_sp_sign_wflow, data = biomass_tr) predict(linear_sp_sign_fit, new_data = head(biomass_te)) ## # A tibble: 6 x 1 ##   .pred ##   <dbl> ## 1  18.1 ## 2  17.9 ## 3  17.2 ## 4  18.8 ## 5  19.6 ## 6  14.6"},{"path":"https://recipes.tidymodels.org/dev/reference/recipe.html","id":"stand-alone-use-of-recipes","dir":"Reference","previous_headings":"","what":"Stand-alone use of recipes","title":"Create a recipe for preprocessing data ‚Äî recipe","text":"using recipe generate data visualization troubleshoot problems recipe, functions can used estimate recipe apply new data manually. recipe defined, prep() function can used estimate quantities required operations using data set (.k.. training data). prep() returns recipe. example using PCA (perhaps produce plot):   Now estimate normalization statistics PCA loadings:     Note estimated recipe shows actual column names captured selectors. can tidy.recipe() recipe, either prepped unprepped, learn components.     can also tidy() recipe steps number id argument. apply prepped recipe data set, bake() function used manner predict() models. applies estimated steps data set.     general, workflow interface recipes recommended applications.","code":"# Define the recipe pca_rec <-   rec %>%   step_normalize(all_numeric_predictors()) %>%   step_pca(all_numeric_predictors()) pca_rec <- prep(pca_rec, training = biomass_tr) pca_rec ##  ## -- Recipe ------------------------------------------------------------  ##  ## -- Inputs  ## Number of variables by role  ## outcome:   1 ## predictor: 5  ##  ## -- Training information  ## Training data contained 456 data points and no incomplete rows.  ##  ## -- Operations  ## * Centering and scaling for: carbon and hydrogen, ... | Trained  ## * PCA extraction with: carbon, hydrogen, oxygen, ... | Trained tidy(pca_rec) ## # A tibble: 2 x 6 ##   number operation type      trained skip  id ##    <int> <chr>     <chr>     <lgl>   <lgl> <chr> ## 1      1 step      normalize TRUE    FALSE normalize_AeYA4 ## 2      2 step      pca       TRUE    FALSE pca_Zn1yz bake(pca_rec, head(biomass_te)) ## # A tibble: 6 x 6 ##     HHV    PC1    PC2     PC3     PC4     PC5 ##   <dbl>  <dbl>  <dbl>   <dbl>   <dbl>   <dbl> ## 1  18.3 0.730  -0.412 -0.495   0.333   0.253 ## 2  17.6 0.617   1.41   0.118  -0.466   0.815 ## 3  17.2 0.761   1.10  -0.0550 -0.397   0.747 ## 4  18.9 0.0400  0.950  0.158   0.405  -0.143 ## 5  20.5 0.792  -0.732  0.204   0.465  -0.148 ## 6  18.5 0.433  -0.127 -0.354  -0.0168 -0.0888"},{"path":"https://recipes.tidymodels.org/dev/reference/recipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a recipe for preprocessing data ‚Äî recipe","text":"","code":"# formula example with single outcome: data(biomass, package = \"modeldata\")  # split data biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  # With only predictors and outcomes, use a formula rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  # Now add preprocessing steps to the recipe sp_signed <- rec %>%   step_normalize(all_numeric_predictors()) %>%   step_spatialsign(all_numeric_predictors()) sp_signed #>  #> ‚îÄ‚îÄ Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 5 #>  #> ‚îÄ‚îÄ Operations  #> ‚Ä¢ Centering and scaling for: all_numeric_predictors() #> ‚Ä¢ Spatial sign on: all_numeric_predictors()  # --------------------------------------------------------------------------- # formula multivariate example: # no need for `cbind(carbon, hydrogen)` for left-hand side  multi_y <- recipe(carbon + hydrogen ~ oxygen + nitrogen + sulfur,   data = biomass_tr ) multi_y <- multi_y %>%   step_center(all_numeric_predictors()) %>%   step_scale(all_numeric_predictors())  # --------------------------------------------------------------------------- # example using `update_role` instead of formula: # best choice for high-dimensional data  rec <- recipe(biomass_tr) %>%   update_role(carbon, hydrogen, oxygen, nitrogen, sulfur,     new_role = \"predictor\"   ) %>%   update_role(HHV, new_role = \"outcome\") %>%   update_role(sample, new_role = \"id variable\") %>%   update_role(dataset, new_role = \"splitting indicator\") rec #>  #> ‚îÄ‚îÄ Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> outcome:             1 #> predictor:           5 #> id variable:         1 #> splitting indicator: 1"},{"path":"https://recipes.tidymodels.org/dev/reference/recipes-internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Functions ‚Äî yj_transform","title":"Internal Functions ‚Äî yj_transform","text":"ellipse_check() deprecated. Instead, empty selections supported steps. printer() used printing steps. is_trained() helper function returned single logical indicate whether recipe traine . sel2char() takes list selectors (e.g. terms steps) returns character vector version printing. print_step() used printing steps.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes-internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Functions ‚Äî yj_transform","text":"","code":"yj_transform(x, lambda, ind_neg = NULL, eps = 0.001)  estimate_yj(   dat,   limits = c(-5, 5),   num_unique = 5,   na_rm = TRUE,   call = caller_env(2) )  ellipse_check(...)  printer(   tr_obj = NULL,   untr_obj = NULL,   trained = FALSE,   width = max(20, options()$width - 30) )  prepare(x, ...)  is_trained(x)  sel2char(x)  print_step(   tr_obj = NULL,   untr_obj = NULL,   trained = FALSE,   title = NULL,   width = max(20, options()$width - 30),   case_weights = NULL )"},{"path":"https://recipes.tidymodels.org/dev/reference/recipes-internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Functions ‚Äî yj_transform","text":"x list selectors ... Arguments pass call step. tr_obj character vector names resolved preparing recipe (e.g. columns object step_log()). untr_obj object selectors prior prepping recipe (e.g. terms steps). trained logical whether step trained. width integer denoting output wrapped. title character, shortly describing action step takes.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes-internal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Functions ‚Äî yj_transform","text":"ellipse_check(): empty, list quosures. empty, error thrown. printer(): NULL, invisibly. is_trained(): single logical. sel2char(): character vector. print_step(): NULL, invisibly.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/recipes-role-indicator.html","id":null,"dir":"Reference","previous_headings":"","what":"Role indicators ‚Äî recipes-role-indicator","title":"Role indicators ‚Äî recipes-role-indicator","text":"helper function meant used prep() methods identify predictors outcomes names.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes-role-indicator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Role indicators ‚Äî recipes-role-indicator","text":"","code":"recipes_names_predictors(info)  recipes_names_outcomes(info)"},{"path":"https://recipes.tidymodels.org/dev/reference/recipes-role-indicator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Role indicators ‚Äî recipes-role-indicator","text":"info data.frame variable information columns.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes-role-indicator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Role indicators ‚Äî recipes-role-indicator","text":"Character vector column names.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/recipes.html","id":null,"dir":"Reference","previous_headings":"","what":"recipes: A package for computing and preprocessing design matrices. ‚Äî recipes","title":"recipes: A package for computing and preprocessing design matrices. ‚Äî recipes","text":"recipes package can used create design matrices modeling conduct preprocessing variables. meant extensive framework R's formula method. differences simple formula methods recipes Variables can arbitrary roles analysis beyond predictors outcomes. recipe consists one steps define actions variables. Recipes can defined sequentially using pipes well modifiable extensible.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes.html","id":"basic-functions","dir":"Reference","previous_headings":"","what":"Basic Functions","title":"recipes: A package for computing and preprocessing design matrices. ‚Äî recipes","text":"three main functions recipe(), prep(), bake(). recipe() defines operations data associated roles. preprocessing steps defined, parameters estimated using prep(). data ready transformation, bake() function applies operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes.html","id":"step-functions","dir":"Reference","previous_headings":"","what":"Step Functions","title":"recipes: A package for computing and preprocessing design matrices. ‚Äî recipes","text":"functions used add new actions recipe naming convention \"step_action\". example, step_center() centers data zero mean step_dummy() used create dummy variables.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/recipes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"recipes: A package for computing and preprocessing design matrices. ‚Äî recipes","text":"Maintainer: Max Kuhn max@posit.co Authors: Hadley Wickham hadley@posit.co Emil Hvitfeldt emil.hvitfeldt@posit.co contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_eval_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a selection with tidyselect semantics specific to recipes ‚Äî recipes_eval_select","title":"Evaluate a selection with tidyselect semantics specific to recipes ‚Äî recipes_eval_select","text":"recipes_eval_select() recipes specific variant tidyselect::eval_select() enhanced ability recognize recipes selectors, all_numeric_predictors(). See selections information unique recipes selectors. developer tool useful creating new recipes steps.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_eval_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a selection with tidyselect semantics specific to recipes ‚Äî recipes_eval_select","text":"","code":"recipes_eval_select(   quos,   data,   info,   ...,   allow_rename = FALSE,   check_case_weights = TRUE,   call = caller_env() )"},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_eval_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a selection with tidyselect semantics specific to recipes ‚Äî recipes_eval_select","text":"quos list quosures describing selection. generally ... argument step function, captured rlang::enquos() stored step object terms element. data data frame use context evaluate selection . generally training data passed prep() method step. info data frame term information describing column's type role use recipes selectors. generally info data passed prep() method step. ... dots future extensions must empty. allow_rename renaming syntax c(foo = bar) allowed? rarely required, currently used step_select(). unlikely step need renaming capabilities. check_case_weights selecting case weights throw error? Defaults TRUE. rarely changed needed juice(), bake.recipe(), update_role(), add_role(). call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument rlang::abort() information.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_eval_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a selection with tidyselect semantics specific to recipes ‚Äî recipes_eval_select","text":"named character vector containing evaluated selection. names always values, except allow_rename = TRUE, case names reflect new names chosen user.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_eval_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a selection with tidyselect semantics specific to recipes ‚Äî recipes_eval_select","text":"","code":"library(rlang) data(scat, package = \"modeldata\")  rec <- recipe(Species ~ ., data = scat)  info <- summary(rec) info #> # A tibble: 19 √ó 4 #>    variable  type      role      source   #>    <chr>     <list>    <chr>     <chr>    #>  1 Month     <chr [3]> predictor original #>  2 Year      <chr [2]> predictor original #>  3 Site      <chr [3]> predictor original #>  4 Location  <chr [3]> predictor original #>  5 Age       <chr [2]> predictor original #>  6 Number    <chr [2]> predictor original #>  7 Length    <chr [2]> predictor original #>  8 Diameter  <chr [2]> predictor original #>  9 Taper     <chr [2]> predictor original #> 10 TI        <chr [2]> predictor original #> 11 Mass      <chr [2]> predictor original #> 12 d13C      <chr [2]> predictor original #> 13 d15N      <chr [2]> predictor original #> 14 CN        <chr [2]> predictor original #> 15 ropey     <chr [2]> predictor original #> 16 segmented <chr [2]> predictor original #> 17 flat      <chr [2]> predictor original #> 18 scrape    <chr [2]> predictor original #> 19 Species   <chr [3]> outcome   original  quos <- quos(all_numeric_predictors(), where(is.factor))  recipes_eval_select(quos, scat, info) #>        Year         Age      Number      Length    Diameter       Taper  #>      \"Year\"       \"Age\"    \"Number\"    \"Length\"  \"Diameter\"     \"Taper\"  #>          TI        Mass        d13C        d15N          CN       ropey  #>        \"TI\"      \"Mass\"      \"d13C\"      \"d15N\"        \"CN\"     \"ropey\"  #>   segmented        flat      scrape     Species       Month        Site  #> \"segmented\"      \"flat\"    \"scrape\"   \"Species\"     \"Month\"      \"Site\"  #>    Location  #>  \"Location\""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_extension_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks that steps have all S3 methods ‚Äî recipes_extension_check","title":"Checks that steps have all S3 methods ‚Äî recipes_extension_check","text":"developer tool intended help making sure methods step created.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_extension_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks that steps have all S3 methods ‚Äî recipes_extension_check","text":"","code":"recipes_extension_check(   pkg,   exclude_steps = character(),   exclude_methods = character() )"},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_extension_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks that steps have all S3 methods ‚Äî recipes_extension_check","text":"pkg Character, name package containing steps check exclude_steps Character, name steps exclude. mostly used remove false positives. exclude_methods Character, methods exclude testing . Can take values \"prep\", \"bake\", \"print\", \"tidy\", \"required_pkgs\".","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_extension_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks that steps have all S3 methods ‚Äî recipes_extension_check","text":"cli output","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_extension_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks that steps have all S3 methods ‚Äî recipes_extension_check","text":"recommended following test placed packages add recipes steps help keep everything date.","code":"test_that(\"recipes_extension_check\", {   expect_snapshot(     recipes::recipes_extension_check(       pkg = \"pkgname\"     )   ) })"},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_extension_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks that steps have all S3 methods ‚Äî recipes_extension_check","text":"","code":"recipes_extension_check(   pkg = \"recipes\" ) #> ‚Ñπ The following steps doesn't have `print.*` methods: #> ‚Ä¢ step_testthat_helper #> ‚Ñπ The following steps doesn't have `tidy.*` methods: #> ‚Ä¢ step_testthat_helper #> ‚Ñπ The following steps doesn't have `required_pkgs.*` methods: #> ‚Ä¢ step_BoxCox #> ‚Ä¢ step_YeoJohnson #> ‚Ä¢ step_arrange #> ‚Ä¢ step_bagimpute #> ‚Ä¢ step_bin2factor #> ‚Ä¢ step_bs #> ‚Ä¢ step_center #> ‚Ä¢ step_classdist #> ‚Ä¢ step_corr #> ‚Ä¢ step_count #> ‚Ä¢ step_cut #> ‚Ä¢ step_date #> ‚Ä¢ step_discretize #> ‚Ä¢ step_dummy #> ‚Ä¢ step_dummy_extract #> ‚Ä¢ step_dummy_multi_choice #> ‚Ä¢ step_factor2string #> ‚Ä¢ step_filter #> ‚Ä¢ step_filter_missing #> ‚Ä¢ step_geodist #> ‚Ä¢ step_harmonic #> ‚Ä¢ step_holiday #> ‚Ä¢ step_hyperbolic #> ‚Ä¢ step_impute_bag #> ‚Ä¢ step_impute_knn #> ‚Ä¢ step_impute_linear #> ‚Ä¢ step_impute_lower #> ‚Ä¢ step_impute_mean #> ‚Ä¢ step_impute_median #> ‚Ä¢ step_impute_mode #> ‚Ä¢ step_impute_roll #> ‚Ä¢ step_indicate_na #> ‚Ä¢ step_integer #> ‚Ä¢ step_interact #> ‚Ä¢ step_intercept #> ‚Ä¢ step_inverse #> ‚Ä¢ step_invlogit #> ‚Ä¢ step_knnimpute #> ‚Ä¢ step_lag #> ‚Ä¢ step_lincomb #> ‚Ä¢ step_log #> ‚Ä¢ step_logit #> ‚Ä¢ step_lowerimpute #> ‚Ä¢ step_meanimpute #> ‚Ä¢ step_medianimpute #> ‚Ä¢ step_modeimpute #> ‚Ä¢ step_mutate_at #> ‚Ä¢ step_naomit #> ‚Ä¢ step_normalize #> ‚Ä¢ step_novel #> ‚Ä¢ step_ns #> ‚Ä¢ step_num2factor #> ‚Ä¢ step_nzv #> ‚Ä¢ step_ordinalscore #> ‚Ä¢ step_other #> ‚Ä¢ step_pca #> ‚Ä¢ step_percentile #> ‚Ä¢ step_poly #> ‚Ä¢ step_profile #> ‚Ä¢ step_range #> ‚Ä¢ step_ratio #> ‚Ä¢ step_regex #> ‚Ä¢ step_relevel #> ‚Ä¢ step_relu #> ‚Ä¢ step_rename #> ‚Ä¢ step_rename_at #> ‚Ä¢ step_rm #> ‚Ä¢ step_rollimpute #> ‚Ä¢ step_sample #> ‚Ä¢ step_scale #> ‚Ä¢ step_select #> ‚Ä¢ step_shuffle #> ‚Ä¢ step_slice #> ‚Ä¢ step_spatialsign #> ‚Ä¢ step_sqrt #> ‚Ä¢ step_string2factor #> ‚Ä¢ step_testthat_helper #> ‚Ä¢ step_time #> ‚Ä¢ step_unknown #> ‚Ä¢ step_unorder #> ‚Ä¢ step_zv  recipes_extension_check(   pkg = \"recipes\",   exclude_steps = \"step_testthat_helper\",   exclude_methods = c(\"required_pkgs\") ) #> ‚úî All steps have all method!"},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_pkg_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Update packages ‚Äî recipes_pkg_check","title":"Update packages ‚Äî recipes_pkg_check","text":"check see required packages installed.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_pkg_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update packages ‚Äî recipes_pkg_check","text":"","code":"recipes_pkg_check(pkg = NULL, ...)"},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_pkg_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update packages ‚Äî recipes_pkg_check","text":"pkg character string package checked ... Extra arguments pass utils::install.packages()","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_pkg_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update packages ‚Äî recipes_pkg_check","text":"Nothing returned message printed console packages () installed along code .","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_pkg_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update packages ‚Äî recipes_pkg_check","text":"","code":"if (FALSE) { # \\dontrun{ recipes_pkg_check(\"recipes\") } # }"},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_ptype.html","id":null,"dir":"Reference","previous_headings":"","what":"Prototype of recipe object ‚Äî recipes_ptype","title":"Prototype of recipe object ‚Äî recipes_ptype","text":"helper function returns prototype input data set expected recipe object.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_ptype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prototype of recipe object ‚Äî recipes_ptype","text":"","code":"recipes_ptype(x, ..., stage = \"prep\")"},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_ptype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prototype of recipe object ‚Äî recipes_ptype","text":"x recipe object. ... currently used. stage single character. Must one \"prep\" \"bake\". See details . Defaults \"prep\".","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_ptype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prototype of recipe object ‚Äî recipes_ptype","text":"zero row tibble.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_ptype.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prototype of recipe object ‚Äî recipes_ptype","text":"returned ptype tibble data set recipe object expecting. specifics columns depend stage. prep() time, stage = \"prep\", ptype data passed recipe(). following code chunk represents possible recipe scenario. recipes_ptype(rec_spec, stage = \"prep\") recipes_ptype(rec_prep, stage = \"prep\") return ptype tibble corresponding data_ptype. information used internally prep() verify data_training right columns right types.   bake() time, stage = \"bake\", ptype represents data required bake() run.   means practice unless otherwise specified, everything outcomes case weights required. requirements can changed update_role_requirements(), recipes_ptype() respects changes. recipes_ptype() returns NULL recipes created prior version 1.1.0. Note order columns guaranteed align data_ptype data internally ordered according roles.","code":"rec_spec <- recipe(outcome ~ ., data = data_ptype) %>%   step_normalize(all_numeric_predictors()) %>%   step_dummy(all_nominal_predictors())  rec_prep <- prep(rec_spec, training = data_training) data_bake <- bake(rec_prep, new_data = data_testing)"},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_ptype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prototype of recipe object ‚Äî recipes_ptype","text":"","code":"training <- tibble(   y = 1:10,   id = 1:10,   x1 = letters[1:10],   x2 = factor(letters[1:10]),   cw = hardhat::importance_weights(1:10) ) training #> # A tibble: 10 √ó 5 #>        y    id x1    x2           cw #>    <int> <int> <chr> <fct> <imp_wts> #>  1     1     1 a     a             1 #>  2     2     2 b     b             2 #>  3     3     3 c     c             3 #>  4     4     4 d     d             4 #>  5     5     5 e     e             5 #>  6     6     6 f     f             6 #>  7     7     7 g     g             7 #>  8     8     8 h     h             8 #>  9     9     9 i     i             9 #> 10    10    10 j     j            10  rec_spec <- recipe(y ~ ., data = training)  # outcomes and case_weights are not required at bake time recipes_ptype(rec_spec, stage = \"prep\") #> # A tibble: 0 √ó 5 #> # ‚Ñπ 5 variables: id <int>, x1 <chr>, x2 <fct>, cw <imp_wts>, y <int> recipes_ptype(rec_spec, stage = \"bake\") #> # A tibble: 0 √ó 3 #> # ‚Ñπ 3 variables: id <int>, x1 <chr>, x2 <fct>  rec_spec <- recipe(y ~ ., data = training) %>%   update_role(x1, new_role = \"id\")  # outcomes and case_weights are not required at bake time # \"id\" column is assumed to be needed recipes_ptype(rec_spec, stage = \"prep\") #> # A tibble: 0 √ó 5 #> # ‚Ñπ 5 variables: id <int>, x1 <chr>, x2 <fct>, cw <imp_wts>, y <int> recipes_ptype(rec_spec, stage = \"bake\") #> # A tibble: 0 √ó 3 #> # ‚Ñπ 3 variables: id <int>, x1 <chr>, x2 <fct>  rec_spec <- recipe(y ~ ., data = training) %>%   update_role(x1, new_role = \"id\") %>%   update_role_requirements(\"id\", bake = FALSE)  # update_role_requirements() is used to specify that \"id\" isn't needed recipes_ptype(rec_spec, stage = \"prep\") #> # A tibble: 0 √ó 5 #> # ‚Ñπ 5 variables: id <int>, x1 <chr>, x2 <fct>, cw <imp_wts>, y <int> recipes_ptype(rec_spec, stage = \"bake\") #> # A tibble: 0 √ó 2 #> # ‚Ñπ 2 variables: id <int>, x2 <fct>"},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_ptype_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate prototype of recipe object ‚Äî recipes_ptype_validate","title":"Validate prototype of recipe object ‚Äî recipes_ptype_validate","text":"helper function validates dataframe ptype recipe.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_ptype_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate prototype of recipe object ‚Äî recipes_ptype_validate","text":"","code":"recipes_ptype_validate(   x,   new_data,   ...,   stage = \"prep\",   call = rlang::caller_env() )"},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_ptype_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate prototype of recipe object ‚Äî recipes_ptype_validate","text":"x recipe object. new_data data.frame. patched aganist ptype x. ... currently used. stage single character. Must one \"prep\" \"bake\". See details . Defaults \"prep\". call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument rlang::abort() information.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_ptype_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate prototype of recipe object ‚Äî recipes_ptype_validate","text":"Nothing error.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_ptype_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate prototype of recipe object ‚Äî recipes_ptype_validate","text":"","code":"rec <- recipe(mpg ~ disp, data = mtcars)  recipes_ptype_validate(rec, mtcars)"},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_remove_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes columns if options apply ‚Äî recipes_remove_cols","title":"Removes columns if options apply ‚Äî recipes_remove_cols","text":"helper function removes columns based character vectors.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_remove_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes columns if options apply ‚Äî recipes_remove_cols","text":"","code":"recipes_remove_cols(new_data, object, col_names = character())"},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_remove_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes columns if options apply ‚Äî recipes_remove_cols","text":"new_data tibble. object step object. col_names character vector, denoting columns remove. overwrite object$removals set.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/recipes_remove_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes columns if options apply ‚Äî recipes_remove_cols","text":"new_data column names removed specified col_names object$removals.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages ‚Äî reexports","title":"Objects exported from other packages ‚Äî reexports","text":"objects imported packages. Follow links see documentation. generics required_pkgs, tidy, tunable, tune_args hardhat extract_fit_time, extract_parameter_dials, extract_parameter_set_dials, frequency_weights, importance_weights magrittr %>% stats update","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/remove_original_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes original columns if options apply ‚Äî remove_original_cols","title":"Removes original columns if options apply ‚Äî remove_original_cols","text":"helper function used whenever argument keep_original_cols used function.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/remove_original_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes original columns if options apply ‚Äî remove_original_cols","text":"","code":"remove_original_cols(new_data, object, col_names)"},{"path":"https://recipes.tidymodels.org/dev/reference/remove_original_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes original columns if options apply ‚Äî remove_original_cols","text":"new_data tibble. object step object. col_names character vector, denoting columns remove.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/remove_original_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes original columns if options apply ‚Äî remove_original_cols","text":"new_data col_names removed get_keep_original_cols(object) == TRUE object$preserve == TRUE.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/required_pkgs.recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 methods for tracking which additional packages are needed for steps. ‚Äî required_pkgs.step_classdist_shrunken","title":"S3 methods for tracking which additional packages are needed for steps. ‚Äî required_pkgs.step_classdist_shrunken","text":"S3 methods tracking additional packages needed steps.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/required_pkgs.recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 methods for tracking which additional packages are needed for steps. ‚Äî required_pkgs.step_classdist_shrunken","text":"","code":"# S3 method for class 'step_classdist_shrunken' required_pkgs(x, ...)  # S3 method for class 'step_depth' required_pkgs(x, ...)  # S3 method for class 'step_ica' required_pkgs(x, ...)  # S3 method for class 'step_isomap' required_pkgs(x, ...)  # S3 method for class 'step_kpca' required_pkgs(x, ...)  # S3 method for class 'step_kpca_poly' required_pkgs(x, ...)  # S3 method for class 'step_kpca_rbf' required_pkgs(x, ...)  # S3 method for class 'step_mutate' required_pkgs(x, ...)  # S3 method for class 'step_nnmf' required_pkgs(x, ...)  # S3 method for class 'step_nnmf_sparse' required_pkgs(x, ...)  # S3 method for class 'step_pls' required_pkgs(x, ...)  # S3 method for class 'step_poly_bernstein' required_pkgs(x, ...)  # S3 method for class 'recipe' required_pkgs(x, infra = TRUE, ...)  # S3 method for class 'step' required_pkgs(x, ...)  # S3 method for class 'check' required_pkgs(x, ...)  # S3 method for class 'step_spline_b' required_pkgs(x, ...)  # S3 method for class 'step_spline_convex' required_pkgs(x, ...)  # S3 method for class 'step_spline_monotone' required_pkgs(x, ...)  # S3 method for class 'step_spline_natural' required_pkgs(x, ...)  # S3 method for class 'step_spline_nonnegative' required_pkgs(x, ...)  # S3 method for class 'step_window' required_pkgs(x, ...)"},{"path":"https://recipes.tidymodels.org/dev/reference/required_pkgs.recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 methods for tracking which additional packages are needed for steps. ‚Äî required_pkgs.step_classdist_shrunken","text":"x recipe recipe step infra recipes included result?","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/required_pkgs.recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 methods for tracking which additional packages are needed for steps. ‚Äî required_pkgs.step_classdist_shrunken","text":"character vector","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/roles.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually alter roles ‚Äî roles","title":"Manually alter roles ‚Äî roles","text":"update_role() alters existing role recipe assigns initial role variables yet declared role. add_role() adds additional role variables already role recipe. overwrite old roles, single variable can multiple roles. remove_role() eliminates single existing role recipe.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/roles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually alter roles ‚Äî roles","text":"","code":"add_role(recipe, ..., new_role = \"predictor\", new_type = NULL)  update_role(recipe, ..., new_role = \"predictor\", old_role = NULL)  remove_role(recipe, ..., old_role)"},{"path":"https://recipes.tidymodels.org/dev/reference/roles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually alter roles ‚Äî roles","text":"recipe existing recipe(). ... One selector functions choose variables assigned role. See selections() details. new_role character string single role. new_type character string specific type variable identified . left NULL, type automatically identified first type see variable summary(recipe). old_role character string specific role update variables selected .... update_role() accepts NULL long variables single role.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/roles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually alter roles ‚Äî roles","text":"updated recipe object.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/roles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manually alter roles ‚Äî roles","text":"update_role(), add_role() remove_role() applied recipe steps checks, regardless located position. means roles can changed three functions columns already present original data supplied recipe(). See role argument step functions update roles columns created steps. Variables can arbitrary role (see examples) three special standard roles, \"predictor\", \"outcome\", \"case_weights\". first two roles typically required fitting model. update_role() used variable currently role recipe, replace old_role new_role. add_role() adds additional roles variables already roles throw error current role missing (.e. NA). using add_role(), variable selected already new_role, warning emitted variable skipped duplicate roles added. Adding updating roles useful way group certain variables fall standard \"predictor\" bucket. can perform step variables custom role selector has_role().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/roles.html","id":"effects-of-non-standard-roles","dir":"Reference","previous_headings":"","what":"Effects of non-standard roles","title":"Manually alter roles ‚Äî roles","text":"Recipes can label retain column(s) data set treated outcomes predictors. unique identifier column ancillary data used troubleshoot issues model development may either outcome predictor. example, modeldata::biomass dataset column named sample information specific sample type. can change role:   means sample longer treated \"predictor\" (default role columns right-hand side formula supplied recipe()) used model fitting analysis, still retained data set. really using sample recipe, recommend instead remove sample dataset passing recipe(). reason recipes assumes non-standard roles required bake() time (predict() time, using workflow). Since use sample steps recipe, might think need pass bake(), true recipes know use :   mentioned , best way avoid issue even use role, just remove sample column biomass calling recipe(). general, predictors non-standard roles supplied recipe() present prep() bake() time. remove sample reason, second best way get around issue tell recipes \"id variable\" role required bake() time. can using update_role_requirements():   rare need feature.","code":"library(recipes)  data(biomass, package = \"modeldata\") biomass_train <- biomass[1:100,] biomass_test <- biomass[101:200,]  rec <- recipe(HHV ~ ., data = biomass_train) %>%   update_role(sample, new_role = \"id variable\") %>%   step_center(carbon)  rec <- prep(rec, biomass_train) biomass_test$sample <- NULL  bake(rec, biomass_test) #> Error in `bake()`: #> x The following required columns are missing from `new_data`: #>   `sample`. #> i These columns have one of the following roles, which are required #>   at `bake()` time: `id variable`. #> i If these roles are not required at `bake()` time, use #>   `update_role_requirements(role = \"your_role\", bake = FALSE)`. rec <- recipe(HHV ~ ., data = biomass_train) %>%   update_role(sample, new_role = \"id variable\") %>%   update_role_requirements(\"id variable\", bake = FALSE) %>%   step_center(carbon)  rec <- prep(rec, biomass_train)  # No errors! biomass_test_baked <- bake(rec, biomass_test)"},{"path":"https://recipes.tidymodels.org/dev/reference/roles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually alter roles ‚Äî roles","text":"","code":"library(recipes) data(biomass, package = \"modeldata\")  # Using the formula method, roles are created for any outcomes and predictors: recipe(HHV ~ ., data = biomass) %>%   summary() #> # A tibble: 8 √ó 4 #>   variable type      role      source   #>   <chr>    <list>    <chr>     <chr>    #> 1 sample   <chr [3]> predictor original #> 2 dataset  <chr [3]> predictor original #> 3 carbon   <chr [2]> predictor original #> 4 hydrogen <chr [2]> predictor original #> 5 oxygen   <chr [2]> predictor original #> 6 nitrogen <chr [2]> predictor original #> 7 sulfur   <chr [2]> predictor original #> 8 HHV      <chr [2]> outcome   original  # However `sample` and `dataset` aren't predictors. Since they already have # roles, `update_role()` can be used to make changes, to any arbitrary role: recipe(HHV ~ ., data = biomass) %>%   update_role(sample, new_role = \"id variable\") %>%   update_role(dataset, new_role = \"splitting variable\") %>%   summary() #> # A tibble: 8 √ó 4 #>   variable type      role               source   #>   <chr>    <list>    <chr>              <chr>    #> 1 sample   <chr [3]> id variable        original #> 2 dataset  <chr [3]> splitting variable original #> 3 carbon   <chr [2]> predictor          original #> 4 hydrogen <chr [2]> predictor          original #> 5 oxygen   <chr [2]> predictor          original #> 6 nitrogen <chr [2]> predictor          original #> 7 sulfur   <chr [2]> predictor          original #> 8 HHV      <chr [2]> outcome            original  # `update_role()` cannot set a role to NA, use `remove_role()` for that if (FALSE) { # \\dontrun{ recipe(HHV ~ ., data = biomass) %>%   update_role(sample, new_role = NA_character_) } # }  # ------------------------------------------------------------------------------  # Variables can have more than one role. `add_role()` can be used # if the column already has at least one role: recipe(HHV ~ ., data = biomass) %>%   add_role(carbon, sulfur, new_role = \"something\") %>%   summary() #> # A tibble: 10 √ó 4 #>    variable type      role      source   #>    <chr>    <list>    <chr>     <chr>    #>  1 sample   <chr [3]> predictor original #>  2 dataset  <chr [3]> predictor original #>  3 carbon   <chr [2]> predictor original #>  4 carbon   <chr [2]> something original #>  5 hydrogen <chr [2]> predictor original #>  6 oxygen   <chr [2]> predictor original #>  7 nitrogen <chr [2]> predictor original #>  8 sulfur   <chr [2]> predictor original #>  9 sulfur   <chr [2]> something original #> 10 HHV      <chr [2]> outcome   original  # `update_role()` has an argument called `old_role` that is required to # unambiguously update a role when the column currently has multiple roles. recipe(HHV ~ ., data = biomass) %>%   add_role(carbon, new_role = \"something\") %>%   update_role(carbon, new_role = \"something else\", old_role = \"something\") %>%   summary() #> # A tibble: 9 √ó 4 #>   variable type      role           source   #>   <chr>    <list>    <chr>          <chr>    #> 1 sample   <chr [3]> predictor      original #> 2 dataset  <chr [3]> predictor      original #> 3 carbon   <chr [2]> predictor      original #> 4 carbon   <chr [2]> something else original #> 5 hydrogen <chr [2]> predictor      original #> 6 oxygen   <chr [2]> predictor      original #> 7 nitrogen <chr [2]> predictor      original #> 8 sulfur   <chr [2]> predictor      original #> 9 HHV      <chr [2]> outcome        original  # `carbon` has two roles at the end, so the last `update_roles()` fails since # `old_role` was not given. if (FALSE) { # \\dontrun{ recipe(HHV ~ ., data = biomass) %>%   add_role(carbon, sulfur, new_role = \"something\") %>%   update_role(carbon, new_role = \"something else\") } # }  # ------------------------------------------------------------------------------  # To remove a role, `remove_role()` can be used to remove a single role. recipe(HHV ~ ., data = biomass) %>%   add_role(carbon, new_role = \"something\") %>%   remove_role(carbon, old_role = \"something\") %>%   summary() #> # A tibble: 8 √ó 4 #>   variable type      role      source   #>   <chr>    <list>    <chr>     <chr>    #> 1 sample   <chr [3]> predictor original #> 2 dataset  <chr [3]> predictor original #> 3 carbon   <chr [2]> predictor original #> 4 hydrogen <chr [2]> predictor original #> 5 oxygen   <chr [2]> predictor original #> 6 nitrogen <chr [2]> predictor original #> 7 sulfur   <chr [2]> predictor original #> 8 HHV      <chr [2]> outcome   original  # To remove all roles, call `remove_role()` multiple times to reset to `NA` recipe(HHV ~ ., data = biomass) %>%   add_role(carbon, new_role = \"something\") %>%   remove_role(carbon, old_role = \"something\") %>%   remove_role(carbon, old_role = \"predictor\") %>%   summary() #> # A tibble: 8 √ó 4 #>   variable type      role      source   #>   <chr>    <list>    <chr>     <chr>    #> 1 sample   <chr [3]> predictor original #> 2 dataset  <chr [3]> predictor original #> 3 carbon   <chr [2]> NA        original #> 4 hydrogen <chr [2]> predictor original #> 5 oxygen   <chr [2]> predictor original #> 6 nitrogen <chr [2]> predictor original #> 7 sulfur   <chr [2]> predictor original #> 8 HHV      <chr [2]> outcome   original  # ------------------------------------------------------------------------------  # If the formula method is not used, all columns have a missing role: recipe(biomass) %>%   summary() #> # A tibble: 8 √ó 4 #>   variable type      role  source   #>   <chr>    <list>    <chr> <chr>    #> 1 sample   <chr [3]> NA    original #> 2 dataset  <chr [3]> NA    original #> 3 carbon   <chr [2]> NA    original #> 4 hydrogen <chr [2]> NA    original #> 5 oxygen   <chr [2]> NA    original #> 6 nitrogen <chr [2]> NA    original #> 7 sulfur   <chr [2]> NA    original #> 8 HHV      <chr [2]> NA    original"},{"path":"https://recipes.tidymodels.org/dev/reference/selections.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for selecting variables in step functions ‚Äî selections","title":"Methods for selecting variables in step functions ‚Äî selections","text":"Tips selecting columns step functions.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/selections.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Methods for selecting variables in step functions ‚Äî selections","text":"selecting variables model terms step functions, dplyr-like tools used. selector functions can choose variables based name, current role, data type, combination . selectors passed argument step. variables explicitly named step function, might look like: first four arguments indicate variables used PCA last argument specific argument step_pca() number components. Note : arguments evaluated prep function step executed. dplyr-like syntax allows negative signs exclude variables (e.g. -Murder) set selectors processed order. leading exclusion arguments (e.g. -Murder) effect adding variables list except excluded variable(s), ignoring role information. Select helpers tidyselect package can also used: tidyselect::starts_with(), tidyselect::ends_with(), tidyselect::contains(), tidyselect::matches(), tidyselect::num_range(), tidyselect::everything(), tidyselect::one_of(), tidyselect::all_of(), tidyselect::any_of() Note using tidyselect::everything() tidyselect functions restricted predictors. thus select outcomes, ID, predictor columns alike. functions used care, tidyselect::everything() likely need. example: select Sepal.Length Columns design matrix may exist step coded can also selected. example, using step_pca(), number columns created feature extraction may known subsequent steps defined. case, using matches(\"^PC\") select columns whose names start \"PC\" columns created. sets recipes-specific functions can used select variables based role type: has_role() has_type(). convenience, also functions specific. functions all_numeric() all_nominal() select based type, nominal variables including character factor; functions all_predictors() all_outcomes() select based role. functions all_numeric_predictors() all_nominal_predictors() select intersections role type. can used conjunction previous functions described selecting variables using names. selection like : equivalent : result numeric predictors: carbon, hydrogen, oxygen, nitrogen, sulfur. role variable defined, never selected using role-specific selectors.","code":"recipe( ~ ., data = USArrests) %>%     step_pca(Murder, Assault, UrbanPop, Rape, num_comp = 3) recipe(Species ~ ., data = iris) %>%     step_center(starts_with(\"Sepal\"), -contains(\"Width\")) data(biomass)   recipe(HHV ~ ., data = biomass) %>%     step_center(all_numeric(), -all_outcomes()) data(biomass)   recipe(HHV ~ ., data = biomass) %>%     step_center(all_numeric_predictors())"},{"path":"https://recipes.tidymodels.org/dev/reference/selections.html","id":"interactions","dir":"Reference","previous_headings":"","what":"Interactions","title":"Methods for selecting variables in step functions ‚Äî selections","text":"Selectors can used step_interact() similar ways must embedded model formula (opposed sequence selectors). example, interaction specification ~ starts_with(\"Species\"):Sepal.Width. can useful Species converted dummy variables previously using step_dummy(). implementation step_interact() special, restricted step functions. selector functions recipes tidyselect allowed. User defined selector functions recognized. Additionally, tidyselect domain specific language recognized , meaning &, |, !, - work.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/selections.html","id":"tips-for-saving-recipes-and-filtering-columns","dir":"Reference","previous_headings":"","what":"Tips for saving recipes and filtering columns","title":"Methods for selecting variables in step functions ‚Äî selections","text":"creating variable selections: using column filtering steps, step_corr(), try avoid hardcoding specific variable names downstream steps case columns removed filter. Instead, use dplyr::any_of() dplyr::all_of(). dplyr::any_of() tolerant column removed. dplyr::all_of() fail unless columns present data. functions, going save recipe binary object use another R session, try avoid referring vector workspace. Preferred: any_of(!!var_names) Avoid: any_of(var_names) examples:","code":"some_vars <- names(mtcars)[4:6]  # No filter steps, OK for not saving the recipe rec_1 <-   recipe(mpg ~ ., data = mtcars) %>%   step_log(all_of(some_vars)) %>%   prep()  # No filter steps, saving the recipe rec_2 <-   recipe(mpg ~ ., data = mtcars) %>%   step_log(!!!some_vars) %>%   prep()  # This fails since `wt` is not in the data recipe(mpg ~ ., data = mtcars)  %>%   step_rm(wt) %>%   step_log(!!!some_vars) %>%   prep() ## Error in `step_log()`: ## Caused by error in `prep()` at recipes/R/recipe.R:479:9: ## ! Can't select columns that don't exist. ## x Column `wt` doesn't exist. # Best for filters (using any_of()) and when # saving the recipe rec_4 <-   recipe(mpg ~ ., data = mtcars) %>%   step_rm(wt) %>%   step_log(any_of(!!some_vars)) %>%   # equal to step_log(any_of(c(\"hp\", \"drat\", \"wt\")))   prep()"},{"path":"https://recipes.tidymodels.org/dev/reference/step.html","id":null,"dir":"Reference","previous_headings":"","what":"step sets the class of the step and check is for checks. ‚Äî step","title":"step sets the class of the step and check is for checks. ‚Äî step","text":"step sets class step check checks.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"step sets the class of the step and check is for checks. ‚Äî step","text":"","code":"step(subclass, ..., .prefix = \"step_\")  check(subclass, ..., .prefix = \"check_\")"},{"path":"https://recipes.tidymodels.org/dev/reference/step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"step sets the class of the step and check is for checks. ‚Äî step","text":"subclass character string resulting class. example, subclass = \"blah\" step object returned class step_blah check_blah depending context. ... arguments operator returned. .prefix Prefix subclass created.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"step sets the class of the step and check is for checks. ‚Äî step","text":"updated step check new class.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_BoxCox.html","id":null,"dir":"Reference","previous_headings":"","what":"Box-Cox transformation for non-negative data ‚Äî step_BoxCox","title":"Box-Cox transformation for non-negative data ‚Äî step_BoxCox","text":"step_BoxCox() creates specification recipe step transform data using Box-Cox transformation.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_BoxCox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Box-Cox transformation for non-negative data ‚Äî step_BoxCox","text":"","code":"step_BoxCox(   recipe,   ...,   role = NA,   trained = FALSE,   lambdas = NULL,   limits = c(-5, 5),   num_unique = 5,   skip = FALSE,   id = rand_id(\"BoxCox\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_BoxCox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Box-Cox transformation for non-negative data ‚Äî step_BoxCox","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. lambdas numeric vector transformation values. NULL computed prep(). limits length 2 numeric vector defining range compute transformation parameter lambda. num_unique integer specify minimum required unique values evaluate transformation. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_BoxCox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Box-Cox transformation for non-negative data ‚Äî step_BoxCox","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_BoxCox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Box-Cox transformation for non-negative data ‚Äî step_BoxCox","text":"Box-Cox transformation, requires strictly positive variable, can used rescale variable similar normal distribution. package, partial log-likelihood function directly optimized within reasonable set transformation values (can changed user). transformation typically done outcome variable using residuals statistical model (ordinary least squares). , simple null model (intercept ) used apply transformation predictor variables individually. can effect making variable distributions symmetric. transformation parameters estimated closed bounds, optimization fails, value NA used transformation applied.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_BoxCox.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Box-Cox transformation for non-negative data ‚Äî step_BoxCox","text":"tidy() step, tibble returned columns terms, value , id: terms character, selectors variables selected value numeric, lambda estimate id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_BoxCox.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Box-Cox transformation for non-negative data ‚Äî step_BoxCox","text":"underlying operation allow case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_BoxCox.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Box-Cox transformation for non-negative data ‚Äî step_BoxCox","text":"Sakia, R. M. (1992). Box-Cox transformation technique: review. Statistician, 169-178..","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_BoxCox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Box-Cox transformation for non-negative data ‚Äî step_BoxCox","text":"","code":"rec <- recipe(~., data = as.data.frame(state.x77))  bc_trans <- step_BoxCox(rec, all_numeric())  bc_estimates <- prep(bc_trans, training = as.data.frame(state.x77)) #> Warning: Non-positive values in selected variable. #> Warning: No Box-Cox transformation could be estimated for: `Frost`.  bc_data <- bake(bc_estimates, as.data.frame(state.x77))  plot(density(state.x77[, \"Illiteracy\"]), main = \"before\")  plot(density(bc_data$Illiteracy), main = \"after\")   tidy(bc_trans, number = 1) #> # A tibble: 1 √ó 3 #>   terms         value id           #>   <chr>         <dbl> <chr>        #> 1 all_numeric()    NA BoxCox_rDslY tidy(bc_estimates, number = 1) #> # A tibble: 7 √ó 3 #>   terms          value id           #>   <chr>          <dbl> <chr>        #> 1 Population  0.000966 BoxCox_rDslY #> 2 Income      0.524    BoxCox_rDslY #> 3 Illiteracy -0.379    BoxCox_rDslY #> 4 Life Exp    4.59     BoxCox_rDslY #> 5 Murder      0.606    BoxCox_rDslY #> 6 HS Grad     1.92     BoxCox_rDslY #> 7 Area        0.250    BoxCox_rDslY"},{"path":"https://recipes.tidymodels.org/dev/reference/step_YeoJohnson.html","id":null,"dir":"Reference","previous_headings":"","what":"Yeo-Johnson transformation ‚Äî step_YeoJohnson","title":"Yeo-Johnson transformation ‚Äî step_YeoJohnson","text":"step_YeoJohnson() creates specification recipe step transform data using Yeo-Johnson transformation.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_YeoJohnson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Yeo-Johnson transformation ‚Äî step_YeoJohnson","text":"","code":"step_YeoJohnson(   recipe,   ...,   role = NA,   trained = FALSE,   lambdas = NULL,   limits = c(-5, 5),   num_unique = 5,   na_rm = TRUE,   skip = FALSE,   id = rand_id(\"YeoJohnson\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_YeoJohnson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Yeo-Johnson transformation ‚Äî step_YeoJohnson","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. lambdas numeric vector transformation values. NULL computed prep(). limits length 2 numeric vector defining range compute transformation parameter lambda. num_unique integer data less possible values evaluated transformation. na_rm logical value indicating whether NA values removed computations. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_YeoJohnson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Yeo-Johnson transformation ‚Äî step_YeoJohnson","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_YeoJohnson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Yeo-Johnson transformation ‚Äî step_YeoJohnson","text":"Yeo-Johnson transformation similar Box-Cox require input variables strictly positive. package, partial log-likelihood function directly optimized within reasonable set transformation values (can changed user). transformation typically done outcome variable using residuals statistical model (ordinary least squares). , simple null model (intercept ) used apply transformation predictor variables individually. can effect making variable distributions symmetric. transformation parameters estimated closed bounds, optimization fails, value NA used transformation applied.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_YeoJohnson.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Yeo-Johnson transformation ‚Äî step_YeoJohnson","text":"tidy() step, tibble returned columns terms, value , id: terms character, selectors variables selected value numeric, lambda estimate id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_YeoJohnson.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Yeo-Johnson transformation ‚Äî step_YeoJohnson","text":"underlying operation allow case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_YeoJohnson.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Yeo-Johnson transformation ‚Äî step_YeoJohnson","text":"Yeo, . K., Johnson, R. . (2000). new family power transformations improve normality symmetry. Biometrika.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_YeoJohnson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Yeo-Johnson transformation ‚Äî step_YeoJohnson","text":"","code":"data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  yj_transform <- step_YeoJohnson(rec, all_numeric())  yj_estimates <- prep(yj_transform, training = biomass_tr)  yj_te <- bake(yj_estimates, biomass_te)  plot(density(biomass_te$sulfur), main = \"before\")  plot(density(yj_te$sulfur), main = \"after\")   tidy(yj_transform, number = 1) #> # A tibble: 1 √ó 3 #>   terms         value id               #>   <chr>         <dbl> <chr>            #> 1 all_numeric()    NA YeoJohnson_qjRmV tidy(yj_estimates, number = 1) #> # A tibble: 6 √ó 3 #>   terms      value id               #>   <chr>      <dbl> <chr>            #> 1 carbon   -0.0225 YeoJohnson_qjRmV #> 2 hydrogen  2.10   YeoJohnson_qjRmV #> 3 oxygen    1.78   YeoJohnson_qjRmV #> 4 nitrogen -0.830  YeoJohnson_qjRmV #> 5 sulfur   -4.09   YeoJohnson_qjRmV #> 6 HHV      -0.388  YeoJohnson_qjRmV"},{"path":"https://recipes.tidymodels.org/dev/reference/step_arrange.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort rows using dplyr ‚Äî step_arrange","title":"Sort rows using dplyr ‚Äî step_arrange","text":"step_arrange() creates specification recipe step sort rows using dplyr::arrange().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_arrange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort rows using dplyr ‚Äî step_arrange","text":"","code":"step_arrange(   recipe,   ...,   role = NA,   trained = FALSE,   inputs = NULL,   skip = FALSE,   id = rand_id(\"arrange\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_arrange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort rows using dplyr ‚Äî step_arrange","text":"recipe recipe object. step added sequence operations recipe. ... Comma separated list unquoted variable names. Use `desc()‚Äú sort variable descending order. See dplyr::arrange() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. inputs Quosure values given .... skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_arrange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort rows using dplyr ‚Äî step_arrange","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_arrange.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sort rows using dplyr ‚Äî step_arrange","text":"object user's global environment referenced expression defining new variable(s), good idea use quasiquotation (e.g. !!!) embed value object expression (portable sessions). See examples.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_arrange.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Sort rows using dplyr ‚Äî step_arrange","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_arrange.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Sort rows using dplyr ‚Äî step_arrange","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_arrange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort rows using dplyr ‚Äî step_arrange","text":"","code":"rec <- recipe(~., data = iris) %>%   step_arrange(desc(Sepal.Length), 1 / Petal.Length)  prepped <- prep(rec, training = iris %>% slice(1:75)) tidy(prepped, number = 1) #> # A tibble: 2 √ó 2 #>   terms              id            #>   <chr>              <chr>         #> 1 desc(Sepal.Length) arrange_MuJac #> 2 1/Petal.Length     arrange_MuJac  library(dplyr)  dplyr_train <-   iris %>%   as_tibble() %>%   slice(1:75) %>%   dplyr::arrange(desc(Sepal.Length), 1 / Petal.Length)  rec_train <- bake(prepped, new_data = NULL) all.equal(dplyr_train, rec_train) #> [1] TRUE  dplyr_test <-   iris %>%   as_tibble() %>%   slice(76:150) %>%   dplyr::arrange(desc(Sepal.Length), 1 / Petal.Length) rec_test <- bake(prepped, iris %>% slice(76:150)) all.equal(dplyr_test, rec_test) #> [1] TRUE  # When you have variables/expressions, you can create a # list of symbols with `rlang::syms()`` and splice them in # the call with `!!!`. See https://tidyeval.tidyverse.org  sort_vars <- c(\"Sepal.Length\", \"Petal.Length\")  qq_rec <-   recipe(~., data = iris) %>%   # Embed the `values` object in the call using !!!   step_arrange(!!!syms(sort_vars)) %>%   prep(training = iris)  tidy(qq_rec, number = 1) #> # A tibble: 2 √ó 2 #>   terms        id            #>   <chr>        <chr>         #> 1 Sepal.Length arrange_gWfAl #> 2 Petal.Length arrange_gWfAl"},{"path":"https://recipes.tidymodels.org/dev/reference/step_bagimpute.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute via bagged trees ‚Äî step_bagimpute","title":"Impute via bagged trees ‚Äî step_bagimpute","text":"Please use step_impute_bag() instead.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_bagimpute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute via bagged trees ‚Äî step_bagimpute","text":"","code":"step_bagimpute(   recipe,   ...,   role = NA,   trained = FALSE,   impute_with = imp_vars(all_predictors()),   trees = 25,   models = NULL,   options = list(keepX = FALSE),   seed_val = sample.int(10^4, 1),   skip = FALSE,   id = rand_id(\"impute_bag\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_bin2factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a factors from A dummy variable ‚Äî step_bin2factor","title":"Create a factors from A dummy variable ‚Äî step_bin2factor","text":"step_bin2factor() creates specification recipe step create two-level factor single dummy variable.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_bin2factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a factors from A dummy variable ‚Äî step_bin2factor","text":"","code":"step_bin2factor(   recipe,   ...,   role = NA,   trained = FALSE,   levels = c(\"yes\", \"no\"),   ref_first = TRUE,   columns = NULL,   skip = FALSE,   id = rand_id(\"bin2factor\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_bin2factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a factors from A dummy variable ‚Äî step_bin2factor","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. levels length 2 character string indicates factor levels 1's (first position) zeros (second) ref_first Logical. first level, replaces 1's, factor reference level? columns character string selected variable names. field placeholder populated prep() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_bin2factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a factors from A dummy variable ‚Äî step_bin2factor","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_bin2factor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a factors from A dummy variable ‚Äî step_bin2factor","text":"operation may useful situations binary piece information may need represented categorical instead numeric. example, naive Bayes models better factor predictors binomial distribution modeled instead Gaussian probability density numeric binary data. Note numeric data verified numeric (count levels).","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_bin2factor.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Create a factors from A dummy variable ‚Äî step_bin2factor","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_bin2factor.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Create a factors from A dummy variable ‚Äî step_bin2factor","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_bin2factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a factors from A dummy variable ‚Äî step_bin2factor","text":"","code":"data(covers, package = \"modeldata\")  rec <- recipe(~description, covers) %>%   step_regex(description, pattern = \"(rock|stony)\", result = \"rocks\") %>%   step_regex(description, pattern = \"(rock|stony)\", result = \"more_rocks\") %>%   step_bin2factor(rocks)  tidy(rec, number = 3) #> # A tibble: 1 √ó 2 #>   terms id               #>   <chr> <chr>            #> 1 rocks bin2factor_MkPN1  rec <- prep(rec, training = covers) results <- bake(rec, new_data = covers)  table(results$rocks, results$more_rocks) #>       #>        0  1 #>   yes  0 29 #>   no  11  0  tidy(rec, number = 3) #> # A tibble: 1 √ó 2 #>   terms id               #>   <chr> <chr>            #> 1 rocks bin2factor_MkPN1"},{"path":"https://recipes.tidymodels.org/dev/reference/step_bs.html","id":null,"dir":"Reference","previous_headings":"","what":"B-spline basis functions ‚Äî step_bs","title":"B-spline basis functions ‚Äî step_bs","text":"step_bs() creates specification recipe step create new columns basis expansions variables using B-splines.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_bs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"B-spline basis functions ‚Äî step_bs","text":"","code":"step_bs(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   deg_free = NULL,   degree = 3,   objects = NULL,   options = list(),   keep_original_cols = FALSE,   skip = FALSE,   id = rand_id(\"bs\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_bs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"B-spline basis functions ‚Äî step_bs","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. deg_free degrees freedom spline. degrees freedom spline increase, flexible complex curves can generated. single degree freedom used, result rescaled version original data. degree Degree polynomial spline (integer). objects list splines::bs() objects created step trained. options list options splines::bs() include x, degree, df. keep_original_cols logical keep original variables output. Defaults FALSE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_bs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"B-spline basis functions ‚Äî step_bs","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_bs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"B-spline basis functions ‚Äî step_bs","text":"step_bs can create new features single variable enable fitting routines model variable nonlinear manner. extent possible nonlinearity determined df, degree, knots arguments splines::bs(). original variables removed data new columns added. naming convention new variables varname_bs_1 .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_bs.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"B-spline basis functions ‚Äî step_bs","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_bs.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"B-spline basis functions ‚Äî step_bs","text":"step 2 tuning parameters: deg_free: Spline Degrees Freedom (type: integer, default: NULL) degree: Polynomial Degree (type: integer, default: 3)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_bs.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"B-spline basis functions ‚Äî step_bs","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_bs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"B-spline basis functions ‚Äî step_bs","text":"","code":"data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  with_splines <- rec %>%   step_bs(carbon, hydrogen) with_splines <- prep(with_splines, training = biomass_tr)  expanded <- bake(with_splines, biomass_te) expanded #> # A tibble: 80 √ó 10 #>    oxygen nitrogen sulfur   HHV carbon_bs_1 carbon_bs_2 carbon_bs_3 #>     <dbl>    <dbl>  <dbl> <dbl>       <dbl>       <dbl>       <dbl> #>  1   47.2     0.3    0.22  18.3       0.437      0.273      0.0568  #>  2   48.1     2.85   0.34  17.6       0.444      0.236      0.0417  #>  3   49.1     2.4    0.3   17.2       0.444      0.229      0.0394  #>  4   37.3     1.8    0.5   18.9       0.437      0.273      0.0571  #>  5   42.8     0.2    0     20.5       0.427      0.301      0.0707  #>  6   41.7     0.7    0.2   18.5       0.442      0.248      0.0465  #>  7   54.1     1.19   0.51  15.1       0.440      0.184      0.0256  #>  8   33.8     0.95   0.2   16.2       0.444      0.222      0.0369  #>  9   31.1     0.14   4.9   11.1       0.359      0.0771     0.00552 #> 10   23.7     4.63   1.05  10.8       0.338      0.0643     0.00408 #> # ‚Ñπ 70 more rows #> # ‚Ñπ 3 more variables: hydrogen_bs_1 <dbl>, hydrogen_bs_2 <dbl>, #> #   hydrogen_bs_3 <dbl>"},{"path":"https://recipes.tidymodels.org/dev/reference/step_center.html","id":null,"dir":"Reference","previous_headings":"","what":"Centering numeric data ‚Äî step_center","title":"Centering numeric data ‚Äî step_center","text":"step_center() creates specification recipe step normalize numeric data mean zero.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_center.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centering numeric data ‚Äî step_center","text":"","code":"step_center(   recipe,   ...,   role = NA,   trained = FALSE,   means = NULL,   na_rm = TRUE,   skip = FALSE,   id = rand_id(\"center\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_center.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Centering numeric data ‚Äî step_center","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. means named numeric vector means. NULL computed prep(). na_rm logical value indicating whether NA values removed computations. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_center.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Centering numeric data ‚Äî step_center","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_center.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Centering numeric data ‚Äî step_center","text":"Centering data means average variable subtracted data. step_center estimates variable means data used training argument prep.recipe. bake.recipe applies centering new data sets using means.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_center.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Centering numeric data ‚Äî step_center","text":"tidy() step, tibble returned columns terms, value, id: terms character, selectors variables selected value numeric, means id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_center.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Centering numeric data ‚Äî step_center","text":"step performs unsupervised operation can utilize case weights. result, case weights used frequency weights. information, see documentation case_weights examples tidymodels.org.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_center.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Centering numeric data ‚Äî step_center","text":"","code":"data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  center_trans <- rec %>%   step_center(carbon, contains(\"gen\"), -hydrogen)  center_obj <- prep(center_trans, training = biomass_tr)  transformed_te <- bake(center_obj, biomass_te)  biomass_te[1:10, names(transformed_te)] #>    carbon hydrogen oxygen nitrogen sulfur    HHV #> 15  46.35     5.67  47.20     0.30   0.22 18.275 #> 20  43.25     5.50  48.06     2.85   0.34 17.560 #> 26  42.70     5.50  49.10     2.40   0.30 17.173 #> 31  46.40     6.10  37.30     1.80   0.50 18.851 #> 36  48.76     6.32  42.77     0.20   0.00 20.547 #> 41  44.30     5.50  41.70     0.70   0.20 18.467 #> 46  38.94     5.23  54.13     1.19   0.51 15.095 #> 51  42.10     4.66  33.80     0.95   0.20 16.240 #> 55  29.20     4.40  31.10     0.14   4.90 11.147 #> 65  27.80     3.77  23.69     4.63   1.05 10.750 transformed_te #> # A tibble: 80 √ó 6 #>     carbon hydrogen oxygen nitrogen sulfur   HHV #>      <dbl>    <dbl>  <dbl>    <dbl>  <dbl> <dbl> #>  1  -2.00      5.67   8.68   -0.775   0.22  18.3 #>  2  -5.10      5.5    9.54    1.78    0.34  17.6 #>  3  -5.65      5.5   10.6     1.33    0.3   17.2 #>  4  -1.95      6.1   -1.22    0.725   0.5   18.9 #>  5   0.406     6.32   4.25   -0.875   0     20.5 #>  6  -4.05      5.5    3.18   -0.375   0.2   18.5 #>  7  -9.41      5.23  15.6     0.115   0.51  15.1 #>  8  -6.25      4.66  -4.72   -0.125   0.2   16.2 #>  9 -19.2       4.4   -7.42   -0.935   4.9   11.1 #> 10 -20.6       3.77 -14.8     3.56    1.05  10.8 #> # ‚Ñπ 70 more rows  tidy(center_trans, number = 1) #> # A tibble: 3 √ó 3 #>   terms               value id           #>   <chr>               <dbl> <chr>        #> 1 \"carbon\"               NA center_nb4eY #> 2 \"contains(\\\"gen\\\")\"    NA center_nb4eY #> 3 \"-hydrogen\"            NA center_nb4eY tidy(center_obj, number = 1) #> # A tibble: 3 √ó 3 #>   terms    value id           #>   <chr>    <dbl> <chr>        #> 1 carbon   48.4  center_nb4eY #> 2 oxygen   38.5  center_nb4eY #> 3 nitrogen  1.07 center_nb4eY"},{"path":"https://recipes.tidymodels.org/dev/reference/step_classdist.html","id":null,"dir":"Reference","previous_headings":"","what":"Distances to class centroids ‚Äî step_classdist","title":"Distances to class centroids ‚Äî step_classdist","text":"step_classdist() creates specification recipe step convert numeric data Mahalanobis distance measurements data centroid. done value categorical class variable.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_classdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distances to class centroids ‚Äî step_classdist","text":"","code":"step_classdist(   recipe,   ...,   class,   role = \"predictor\",   trained = FALSE,   mean_func = mean,   cov_func = cov,   pool = FALSE,   log = TRUE,   objects = NULL,   prefix = \"classdist_\",   keep_original_cols = TRUE,   skip = FALSE,   id = rand_id(\"classdist\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_classdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distances to class centroids ‚Äî step_classdist","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. class single character string specifies single categorical variable used class. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. mean_func function compute center distribution. cov_func function computes covariance matrix pool logical: covariance matrix computed pooling data classes? log logical: distances transformed natural log function? objects Statistics stored step trained prep(). prefix character string prefix resulting new variables. See notes . keep_original_cols logical keep original variables output. Defaults TRUE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_classdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distances to class centroids ‚Äî step_classdist","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_classdist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distances to class centroids ‚Äî step_classdist","text":"step_classdist create new column every unique value class variable. resulting variables replace original values , default, prefix classdist_. naming format can changed using prefix argument. Class-specific centroids multivariate averages predictor using data class training set. pre-processing new data point, step computes distance new point class centroids. distance features can effective capturing linear class boundaries. reason, can useful add existing predictor set used within nonlinear model. true boundary actually linear, model easier time learning training data patterns. Note , default, default covariance function requires class least many rows variables listed terms argument. pool = TRUE, must least many data points variables overall.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_classdist.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Distances to class centroids ‚Äî step_classdist","text":"tidy() step, tibble returned columns terms, value, class , id: terms character, selectors variables selected value numeric, location centroid class character, name class id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_classdist.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Distances to class centroids ‚Äî step_classdist","text":"step performs supervised operation can utilize case weights. result, case weights used frequency weights well importance weights. information,, see documentation case_weights examples tidymodels.org.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_classdist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distances to class centroids ‚Äî step_classdist","text":"","code":"data(penguins, package = \"modeldata\") penguins <- penguins[complete.cases(penguins), ] penguins$island <- NULL penguins$sex <- NULL  # in case of missing data... mean2 <- function(x) mean(x, na.rm = TRUE)  # define naming convention rec <- recipe(species ~ ., data = penguins) %>%   step_classdist(all_numeric_predictors(),     class = \"species\",     pool = FALSE, mean_func = mean2, prefix = \"centroid_\"   )  # default naming rec <- recipe(species ~ ., data = penguins) %>%   step_classdist(all_numeric_predictors(),     class = \"species\",     pool = FALSE, mean_func = mean2   )  rec_dists <- prep(rec, training = penguins)  dists_to_species <- bake(rec_dists, new_data = penguins) ## on log scale: dist_cols <- grep(\"classdist\", names(dists_to_species), value = TRUE) dists_to_species[, c(\"species\", dist_cols)] #> # A tibble: 333 √ó 4 #>    species classdist_Adelie classdist_Chinstrap classdist_Gentoo #>    <fct>              <dbl>               <dbl>            <dbl> #>  1 Adelie             1.04                 3.19             5.10 #>  2 Adelie             0.670                2.61             4.61 #>  3 Adelie             1.45                 2.39             4.68 #>  4 Adelie             1.20                 3.42             5.08 #>  5 Adelie             1.72                 3.57             5.35 #>  6 Adelie             0.903                2.87             4.90 #>  7 Adelie             1.78                 3.61             4.89 #>  8 Adelie             1.66                 2.17             4.88 #>  9 Adelie             2.05                 3.85             5.45 #> 10 Adelie             2.72                 4.24             5.35 #> # ‚Ñπ 323 more rows  tidy(rec, number = 1) #> # A tibble: 1 √ó 4 #>   terms                    value class id              #>   <chr>                    <dbl> <chr> <chr>           #> 1 all_numeric_predictors()    NA NA    classdist_s3Z4q tidy(rec_dists, number = 1) #> # A tibble: 12 √ó 4 #>    terms              value class     id              #>    <chr>              <dbl> <chr>     <chr>           #>  1 bill_length_mm      38.8 Adelie    classdist_s3Z4q #>  2 bill_depth_mm       18.3 Adelie    classdist_s3Z4q #>  3 flipper_length_mm  190.  Adelie    classdist_s3Z4q #>  4 body_mass_g       3706.  Adelie    classdist_s3Z4q #>  5 bill_length_mm      48.8 Chinstrap classdist_s3Z4q #>  6 bill_depth_mm       18.4 Chinstrap classdist_s3Z4q #>  7 flipper_length_mm  196.  Chinstrap classdist_s3Z4q #>  8 body_mass_g       3733.  Chinstrap classdist_s3Z4q #>  9 bill_length_mm      47.6 Gentoo    classdist_s3Z4q #> 10 bill_depth_mm       15.0 Gentoo    classdist_s3Z4q #> 11 flipper_length_mm  217.  Gentoo    classdist_s3Z4q #> 12 body_mass_g       5092.  Gentoo    classdist_s3Z4q"},{"path":"https://recipes.tidymodels.org/dev/reference/step_classdist_shrunken.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute shrunken centroid distances for classification models ‚Äî step_classdist_shrunken","title":"Compute shrunken centroid distances for classification models ‚Äî step_classdist_shrunken","text":"step_classdist_shrunken creates specification recipe step  convert numeric data Euclidean distance regularized class centroid. done value categorical class variable.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_classdist_shrunken.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute shrunken centroid distances for classification models ‚Äî step_classdist_shrunken","text":"","code":"step_classdist_shrunken(   recipe,   ...,   class = NULL,   role = NA,   trained = FALSE,   threshold = 1/2,   sd_offset = 1/2,   log = TRUE,   prefix = \"classdist_\",   keep_original_cols = TRUE,   objects = NULL,   skip = FALSE,   id = rand_id(\"classdist_shrunken\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_classdist_shrunken.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute shrunken centroid distances for classification models ‚Äî step_classdist_shrunken","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. class single character string specifies single categorical variable used class. role used step since new variables created. trained logical indicate quantities preprocessing estimated. threshold regularization parameter zero one. Zero means regularization used one means centroids shrunk global centroid. sd_offset value zero one quantile used stabilize pooled standard deviation. log logical: distances transformed natural log function? prefix character string prefix resulting new variables. See notes . keep_original_cols logical keep original variables output. Defaults TRUE. objects Statistics stored step trained prep(). skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_classdist_shrunken.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute shrunken centroid distances for classification models ‚Äî step_classdist_shrunken","text":"Class-specific centroids multivariate averages predictor using data class training set. pre-processing new data point, step computes distance new point class centroids. distance features can effective capturing linear class boundaries. reason, can useful add existing predictor set used within nonlinear model. true boundary actually linear, model easier time learning training data patterns. Shrunken centroids use form regularization class-specific centroids contracted overall class-independent centroid. predictor uninformative, shrinking may move entirely overall centroid. effect removing predictor's effect new distance features. However, may move class-specific features center many cases. means features affect classification specific classes. threshold parameter can used optimized much regularization used. step_classdist_shrunken create new column every unique value class variable. resulting variables replace original values , default, prefix classdist_. naming format can changed using prefix argument.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_classdist_shrunken.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Compute shrunken centroid distances for classification models ‚Äî step_classdist_shrunken","text":"tidy() step, tibble returned columns terms, value, class, type, threshold , id: terms character, selectors variables selected value numeric, centroid class character, name class variable type character, values \"global\", \"by_class\", \"shrunken\" threshold numeric, value threshold id character, id step first two types centroids original units last standardized.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_classdist_shrunken.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Compute shrunken centroid distances for classification models ‚Äî step_classdist_shrunken","text":"step performs supervised operation can utilize case weights. result, case weights used frequency weights well importance weights. information,, see documentation case_weights examples tidymodels.org.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_classdist_shrunken.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute shrunken centroid distances for classification models ‚Äî step_classdist_shrunken","text":"Tibshirani, R., Hastie, T., Narasimhan, B., & Chu, G. (2002). Diagnosis multiple cancer types shrunken centroids gene expression. Proceedings National Academy Sciences, 99(10), 6567-6572.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_classdist_shrunken.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute shrunken centroid distances for classification models ‚Äî step_classdist_shrunken","text":"","code":"data(penguins, package = \"modeldata\") penguins <- penguins[complete.cases(penguins), ] penguins$island <- NULL penguins$sex <- NULL  # define naming convention rec <- recipe(species ~ ., data = penguins) %>%   step_classdist_shrunken(all_numeric_predictors(),     class = \"species\",     threshold = 1 / 4, prefix = \"centroid_\"   )  # default naming rec <- recipe(species ~ ., data = penguins) %>%   step_classdist_shrunken(all_numeric_predictors(),     class = \"species\",     threshold = 3 / 4   )  rec_dists <- prep(rec, training = penguins)  dists_to_species <- bake(rec_dists, new_data = penguins) ## on log scale: dist_cols <- grep(\"classdist\", names(dists_to_species), value = TRUE) dists_to_species[, c(\"species\", dist_cols)] #> # A tibble: 333 √ó 4 #>    species classdist_Adelie classdist_Gentoo classdist_Chinstrap #>    <fct>              <dbl>            <dbl>               <dbl> #>  1 Adelie             1.49            1.72                 1.49  #>  2 Adelie             1.03            1.35                 1.03  #>  3 Adelie             1.56            1.93                 1.56  #>  4 Adelie             1.42            1.78                 1.42  #>  5 Adelie             1.11            1.48                 1.11  #>  6 Adelie             1.61            1.86                 1.61  #>  7 Adelie             0.602           0.0916               0.602 #>  8 Adelie             2.02            2.29                 2.02  #>  9 Adelie             0.898           1.26                 0.898 #> 10 Adelie             0.756           0.673                0.756 #> # ‚Ñπ 323 more rows  tidy(rec, number = 1) #> # A tibble: 1 √ó 6 #>   terms                    value class type  threshold id                  #>   <chr>                    <dbl> <chr> <chr>     <dbl> <chr>               #> 1 all_numeric_predictors()    NA NA    NA           NA classdist_shrunken‚Ä¶ tidy(rec_dists, number = 1) #> # A tibble: 36 √ó 6 #>    terms          value class     type     threshold id                    #>    <chr>          <dbl> <chr>     <chr>        <dbl> <chr>                 #>  1 bill_length_mm  44.0 Adelie    global        0.75 classdist_shrunken_j‚Ä¶ #>  2 bill_length_mm  38.8 Adelie    by_class      0.75 classdist_shrunken_j‚Ä¶ #>  3 bill_length_mm   0   Adelie    shrunken      0.75 classdist_shrunken_j‚Ä¶ #>  4 bill_length_mm  44.0 Gentoo    global        0.75 classdist_shrunken_j‚Ä¶ #>  5 bill_length_mm  47.6 Gentoo    by_class      0.75 classdist_shrunken_j‚Ä¶ #>  6 bill_length_mm   0   Gentoo    shrunken      0.75 classdist_shrunken_j‚Ä¶ #>  7 bill_length_mm  44.0 Chinstrap global        0.75 classdist_shrunken_j‚Ä¶ #>  8 bill_length_mm  48.8 Chinstrap by_class      0.75 classdist_shrunken_j‚Ä¶ #>  9 bill_length_mm   0   Chinstrap shrunken      0.75 classdist_shrunken_j‚Ä¶ #> 10 bill_depth_mm   17.2 Adelie    global        0.75 classdist_shrunken_j‚Ä¶ #> # ‚Ñπ 26 more rows"},{"path":"https://recipes.tidymodels.org/dev/reference/step_corr.html","id":null,"dir":"Reference","previous_headings":"","what":"High correlation filter ‚Äî step_corr","title":"High correlation filter ‚Äî step_corr","text":"step_corr() creates specification recipe step potentially remove variables large absolute correlations variables.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_corr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"High correlation filter ‚Äî step_corr","text":"","code":"step_corr(   recipe,   ...,   role = NA,   trained = FALSE,   threshold = 0.9,   use = \"pairwise.complete.obs\",   method = \"pearson\",   removals = NULL,   skip = FALSE,   id = rand_id(\"corr\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_corr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"High correlation filter ‚Äî step_corr","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. threshold value threshold absolute correlation values. step try remove minimum number columns resulting absolute correlations less value. use character string use argument stats::cor() function. method character string method argument stats::cor() function. removals character string contains names columns removed. values determined prep() called. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_corr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"High correlation filter ‚Äî step_corr","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_corr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"High correlation filter ‚Äî step_corr","text":"step can potentially remove columns data set. may cause issues subsequent steps recipe missing columns specifically referenced name. avoid , see advice Tips saving recipes filtering columns section selections. step attempts remove variables keep largest absolute correlation variables less threshold. column single unique value, column excluded correlation analysis. Also, data set sporadic missing values (inappropriate value use chosen), columns also excluded filter. arguments use method take effect case weights used recipe.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_corr.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"High correlation filter ‚Äî step_corr","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected removed id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_corr.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"High correlation filter ‚Äî step_corr","text":"step 1 tuning parameters: threshold: Threshold (type: double, default: 0.9)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_corr.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"High correlation filter ‚Äî step_corr","text":"step performs unsupervised operation can utilize case weights. result, case weights used frequency weights. information, see documentation case_weights examples tidymodels.org.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_corr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"High correlation filter ‚Äî step_corr","text":"Original R code filtering algorithm Dong Li, modified Max Kuhn. Contributions Reynald Lescarbeau (original caret package). Max Kuhn step function.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_corr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"High correlation filter ‚Äî step_corr","text":"","code":"data(biomass, package = \"modeldata\")  set.seed(3535) biomass$duplicate <- biomass$carbon + rnorm(nrow(biomass))  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur + duplicate,   data = biomass_tr )  corr_filter <- rec %>%   step_corr(all_numeric_predictors(), threshold = .5)  filter_obj <- prep(corr_filter, training = biomass_tr)  filtered_te <- bake(filter_obj, biomass_te) round(abs(cor(biomass_tr[, c(3:7, 9)])), 2) #>           carbon hydrogen oxygen nitrogen sulfur duplicate #> carbon      1.00     0.32   0.63     0.15   0.09      1.00 #> hydrogen    0.32     1.00   0.54     0.07   0.19      0.31 #> oxygen      0.63     0.54   1.00     0.18   0.31      0.63 #> nitrogen    0.15     0.07   0.18     1.00   0.27      0.15 #> sulfur      0.09     0.19   0.31     0.27   1.00      0.10 #> duplicate   1.00     0.31   0.63     0.15   0.10      1.00 round(abs(cor(filtered_te)), 2) #>           hydrogen nitrogen sulfur duplicate  HHV #> hydrogen      1.00     0.11   0.26      0.20 0.10 #> nitrogen      0.11     1.00   0.16      0.13 0.11 #> sulfur        0.26     0.16   1.00      0.13 0.08 #> duplicate     0.20     0.13   0.13      1.00 0.94 #> HHV           0.10     0.11   0.08      0.94 1.00  tidy(corr_filter, number = 1) #> # A tibble: 1 √ó 2 #>   terms                    id         #>   <chr>                    <chr>      #> 1 all_numeric_predictors() corr_ubc7G tidy(filter_obj, number = 1) #> # A tibble: 2 √ó 2 #>   terms  id         #>   <chr>  <chr>      #> 1 oxygen corr_ubc7G #> 2 carbon corr_ubc7G"},{"path":"https://recipes.tidymodels.org/dev/reference/step_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Create counts of patterns using regular expressions ‚Äî step_count","title":"Create counts of patterns using regular expressions ‚Äî step_count","text":"step_count() creates specification recipe step create variable counts instances regular expression pattern text.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create counts of patterns using regular expressions ‚Äî step_count","text":"","code":"step_count(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   pattern = \".\",   normalize = FALSE,   options = list(),   result = make.names(pattern),   input = NULL,   keep_original_cols = TRUE,   skip = FALSE,   id = rand_id(\"count\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create counts of patterns using regular expressions ‚Äî step_count","text":"recipe recipe object. step added sequence operations recipe. ... single selector function choose variable searched regex pattern. selector resolve single variable. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. pattern character string containing regular expression (character string fixed = TRUE) matched given character vector. Coerced .character character string possible. normalize logical; integer counts divided total number characters string?. options list options gregexpr() include x pattern. result single character value name new variable. valid column name. input single character value name variable searched. NULL computed prep(). keep_original_cols logical keep original variables output. Defaults TRUE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create counts of patterns using regular expressions ‚Äî step_count","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_count.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Create counts of patterns using regular expressions ‚Äî step_count","text":"tidy() step, tibble returned columns terms, result , id: terms character, selectors variables selected result character, new column names id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_count.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Create counts of patterns using regular expressions ‚Äî step_count","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create counts of patterns using regular expressions ‚Äî step_count","text":"","code":"data(covers, package = \"modeldata\")  rec <- recipe(~description, covers) %>%   step_count(description, pattern = \"(rock|stony)\", result = \"rocks\") %>%   step_count(description, pattern = \"famil\", normalize = TRUE)  rec2 <- prep(rec, training = covers) rec2 #>  #> ‚îÄ‚îÄ Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> predictor: 1 #>  #> ‚îÄ‚îÄ Training information  #> Training data contained 40 data points and no incomplete rows. #>  #> ‚îÄ‚îÄ Operations  #> ‚Ä¢ Regular expression counts using: description | Trained #> ‚Ä¢ Regular expression counts using: description | Trained  count_values <- bake(rec2, new_data = covers) count_values #> # A tibble: 40 √ó 3 #>    description                                                rocks  famil #>    <fct>                                                      <int>  <dbl> #>  1 1,cathedral family,rock outcrop complex,extremely stony        2 0.0182 #>  2 2,vanet,ratake families complex,very stony                     1 0.0238 #>  3 3,haploborolis,rock outcrop complex,rubbly                     1 0      #>  4 4,ratake family,rock outcrop complex,rubbly                    1 0.0233 #>  5 5,vanet family,rock outcrop complex complex,rubbly             1 0.02   #>  6 6,vanet,wetmore families,rock outcrop complex,stony            2 0.0196 #>  7 7,gothic family                                                0 0.0667 #>  8 8,supervisor,limber families complex                           0 0.0278 #>  9 9,troutville family,very stony                                 1 0.0333 #> 10 10,bullwark,catamount families,rock outcrop complex,rubbly     1 0.0172 #> # ‚Ñπ 30 more rows  tidy(rec, number = 1) #> # A tibble: 1 √ó 3 #>   terms       result id          #>   <chr>       <chr>  <chr>       #> 1 description NA     count_HX7KJ tidy(rec2, number = 1) #> # A tibble: 1 √ó 3 #>   terms       result id          #>   <chr>       <chr>  <chr>       #> 1 description rocks  count_HX7KJ"},{"path":"https://recipes.tidymodels.org/dev/reference/step_cut.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut a numeric variable into a factor ‚Äî step_cut","title":"Cut a numeric variable into a factor ‚Äî step_cut","text":"step_cut() creates specification recipe step cuts numeric variable factor based provided boundary values.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_cut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut a numeric variable into a factor ‚Äî step_cut","text":"","code":"step_cut(   recipe,   ...,   role = NA,   trained = FALSE,   breaks,   include_outside_range = FALSE,   skip = FALSE,   id = rand_id(\"cut\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_cut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut a numeric variable into a factor ‚Äî step_cut","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. breaks numeric vector least one cut point. include_outside_range Logical, indicating values outside range train set included lowest highest bucket. Defaults FALSE, values outside original range set NA. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_cut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut a numeric variable into a factor ‚Äî step_cut","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_cut.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cut a numeric variable into a factor ‚Äî step_cut","text":"Unlike base::cut() function need specify min max values breaks. values lowest break point end first bucket, values last break points end last. step_cut() call base::cut() baking step include.lowest set TRUE.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_cut.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Cut a numeric variable into a factor ‚Äî step_cut","text":"tidy() step, tibble returned columns terms, value , id: terms character, selectors variables selected value numeric, location cuts id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_cut.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Cut a numeric variable into a factor ‚Äî step_cut","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_cut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut a numeric variable into a factor ‚Äî step_cut","text":"","code":"df <- data.frame(x = 1:10, y = 5:14) rec <- recipe(df)  # The min and max of the variable are used as boundaries # if they exceed the breaks rec %>%   step_cut(x, breaks = 5) %>%   prep() %>%   bake(df) #> # A tibble: 10 √ó 2 #>    x          y #>    <fct>  <int> #>  1 [1,5]      5 #>  2 [1,5]      6 #>  3 [1,5]      7 #>  4 [1,5]      8 #>  5 [1,5]      9 #>  6 (5,10]    10 #>  7 (5,10]    11 #>  8 (5,10]    12 #>  9 (5,10]    13 #> 10 (5,10]    14  # You can use the same breaks on multiple variables # then for each variable the boundaries are set separately rec %>%   step_cut(x, y, breaks = c(6, 9)) %>%   prep() %>%   bake(df) #> # A tibble: 10 √ó 2 #>    x      y      #>    <fct>  <fct>  #>  1 [1,6]  [5,6]  #>  2 [1,6]  [5,6]  #>  3 [1,6]  (6,9]  #>  4 [1,6]  (6,9]  #>  5 [1,6]  (6,9]  #>  6 [1,6]  (9,14] #>  7 (6,9]  (9,14] #>  8 (6,9]  (9,14] #>  9 (6,9]  (9,14] #> 10 (9,10] (9,14]  # You can keep the original variables using `step_mutate` or # `step_mutate_at`, for transforming multiple variables at once rec %>%   step_mutate(x_orig = x) %>%   step_cut(x, breaks = 5) %>%   prep() %>%   bake(df) #> # A tibble: 10 √ó 3 #>    x          y x_orig #>    <fct>  <int>  <int> #>  1 [1,5]      5      1 #>  2 [1,5]      6      2 #>  3 [1,5]      7      3 #>  4 [1,5]      8      4 #>  5 [1,5]      9      5 #>  6 (5,10]    10      6 #>  7 (5,10]    11      7 #>  8 (5,10]    12      8 #>  9 (5,10]    13      9 #> 10 (5,10]    14     10  # It is up to you if you want values outside the # range learned at prep to be included new_df <- data.frame(x = 1:11, y = 5:15) rec %>%   step_cut(x, breaks = 5, include_outside_range = TRUE) %>%   prep() %>%   bake(new_df) #> # A tibble: 11 √ó 2 #>    x           y #>    <fct>   <int> #>  1 [min,5]     5 #>  2 [min,5]     6 #>  3 [min,5]     7 #>  4 [min,5]     8 #>  5 [min,5]     9 #>  6 (5,max]    10 #>  7 (5,max]    11 #>  8 (5,max]    12 #>  9 (5,max]    13 #> 10 (5,max]    14 #> 11 (5,max]    15  rec %>%   step_cut(x, breaks = 5, include_outside_range = FALSE) %>%   prep() %>%   bake(new_df) #> # A tibble: 11 √ó 2 #>    x          y #>    <fct>  <int> #>  1 [1,5]      5 #>  2 [1,5]      6 #>  3 [1,5]      7 #>  4 [1,5]      8 #>  5 [1,5]      9 #>  6 (5,10]    10 #>  7 (5,10]    11 #>  8 (5,10]    12 #>  9 (5,10]    13 #> 10 (5,10]    14 #> 11 NA        15"},{"path":"https://recipes.tidymodels.org/dev/reference/step_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Date feature generator ‚Äî step_date","title":"Date feature generator ‚Äî step_date","text":"step_date() creates specification recipe step convert date data one factor numeric variables.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date feature generator ‚Äî step_date","text":"","code":"step_date(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   features = c(\"dow\", \"month\", \"year\"),   abbr = TRUE,   label = TRUE,   ordinal = FALSE,   locale = clock::clock_locale()$labels,   columns = NULL,   keep_original_cols = TRUE,   skip = FALSE,   id = rand_id(\"date\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date feature generator ‚Äî step_date","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. selected variables class Date POSIXct. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. features character string includes least one following values: month, dow (day week), mday (day month), doy (day year), week, month, decimal (decimal date, e.g. 2002.197), quarter, semester, year. abbr logical. available features month dow. FALSE display day week ordered factor character strings, \"Sunday\". TRUE display abbreviated version label, \"Sun\". abbr disregarded label = FALSE. label logical. available features month dow. TRUE display day week ordered factor character strings, \"Sunday.\" FALSE display day week number. ordinal logical: factors ordered? available features month dow. locale Locale used month dow, see locales. Linux systems can use system(\"locale -\") list installed locales. Can locales string, clock::clock_labels() object. Defaults clock::clock_locale()$labels. columns character string selected variable names. field placeholder populated prep() used. keep_original_cols logical keep original variables output. Defaults TRUE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date feature generator ‚Äî step_date","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Date feature generator ‚Äî step_date","text":"Unlike steps, step_date remove original date variables default. Set keep_original_cols FALSE remove . See step_time() want calculate features smaller days.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_date.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Date feature generator ‚Äî step_date","text":"tidy() step, tibble columns terms (selectors variables selected), value (feature names), ordinal (logical) returned. tidy() step, tibble returned columns terms, value, ordinal , id: terms character, selectors variables selected value character, feature names ordinal logical, factors ordered id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_date.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Date feature generator ‚Äî step_date","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date feature generator ‚Äî step_date","text":"","code":"library(lubridate) #>  #> Attaching package: ‚Äòlubridate‚Äô #> The following objects are masked from ‚Äòpackage:base‚Äô: #>  #>     date, intersect, setdiff, union  examples <- data.frame(   Dan = ymd(\"2002-03-04\") + days(1:10),   Stefan = ymd(\"2006-01-13\") + days(1:10) ) date_rec <- recipe(~ Dan + Stefan, examples) %>%   step_date(all_predictors())  tidy(date_rec, number = 1) #> # A tibble: 3 √ó 4 #>   terms            value ordinal id         #>   <chr>            <chr> <lgl>   <chr>      #> 1 all_predictors() dow   FALSE   date_vUNsj #> 2 all_predictors() month FALSE   date_vUNsj #> 3 all_predictors() year  FALSE   date_vUNsj  date_rec <- prep(date_rec, training = examples)  date_values <- bake(date_rec, new_data = examples) date_values #> # A tibble: 10 √ó 8 #>    Dan        Stefan     Dan_dow Dan_month Dan_year Stefan_dow #>    <date>     <date>     <fct>   <fct>        <int> <fct>      #>  1 2002-03-05 2006-01-14 Tue     Mar           2002 Sat        #>  2 2002-03-06 2006-01-15 Wed     Mar           2002 Sun        #>  3 2002-03-07 2006-01-16 Thu     Mar           2002 Mon        #>  4 2002-03-08 2006-01-17 Fri     Mar           2002 Tue        #>  5 2002-03-09 2006-01-18 Sat     Mar           2002 Wed        #>  6 2002-03-10 2006-01-19 Sun     Mar           2002 Thu        #>  7 2002-03-11 2006-01-20 Mon     Mar           2002 Fri        #>  8 2002-03-12 2006-01-21 Tue     Mar           2002 Sat        #>  9 2002-03-13 2006-01-22 Wed     Mar           2002 Sun        #> 10 2002-03-14 2006-01-23 Thu     Mar           2002 Mon        #> # ‚Ñπ 2 more variables: Stefan_month <fct>, Stefan_year <int>  tidy(date_rec, number = 1) #> # A tibble: 6 √ó 4 #>   terms  value ordinal id         #>   <chr>  <chr> <lgl>   <chr>      #> 1 Dan    dow   FALSE   date_vUNsj #> 2 Dan    month FALSE   date_vUNsj #> 3 Dan    year  FALSE   date_vUNsj #> 4 Stefan dow   FALSE   date_vUNsj #> 5 Stefan month FALSE   date_vUNsj #> 6 Stefan year  FALSE   date_vUNsj"},{"path":"https://recipes.tidymodels.org/dev/reference/step_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Data depths ‚Äî step_depth","title":"Data depths ‚Äî step_depth","text":"step_depth() creates specification recipe step convert numeric data measurement data depth. done value categorical class variable.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data depths ‚Äî step_depth","text":"","code":"step_depth(   recipe,   ...,   class,   role = \"predictor\",   trained = FALSE,   metric = \"halfspace\",   options = list(),   data = NULL,   prefix = \"depth_\",   keep_original_cols = TRUE,   skip = FALSE,   id = rand_id(\"depth\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data depths ‚Äî step_depth","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. class single character string specifies single categorical variable used class. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. metric character string specifying depth metric. Possible values \"potential\", \"halfspace\", \"Mahalanobis\", \"simplicialVolume\", \"spatial\", \"zonoid\". options list options pass underlying depth functions. See ddalpha::depth.halfspace(), ddalpha::depth.Mahalanobis(), ddalpha::depth.potential(), ddalpha::depth.projection(), ddalpha::depth.simplicial(), ddalpha::depth.simplicialVolume(), ddalpha::depth.spatial(), ddalpha::depth.zonoid(). data training data stored prep() executed. prefix character string prefix resulting new variables. See notes . keep_original_cols logical keep original variables output. Defaults TRUE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data depths ‚Äî step_depth","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_depth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data depths ‚Äî step_depth","text":"Data depth metrics attempt measure close data data point center distribution. number methods calculating depth simple example inverse distance data point centroid distribution. Generally, small values indicate data point close centroid. step_depth can compute class-specific depth new data point based proximity new value training set distribution. step requires ddalpha package. installed, step stop note installing package. Note entire training set saved compute future depth values. saved data trained (.e. prepared) baked (.e. processed) point location step_depth occupies recipe. Also, data requirements different step methods may vary. example, using metric = \"Mahalanobis\" requires class least many rows variables listed terms argument. function create new column every unique value class variable. resulting variables replace original values default prefix depth_. naming format can changed using prefix argument.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_depth.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Data depths ‚Äî step_depth","text":"tidy() step, tibble returned columns terms, class , id: terms character, selectors variables selected class character, name class variable id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_depth.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Data depths ‚Äî step_depth","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_depth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data depths ‚Äî step_depth","text":"","code":"# halfspace depth is the default rec <- recipe(Species ~ ., data = iris) %>%   step_depth(all_numeric_predictors(), class = \"Species\")  # use zonoid metric instead # also, define naming convention for new columns rec <- recipe(Species ~ ., data = iris) %>%   step_depth(all_numeric_predictors(),     class = \"Species\",     metric = \"zonoid\", prefix = \"zonoid_\"   )  rec_dists <- prep(rec, training = iris)  dists_to_species <- bake(rec_dists, new_data = iris) dists_to_species #> # A tibble: 150 √ó 8 #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species zonoid_setosa #>           <dbl>       <dbl>        <dbl>       <dbl> <fct>           <dbl> #>  1          5.1         3.5          1.4         0.2 setosa         0.559  #>  2          4.9         3            1.4         0.2 setosa         0.167  #>  3          4.7         3.2          1.3         0.2 setosa         0.299  #>  4          4.6         3.1          1.5         0.2 setosa         0.170  #>  5          5           3.6          1.4         0.2 setosa         0.391  #>  6          5.4         3.9          1.7         0.4 setosa         0.0838 #>  7          4.6         3.4          1.4         0.3 setosa         0.0200 #>  8          5           3.4          1.5         0.2 setosa         0.645  #>  9          4.4         2.9          1.4         0.2 setosa         0.02   #> 10          4.9         3.1          1.5         0.1 setosa         0.0200 #> # ‚Ñπ 140 more rows #> # ‚Ñπ 2 more variables: zonoid_versicolor <dbl>, zonoid_virginica <dbl>  tidy(rec, number = 1) #> # A tibble: 1 √ó 3 #>   terms                    class id          #>   <chr>                    <chr> <chr>       #> 1 all_numeric_predictors() NA    depth_eCCL8 tidy(rec_dists, number = 1) #> # A tibble: 4 √ó 3 #>   terms        class   id          #>   <chr>        <chr>   <chr>       #> 1 Sepal.Length Species depth_eCCL8 #> 2 Sepal.Width  Species depth_eCCL8 #> 3 Petal.Length Species depth_eCCL8 #> 4 Petal.Width  Species depth_eCCL8"},{"path":"https://recipes.tidymodels.org/dev/reference/step_discretize.html","id":null,"dir":"Reference","previous_headings":"","what":"Discretize Numeric Variables ‚Äî step_discretize","title":"Discretize Numeric Variables ‚Äî step_discretize","text":"step_discretize() creates specification recipe step convert numeric data factor bins approximately number data points (based training set).","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_discretize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discretize Numeric Variables ‚Äî step_discretize","text":"","code":"step_discretize(   recipe,   ...,   role = NA,   trained = FALSE,   num_breaks = 4,   min_unique = 10,   objects = NULL,   options = list(prefix = \"bin\"),   skip = FALSE,   id = rand_id(\"discretize\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_discretize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discretize Numeric Variables ‚Äî step_discretize","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. num_breaks integer defining many cuts make data. min_unique integer defining sample size line dignity binning. (number unique values)/(cuts+1) less min_unique, discretization takes place. objects discretize() objects stored recipe trained prep(). options list options discretize(). default set argument x. Note using options prefix labels one variable transformed might problematic variables inherit values. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_discretize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discretize Numeric Variables ‚Äî step_discretize","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_discretize.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Discretize Numeric Variables ‚Äî step_discretize","text":"tidy() step, tibble returned columns terms, value , id: terms character, selectors variables selected value numeric, breaks id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_discretize.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Discretize Numeric Variables ‚Äî step_discretize","text":"step 2 tuning parameters: min_unique: Unique Value Threshold (type: integer, default: 10) num_breaks: Number Cut Points (type: integer, default: 4)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_discretize.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Discretize Numeric Variables ‚Äî step_discretize","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_discretize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discretize Numeric Variables ‚Äî step_discretize","text":"","code":"data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr ) %>%   step_discretize(carbon, hydrogen)  rec <- prep(rec, biomass_tr) #> Warning: Note that the options `prefix` and `labels` will be applied to all #> variables. binned_te <- bake(rec, biomass_te) table(binned_te$carbon) #>  #> bin1 bin2 bin3 bin4  #>   22   17   25   16   tidy(rec, 1) #> # A tibble: 10 √ó 3 #>    terms      value id               #>    <chr>      <dbl> <chr>            #>  1 carbon   -Inf    discretize_hhrhR #>  2 carbon     44.7  discretize_hhrhR #>  3 carbon     47.1  discretize_hhrhR #>  4 carbon     49.7  discretize_hhrhR #>  5 carbon    Inf    discretize_hhrhR #>  6 hydrogen -Inf    discretize_hhrhR #>  7 hydrogen    5.20 discretize_hhrhR #>  8 hydrogen    5.78 discretize_hhrhR #>  9 hydrogen    6.05 discretize_hhrhR #> 10 hydrogen  Inf    discretize_hhrhR"},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create traditional dummy variables ‚Äî step_dummy","title":"Create traditional dummy variables ‚Äî step_dummy","text":"step_dummy() creates specification recipe step convert nominal data (e.g. factors) one numeric binary model terms corresponding levels original data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create traditional dummy variables ‚Äî step_dummy","text":"","code":"step_dummy(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   one_hot = FALSE,   preserve = deprecated(),   naming = dummy_names,   levels = NULL,   keep_original_cols = FALSE,   skip = FALSE,   id = rand_id(\"dummy\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create traditional dummy variables ‚Äî step_dummy","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. selected variables must factors. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. one_hot logical. C levels, C dummy variables created rather C-1? preserve argument deprecated. Please use keep_original_cols instead. naming function defines naming convention new dummy columns. See Details . levels list contains information needed create dummy variables variable contained terms. NULL step trained prep(). keep_original_cols logical keep original variables output. Defaults FALSE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create traditional dummy variables ‚Äî step_dummy","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create traditional dummy variables ‚Äî step_dummy","text":"step_dummy() create set binary dummy variables factor variable. example, unordered factor column data set levels \"red\", \"green\", \"blue\", dummy variable bake create two additional columns 0/1 data two three values (remove original column). ordered factors, polynomial contrasts used encode numeric values. default, excluded dummy variable (.e. reference cell) correspond first level unordered factor converted. step_relevel() can used create new reference level setting ref_level argument. recipe step allows flexible naming resulting variables. unordered factor named x, levels \"\" \"b\", default naming convention create new variable called x_b. naming format can changed using naming argument; function dummy_names() default. change type contrast used, change global contrast option via options. factor converted missing value, corresponding dummy variables also missing. See step_unknown() solution. data processed contains novel levels (.e., contained training set), missing value assigned results. See step_other() alternative. columns selected (perhaps due earlier step_zv()), bake() return data -(e.g. dummy variables). Note , default, new dummy variable column names obey naming rules columns. levels \"0\", dummy_names() put leading \"X\" front level (since uses make.names()). can changed passing different function naming argument step. Also, number contrast methods return fractional values. columns returned step doubles (integers). package vignette dummy variables interactions information.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Create traditional dummy variables ‚Äî step_dummy","text":"tidy() step, tibble returned columns terms, columns , id: terms character, selectors variables selected columns character, names resulting columns id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Create traditional dummy variables ‚Äî step_dummy","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create traditional dummy variables ‚Äî step_dummy","text":"","code":"data(Sacramento, package = \"modeldata\")  # Original data: city has 37 levels length(unique(Sacramento$city)) #> [1] 37 unique(Sacramento$city) %>% sort() #>  [1] ANTELOPE        AUBURN          CAMERON_PARK    CARMICHAEL      #>  [5] CITRUS_HEIGHTS  COOL            DIAMOND_SPRINGS EL_DORADO       #>  [9] EL_DORADO_HILLS ELK_GROVE       ELVERTA         FAIR_OAKS       #> [13] FOLSOM          FORESTHILL      GALT            GARDEN_VALLEY   #> [17] GOLD_RIVER      GRANITE_BAY     GREENWOOD       LINCOLN         #> [21] LOOMIS          MATHER          MEADOW_VISTA    NORTH_HIGHLANDS #> [25] ORANGEVALE      PENRYN          PLACERVILLE     POLLOCK_PINES   #> [29] RANCHO_CORDOVA  RANCHO_MURIETA  RIO_LINDA       ROCKLIN         #> [33] ROSEVILLE       SACRAMENTO      WALNUT_GROVE    WEST_SACRAMENTO #> [37] WILTON          #> 37 Levels: ANTELOPE AUBURN CAMERON_PARK CARMICHAEL ... WILTON  rec <- recipe(~ city + sqft + price, data = Sacramento)  # Default dummy coding: 36 dummy variables dummies <- rec %>%   step_dummy(city) %>%   prep(training = Sacramento)  dummy_data <- bake(dummies, new_data = NULL)  dummy_data %>%   select(starts_with(\"city\")) %>%   names() # level \"anything\" is the reference level #>  [1] \"city_AUBURN\"          \"city_CAMERON_PARK\"    \"city_CARMICHAEL\"      #>  [4] \"city_CITRUS_HEIGHTS\"  \"city_COOL\"            \"city_DIAMOND_SPRINGS\" #>  [7] \"city_EL_DORADO\"       \"city_EL_DORADO_HILLS\" \"city_ELK_GROVE\"       #> [10] \"city_ELVERTA\"         \"city_FAIR_OAKS\"       \"city_FOLSOM\"          #> [13] \"city_FORESTHILL\"      \"city_GALT\"            \"city_GARDEN_VALLEY\"   #> [16] \"city_GOLD_RIVER\"      \"city_GRANITE_BAY\"     \"city_GREENWOOD\"       #> [19] \"city_LINCOLN\"         \"city_LOOMIS\"          \"city_MATHER\"          #> [22] \"city_MEADOW_VISTA\"    \"city_NORTH_HIGHLANDS\" \"city_ORANGEVALE\"      #> [25] \"city_PENRYN\"          \"city_PLACERVILLE\"     \"city_POLLOCK_PINES\"   #> [28] \"city_RANCHO_CORDOVA\"  \"city_RANCHO_MURIETA\"  \"city_RIO_LINDA\"       #> [31] \"city_ROCKLIN\"         \"city_ROSEVILLE\"       \"city_SACRAMENTO\"      #> [34] \"city_WALNUT_GROVE\"    \"city_WEST_SACRAMENTO\" \"city_WILTON\"           # Obtain the full set of 37 dummy variables using `one_hot` option dummies_one_hot <- rec %>%   step_dummy(city, one_hot = TRUE) %>%   prep(training = Sacramento)  dummy_data_one_hot <- bake(dummies_one_hot, new_data = NULL)  dummy_data_one_hot %>%   select(starts_with(\"city\")) %>%   names() # no reference level #>  [1] \"city_ANTELOPE\"        \"city_AUBURN\"          \"city_CAMERON_PARK\"    #>  [4] \"city_CARMICHAEL\"      \"city_CITRUS_HEIGHTS\"  \"city_COOL\"            #>  [7] \"city_DIAMOND_SPRINGS\" \"city_EL_DORADO\"       \"city_EL_DORADO_HILLS\" #> [10] \"city_ELK_GROVE\"       \"city_ELVERTA\"         \"city_FAIR_OAKS\"       #> [13] \"city_FOLSOM\"          \"city_FORESTHILL\"      \"city_GALT\"            #> [16] \"city_GARDEN_VALLEY\"   \"city_GOLD_RIVER\"      \"city_GRANITE_BAY\"     #> [19] \"city_GREENWOOD\"       \"city_LINCOLN\"         \"city_LOOMIS\"          #> [22] \"city_MATHER\"          \"city_MEADOW_VISTA\"    \"city_NORTH_HIGHLANDS\" #> [25] \"city_ORANGEVALE\"      \"city_PENRYN\"          \"city_PLACERVILLE\"     #> [28] \"city_POLLOCK_PINES\"   \"city_RANCHO_CORDOVA\"  \"city_RANCHO_MURIETA\"  #> [31] \"city_RIO_LINDA\"       \"city_ROCKLIN\"         \"city_ROSEVILLE\"       #> [34] \"city_SACRAMENTO\"      \"city_WALNUT_GROVE\"    \"city_WEST_SACRAMENTO\" #> [37] \"city_WILTON\"            tidy(dummies, number = 1) #> # A tibble: 36 √ó 3 #>    terms columns         id          #>    <chr> <chr>           <chr>       #>  1 city  AUBURN          dummy_ypfCg #>  2 city  CAMERON_PARK    dummy_ypfCg #>  3 city  CARMICHAEL      dummy_ypfCg #>  4 city  CITRUS_HEIGHTS  dummy_ypfCg #>  5 city  COOL            dummy_ypfCg #>  6 city  DIAMOND_SPRINGS dummy_ypfCg #>  7 city  EL_DORADO       dummy_ypfCg #>  8 city  EL_DORADO_HILLS dummy_ypfCg #>  9 city  ELK_GROVE       dummy_ypfCg #> 10 city  ELVERTA         dummy_ypfCg #> # ‚Ñπ 26 more rows tidy(dummies_one_hot, number = 1) #> # A tibble: 37 √ó 3 #>    terms columns         id          #>    <chr> <chr>           <chr>       #>  1 city  ANTELOPE        dummy_ONQD4 #>  2 city  AUBURN          dummy_ONQD4 #>  3 city  CAMERON_PARK    dummy_ONQD4 #>  4 city  CARMICHAEL      dummy_ONQD4 #>  5 city  CITRUS_HEIGHTS  dummy_ONQD4 #>  6 city  COOL            dummy_ONQD4 #>  7 city  DIAMOND_SPRINGS dummy_ONQD4 #>  8 city  EL_DORADO       dummy_ONQD4 #>  9 city  EL_DORADO_HILLS dummy_ONQD4 #> 10 city  ELK_GROVE       dummy_ONQD4 #> # ‚Ñπ 27 more rows"},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract patterns from nominal data ‚Äî step_dummy_extract","title":"Extract patterns from nominal data ‚Äî step_dummy_extract","text":"step_dummy_extract() creates specification recipe step convert nominal data (e.g. characters factors) one integer model terms extracted levels.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract patterns from nominal data ‚Äî step_dummy_extract","text":"","code":"step_dummy_extract(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   sep = NULL,   pattern = NULL,   threshold = 0,   other = \"other\",   naming = dummy_extract_names,   levels = NULL,   keep_original_cols = FALSE,   skip = FALSE,   id = rand_id(\"dummy_extract\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract patterns from nominal data ‚Äî step_dummy_extract","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. sep Character vector containing regular expression use splitting. strsplit() used perform split. sep takes priority pattern also specified. pattern Character vector containing regular expression used extraction. gregexpr() regmatches() used perform pattern extraction using perl = TRUE. threshold numeric value 0 1, integer greater equal one.  less one, factor levels rate occurrence training set threshold pooled . greater equal one, value treated frequency factor levels occur less threshold times pooled . single character value \"\" category. naming function defines naming convention new dummy columns. See Details . levels list contains information needed create dummy variables variable contained terms. NULL step trained prep(). keep_original_cols logical keep original variables output. Defaults FALSE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract patterns from nominal data ‚Äî step_dummy_extract","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy_extract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract patterns from nominal data ‚Äî step_dummy_extract","text":"step_dummy_extract() create set integer dummy variables character variable extracting individual strings either splitting extracting counting create count variables. Note threshold works specific way step. possible one label present multiple times row, counted calculating occurrences frequencies. recipe step allows flexible naming resulting variables. unordered factor named x, levels \"\" \"b\", default naming convention create new variable called x_b. naming format can changed using naming argument; function dummy_names() default.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy_extract.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Extract patterns from nominal data ‚Äî step_dummy_extract","text":"tidy() step, tibble returned columns terms, columns , id: terms character, selectors variables selected columns character, names resulting columns id character, id step return value ordered according frequency columns entries training data set.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy_extract.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Extract patterns from nominal data ‚Äî step_dummy_extract","text":"step performs unsupervised operation can utilize case weights. result, case weights used frequency weights. information, see documentation case_weights examples tidymodels.org.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract patterns from nominal data ‚Äî step_dummy_extract","text":"","code":"data(tate_text, package = \"modeldata\")  dummies <- recipe(~ artist + medium, data = tate_text) %>%   step_dummy_extract(artist, medium, sep = \", \") %>%   prep()  dummy_data <- bake(dummies, new_data = NULL)  dummy_data %>%   select(starts_with(\"medium\")) %>%   names() %>%   head() #> [1] \"medium_X1.person\"                    #> [2] \"medium_X1.projection.and.1.monitor\"  #> [3] \"medium_X100.digital.prints.on.paper\" #> [4] \"medium_X100.works.on.paper\"          #> [5] \"medium_X11.photographs\"              #> [6] \"medium_X11.works.on.panel\"            # More detailed splitting dummies_specific <- recipe(~medium, data = tate_text) %>%   step_dummy_extract(medium, sep = \"(, )|( and )|( on )\") %>%   prep()  dummy_data_specific <- bake(dummies_specific, new_data = NULL)  dummy_data_specific %>%   select(starts_with(\"medium\")) %>%   names() %>%   head() #> [1] \"medium_X1.monitor\"          \"medium_X1.person\"           #> [3] \"medium_X1.projection\"       \"medium_X10.light.boxes\"     #> [5] \"medium_X10.tranformers\"     \"medium_X100.digital.prints\"  tidy(dummies, number = 1) #> # A tibble: 2,673 √ó 3 #>    terms  columns id                  #>    <chr>  <chr>   <chr>               #>  1 artist Thomas  dummy_extract_mbqAp #>  2 artist Sch√ºtte dummy_extract_mbqAp #>  3 artist John    dummy_extract_mbqAp #>  4 artist Akram   dummy_extract_mbqAp #>  5 artist Zaatari dummy_extract_mbqAp #>  6 artist Joseph  dummy_extract_mbqAp #>  7 artist Beuys   dummy_extract_mbqAp #>  8 artist Richard dummy_extract_mbqAp #>  9 artist Ferrari dummy_extract_mbqAp #> 10 artist Le√≥n    dummy_extract_mbqAp #> # ‚Ñπ 2,663 more rows tidy(dummies_specific, number = 1) #> # A tibble: 1,216 √ó 3 #>    terms  columns              id                  #>    <chr>  <chr>                <chr>               #>  1 medium paper                dummy_extract_oEGyP #>  2 medium Etching              dummy_extract_oEGyP #>  3 medium Photograph           dummy_extract_oEGyP #>  4 medium colour               dummy_extract_oEGyP #>  5 medium gelatin silver print dummy_extract_oEGyP #>  6 medium Screenprint          dummy_extract_oEGyP #>  7 medium Lithograph           dummy_extract_oEGyP #>  8 medium on paper             dummy_extract_oEGyP #>  9 medium canvas               dummy_extract_oEGyP #> 10 medium aquatint             dummy_extract_oEGyP #> # ‚Ñπ 1,206 more rows  # pattern argument can be useful to extract harder patterns color_examples <- tibble(   colors = c(     \"['red', 'blue']\",     \"['red', 'blue', 'white']\",     \"['blue', 'blue', 'blue']\"   ) )  dummies_color <- recipe(~colors, data = color_examples) %>%   step_dummy_extract(colors, pattern = \"(?<=')[^',]+(?=')\") %>%   prep()  dommies_data_color <- dummies_color %>%   bake(new_data = NULL)  dommies_data_color #> # A tibble: 3 √ó 4 #>   colors_blue colors_red colors_white colors_other #>         <int>      <int>        <int>        <int> #> 1           1          1            0            0 #> 2           1          1            1            0 #> 3           3          0            0            0"},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy_multi_choice.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle levels in multiple predictors together ‚Äî step_dummy_multi_choice","title":"Handle levels in multiple predictors together ‚Äî step_dummy_multi_choice","text":"step_dummy_multi_choice() creates specification recipe step convert multiple nominal data (e.g. characters factors) one numeric binary model terms levels original data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy_multi_choice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle levels in multiple predictors together ‚Äî step_dummy_multi_choice","text":"","code":"step_dummy_multi_choice(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   threshold = 0,   levels = NULL,   input = NULL,   other = \"other\",   naming = dummy_names,   prefix = NULL,   keep_original_cols = FALSE,   skip = FALSE,   id = rand_id(\"dummy_multi_choice\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy_multi_choice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle levels in multiple predictors together ‚Äî step_dummy_multi_choice","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. selected variables must factors. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. threshold numeric value 0 1, integer greater equal one.  less one, factor levels rate occurrence training set threshold pooled . greater equal one, value treated frequency factor levels occur less threshold times pooled . levels list contains information needed create dummy variables variable contained terms. NULL step trained prep(). input character vector containing names columns used. NULL step trained prep(). single character value \"\" category. naming function defines naming convention new dummy columns. See Details . prefix character string prefix resulting new variables. See notes . keep_original_cols logical keep original variables output. Defaults FALSE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy_multi_choice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle levels in multiple predictors together ‚Äî step_dummy_multi_choice","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy_multi_choice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handle levels in multiple predictors together ‚Äî step_dummy_multi_choice","text":"overall proportion (total counts) categories computed. \"\" category used place categorical levels whose individual proportion (frequency) training set less threshold. step produces number columns, based number categories finds. naming columns determined function based naming argument. default return <prefix>_<category name>. default prefix NULL, means name first column selected used place. recipe step allows flexible naming resulting variables. unordered factor named x, levels \"\" \"b\", default naming convention create new variable called x_b. naming format can changed using naming argument; function dummy_names() default.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy_multi_choice.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Handle levels in multiple predictors together ‚Äî step_dummy_multi_choice","text":"step 1 tuning parameters: threshold: Threshold (type: double, default: 0)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy_multi_choice.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Handle levels in multiple predictors together ‚Äî step_dummy_multi_choice","text":"tidy() step, tibble returned columns terms, columns , id: terms character, selectors variables selected columns character, names resulting columns id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy_multi_choice.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Handle levels in multiple predictors together ‚Äî step_dummy_multi_choice","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_dummy_multi_choice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle levels in multiple predictors together ‚Äî step_dummy_multi_choice","text":"","code":"library(tibble) languages <- tribble(   ~lang_1,    ~lang_2,   ~lang_3,   \"English\",  \"Italian\", NA,   \"Spanish\",  NA,        \"French\",   \"Armenian\", \"English\", \"French\",   NA,         NA,        NA )  dummy_multi_choice_rec <- recipe(~., data = languages) %>%   step_dummy_multi_choice(starts_with(\"lang\")) %>%   prep()  bake(dummy_multi_choice_rec, new_data = NULL) #> # A tibble: 4 √ó 5 #>   lang_1_Armenian lang_1_English lang_1_French lang_1_Italian #>             <int>          <int>         <int>          <int> #> 1               0              1             0              1 #> 2               0              0             1              0 #> 3               1              1             1              0 #> 4               0              0             0              0 #> # ‚Ñπ 1 more variable: lang_1_Spanish <int> tidy(dummy_multi_choice_rec, number = 1) #> # A tibble: 5 √ó 3 #>   terms  columns  id                       #>   <chr>  <chr>    <chr>                    #> 1 lang_1 Armenian dummy_multi_choice_kJsyR #> 2 lang_1 English  dummy_multi_choice_kJsyR #> 3 lang_1 French   dummy_multi_choice_kJsyR #> 4 lang_1 Italian  dummy_multi_choice_kJsyR #> 5 lang_1 Spanish  dummy_multi_choice_kJsyR  dummy_multi_choice_rec2 <- recipe(~., data = languages) %>%   step_dummy_multi_choice(starts_with(\"lang\"),     prefix = \"lang\",     threshold = 0.2   ) %>%   prep()  bake(dummy_multi_choice_rec2, new_data = NULL) #> # A tibble: 4 √ó 2 #>   lang_English lang_other #>          <int>      <int> #> 1            1          1 #> 2            0          1 #> 3            1          1 #> 4            0          0 tidy(dummy_multi_choice_rec2, number = 1) #> # A tibble: 2 √ó 3 #>   terms  columns id                       #>   <chr>  <chr>   <chr>                    #> 1 lang_1 English dummy_multi_choice_Cb4Qi #> 2 lang_1 other   dummy_multi_choice_Cb4Qi"},{"path":"https://recipes.tidymodels.org/dev/reference/step_factor2string.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert factors to strings ‚Äî step_factor2string","title":"Convert factors to strings ‚Äî step_factor2string","text":"step_factor2string() creates specification recipe step convert one factor vectors strings.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_factor2string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert factors to strings ‚Äî step_factor2string","text":"","code":"step_factor2string(   recipe,   ...,   role = NA,   trained = FALSE,   columns = FALSE,   skip = FALSE,   id = rand_id(\"factor2string\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_factor2string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert factors to strings ‚Äî step_factor2string","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. columns character string selected variable names. field placeholder populated prep() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_factor2string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert factors to strings ‚Äî step_factor2string","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_factor2string.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert factors to strings ‚Äî step_factor2string","text":"prep() option strings_as_factors defaults TRUE. step used default option, strings produced step converted factors. Remember categorical data directly passed model encoded factors. step helpful ancillary columns (identifiers) computed model.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_factor2string.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Convert factors to strings ‚Äî step_factor2string","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_factor2string.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Convert factors to strings ‚Äî step_factor2string","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_factor2string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert factors to strings ‚Äî step_factor2string","text":"","code":"data(Sacramento, package = \"modeldata\")  rec <- recipe(~ city + zip, data = Sacramento)  make_string <- rec %>%   step_factor2string(city)  make_string <- prep(make_string,   training = Sacramento,   strings_as_factors = FALSE )  make_string #>  #> ‚îÄ‚îÄ Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> predictor: 2 #>  #> ‚îÄ‚îÄ Training information  #> Training data contained 932 data points and no incomplete rows. #>  #> ‚îÄ‚îÄ Operations  #> ‚Ä¢ Character variables from: city | Trained  # note that `city` is a string in recipe output bake(make_string, new_data = NULL) %>% head() #> # A tibble: 6 √ó 2 #>   city       zip    #>   <chr>      <fct>  #> 1 SACRAMENTO z95838 #> 2 SACRAMENTO z95823 #> 3 SACRAMENTO z95815 #> 4 SACRAMENTO z95815 #> 5 SACRAMENTO z95824 #> 6 SACRAMENTO z95841  # ...but remains a factor in the original data Sacramento %>% head() #> # A tibble: 6 √ó 9 #>   city       zip     beds baths  sqft type        price latitude longitude #>   <fct>      <fct>  <int> <dbl> <int> <fct>       <int>    <dbl>     <dbl> #> 1 SACRAMENTO z95838     2     1   836 Residential 59222     38.6     -121. #> 2 SACRAMENTO z95823     3     1  1167 Residential 68212     38.5     -121. #> 3 SACRAMENTO z95815     2     1   796 Residential 68880     38.6     -121. #> 4 SACRAMENTO z95815     2     1   852 Residential 69307     38.6     -121. #> 5 SACRAMENTO z95824     2     1   797 Residential 81900     38.5     -121. #> 6 SACRAMENTO z95841     3     1  1122 Condo       89921     38.7     -121."},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter rows using dplyr ‚Äî step_filter","title":"Filter rows using dplyr ‚Äî step_filter","text":"step_filter() creates specification recipe step remove rows using dplyr::filter().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter rows using dplyr ‚Äî step_filter","text":"","code":"step_filter(   recipe,   ...,   role = NA,   trained = FALSE,   inputs = NULL,   skip = TRUE,   id = rand_id(\"filter\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter rows using dplyr ‚Äî step_filter","text":"recipe recipe object. step added sequence operations recipe. ... Logical predicates defined terms variables data. Multiple conditions combined &. rows condition evaluates TRUE kept. See dplyr::filter() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. inputs Quosure values given .... skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = FALSE. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter rows using dplyr ‚Äî step_filter","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter rows using dplyr ‚Äî step_filter","text":"object user's global environment referenced expression defining new variable(s), good idea use quasiquotation (e.g. !!) embed value object expression (portable sessions). See examples.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter.html","id":"row-filtering","dir":"Reference","previous_headings":"","what":"Row Filtering","title":"Filter rows using dplyr ‚Äî step_filter","text":"step can entirely remove observations (rows data), can unintended /problematic consequences applying step new data later via bake(). Consider whether skip = TRUE skip = FALSE appropriate given use case. instances affect rows data predicted, step probably applied ; instead, execute operations like outside starting preprocessing recipe().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Filter rows using dplyr ‚Äî step_filter","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step expressions terms text representations parsable.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Filter rows using dplyr ‚Äî step_filter","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter rows using dplyr ‚Äî step_filter","text":"","code":"rec <- recipe(~., data = iris) %>%   step_filter(Sepal.Length > 4.5, Species == \"setosa\")  prepped <- prep(rec, training = iris %>% slice(1:75))  library(dplyr)  dplyr_train <-   iris %>%   as_tibble() %>%   slice(1:75) %>%   dplyr::filter(Sepal.Length > 4.5, Species == \"setosa\")  rec_train <- bake(prepped, new_data = NULL) all.equal(dplyr_train, rec_train) #> [1] TRUE  dplyr_test <-   iris %>%   as_tibble() %>%   slice(76:150) %>%   dplyr::filter(Sepal.Length > 4.5, Species != \"setosa\") rec_test <- bake(prepped, iris %>% slice(76:150)) all.equal(dplyr_test, rec_test) #> [1] TRUE  values <- c(\"versicolor\", \"virginica\")  qq_rec <-   recipe(~., data = iris) %>%   # Embed the `values` object in the call using !!   step_filter(Sepal.Length > 4.5, Species %in% !!values)  tidy(qq_rec, number = 1) #> # A tibble: 2 √ó 2 #>   terms                                           id           #>   <chr>                                           <chr>        #> 1 \"Sepal.Length > 4.5\"                            filter_zsZ4H #> 2 \"Species %in% c(\\\"versicolor\\\", \\\"virginica\\\")\" filter_zsZ4H"},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing value column filter ‚Äî step_filter_missing","title":"Missing value column filter ‚Äî step_filter_missing","text":"step_filter_missing() creates specification recipe step potentially remove variables many missing values.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing value column filter ‚Äî step_filter_missing","text":"","code":"step_filter_missing(   recipe,   ...,   role = NA,   trained = FALSE,   threshold = 0.1,   removals = NULL,   skip = FALSE,   id = rand_id(\"filter_missing\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missing value column filter ‚Äî step_filter_missing","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. threshold value threshold missing values column. step remove columns proportion missing values exceeds threshold. removals character string contains names columns removed. values determined prep() called. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Missing value column filter ‚Äî step_filter_missing","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter_missing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Missing value column filter ‚Äî step_filter_missing","text":"step can potentially remove columns data set. may cause issues subsequent steps recipe missing columns specifically referenced name. avoid , see advice Tips saving recipes filtering columns section selections. step remove variables proportion missing values exceeds threshold. variables missing values removed threshold = 0.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter_missing.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Missing value column filter ‚Äî step_filter_missing","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter_missing.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Missing value column filter ‚Äî step_filter_missing","text":"step 1 tuning parameters: threshold: Threshold (type: double, default: 0.1)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter_missing.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Missing value column filter ‚Äî step_filter_missing","text":"step performs unsupervised operation can utilize case weights. result, case weights used frequency weights. information, see documentation case_weights examples tidymodels.org.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_filter_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missing value column filter ‚Äî step_filter_missing","text":"","code":"data(credit_data, package = \"modeldata\")  rec <- recipe(Status ~ ., data = credit_data) %>%   step_filter_missing(all_predictors(), threshold = 0)  filter_obj <- prep(rec)  filtered_te <- bake(filter_obj, new_data = NULL)  tidy(rec, number = 1) #> # A tibble: 1 √ó 2 #>   terms            id                   #>   <chr>            <chr>                #> 1 all_predictors() filter_missing_IYaDd tidy(filter_obj, number = 1) #> # A tibble: 6 √ó 2 #>   terms   id                   #>   <chr>   <chr>                #> 1 Home    filter_missing_IYaDd #> 2 Marital filter_missing_IYaDd #> 3 Job     filter_missing_IYaDd #> 4 Income  filter_missing_IYaDd #> 5 Assets  filter_missing_IYaDd #> 6 Debt    filter_missing_IYaDd"},{"path":"https://recipes.tidymodels.org/dev/reference/step_geodist.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance between two locations ‚Äî step_geodist","title":"Distance between two locations ‚Äî step_geodist","text":"step_geodist() creates specification recipe step calculate distance points map reference location.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_geodist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance between two locations ‚Äî step_geodist","text":"","code":"step_geodist(   recipe,   lat = NULL,   lon = NULL,   role = \"predictor\",   trained = FALSE,   ref_lat = NULL,   ref_lon = NULL,   is_lat_lon = TRUE,   log = FALSE,   name = \"geo_dist\",   columns = NULL,   keep_original_cols = TRUE,   skip = FALSE,   id = rand_id(\"geodist\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_geodist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance between two locations ‚Äî step_geodist","text":"recipe recipe object. step added sequence operations recipe. lon, lat Selector functions choose variables used step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. ref_lon, ref_lat Single numeric values location reference point. is_lat_lon logical: coordinates latitude longitude? TRUE Haversine formula used returned result meters. FALSE Pythagorean formula used. Default TRUE recipes created previous versions recipes, value FALSE used. log logical: distance transformed natural log function? name single character value use new predictor column. column exists name, error issued. columns character string selected variable names. field placeholder populated prep() used. keep_original_cols logical keep original variables output. Defaults TRUE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_geodist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance between two locations ‚Äî step_geodist","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_geodist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distance between two locations ‚Äî step_geodist","text":"step_geodist uses Pythagorean theorem calculate Euclidean distances is_lat_lon FALSE. is_lat_lon TRUE, Haversine formula used calculate great-circle distance meters.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_geodist.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Distance between two locations ‚Äî step_geodist","text":"tidy() step, tibble returned columns latitude, longitude, ref_latitude, ref_longitude, is_lat_lon, name , id: latitude character, name latitude variable longitude character, name longitude variable ref_latitude numeric, location latitude reference point ref_longitude numeric, location longitude reference point is_lat_lon character, summary function name name character, name resulting variable id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_geodist.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Distance between two locations ‚Äî step_geodist","text":"underlying operation allow case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_geodist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Distance between two locations ‚Äî step_geodist","text":"https://en.wikipedia.org/wiki/Haversine_formula","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_geodist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance between two locations ‚Äî step_geodist","text":"","code":"data(Smithsonian, package = \"modeldata\")  # How close are the museums to Union Station? near_station <- recipe(~., data = Smithsonian) %>%   update_role(name, new_role = \"location\") %>%   step_geodist(     lat = latitude, lon = longitude, log = FALSE,     ref_lat = 38.8986312, ref_lon = -77.0062457,     is_lat_lon = TRUE   ) %>%   prep(training = Smithsonian)  bake(near_station, new_data = NULL) %>%   arrange(geo_dist) #> # A tibble: 20 √ó 4 #>    name                                        latitude longitude geo_dist #>    <fct>                                          <dbl>     <dbl>    <dbl> #>  1 National Postal Museum                          38.9     -77.0     367. #>  2 Renwick Gallery                                 38.9     -77.0     932. #>  3 National Museum of the American Indian          38.9     -77.0    1571. #>  4 Smithsonian American Art Museum                 38.9     -77.0    1636. #>  5 National Portrait Gallery                       38.9     -77.0    1646. #>  6 National Air and Space Museum                   38.9     -77.0    1796. #>  7 Hirshhorn Museum and Sculpture Garden           38.9     -77.0    2008. #>  8 National Museum of Natural History              38.9     -77.0    2073. #>  9 Arthur M. Sackler Gallery                       38.9     -77.0    2108. #> 10 Arts and Industries Building                    38.9     -77.0    2124. #> 11 Smithsonian Institution Building                38.9     -77.0    2193. #> 12 National Museum of African Art                  38.9     -77.0    2202. #> 13 Freer Gallery of Art                            38.9     -77.0    2266. #> 14 National Museum of American History             38.9     -77.0    2393. #> 15 National Museum of African American Histor‚Ä¶     38.9     -77.0    2611. #> 16 National Zoological Park                        38.9     -77.1    5246. #> 17 Anacostia Community Museum                      38.9     -77.0    5332. #> 18 Steven F. Udvar-Hazy Center                     38.9     -77.4   38111. #> 19 George Gustav Heye Center                       40.7     -74.0  324871. #> 20 Cooper Hewitt, Smithsonian Design Museum        40.8     -74.0  334041.  tidy(near_station, number = 1) #> # A tibble: 1 √ó 7 #>   latitude longitude ref_latitude ref_longitude is_lat_lon name     id     #>   <chr>    <chr>            <dbl>         <dbl> <lgl>      <chr>    <chr>  #> 1 latitude longitude         38.9         -77.0 TRUE       geo_dist geodi‚Ä¶"},{"path":"https://recipes.tidymodels.org/dev/reference/step_harmonic.html","id":null,"dir":"Reference","previous_headings":"","what":"Add sin and cos terms for harmonic analysis ‚Äî step_harmonic","title":"Add sin and cos terms for harmonic analysis ‚Äî step_harmonic","text":"step_harmonic() creates specification recipe step add sin() cos() terms harmonic analysis.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_harmonic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add sin and cos terms for harmonic analysis ‚Äî step_harmonic","text":"","code":"step_harmonic(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   frequency = NA_real_,   cycle_size = NA_real_,   starting_val = NA_real_,   keep_original_cols = FALSE,   columns = NULL,   skip = FALSE,   id = rand_id(\"harmonic\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_harmonic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add sin and cos terms for harmonic analysis ‚Äî step_harmonic","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. typically single variable. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. frequency numeric vector least one value. value(s) must greater zero finite. cycle_size numeric vector least one value indicates size single cycle. cycle_size units input variable(s). starting_val either NA, numeric, Date POSIXt value(s) indicates reference point sin cos curves input variable. value Date POISXt value converted numeric using .numeric. parameter may specified increase control signal phase.  starting_val specified default 0. keep_original_cols logical keep original variables output. Defaults FALSE. columns character string selected variable names. field placeholder populated prep() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_harmonic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add sin and cos terms for harmonic analysis ‚Äî step_harmonic","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_harmonic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add sin and cos terms for harmonic analysis ‚Äî step_harmonic","text":"step seeks describe periodic components observational data using combination sin cos waves. , wave specified frequency modeled using one sin one cos term. two terms frequency can used estimate amplitude phase shift periodic signal observational data. equation relating cos waves known frequency unknown phase amplitude sum sin cos terms : $$A_j cos(\\sigma_j t_i - \\Phi_j) = C_j cos(\\sigma_j t_i) + S_j sin(\\sigma_j t_i)$$ Solving equation yields \\(C_j\\) \\(S_j\\). amplitude can obtained : $$A_j = \\sqrt{C^2_j + S^2_j}$$ phase can obtained : $$\\Phi_j = \\arctan{(S_j / C_j)}$$ : \\(\\sigma_j = 2 \\pi (frequency / cycle\\_size))\\) \\(A_j\\) amplitude \\(j^{th}\\) frequency \\(\\Phi_j\\) phase \\(j^{th}\\) frequency \\(C_j\\) coefficient cos term \\(j^{th}\\) frequency \\(S_j\\) coefficient sin term \\(j^{th}\\) frequency periodic component specified frequency cycle_size parameters. cycle size relates specified frequency input column(s) units. multiple ways specify wave given frequency, example, POSIXct input column given frequency 24 cycle_size equal 86400 equivalent frequency 1.0 cycle_size equal 3600.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_harmonic.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Add sin and cos terms for harmonic analysis ‚Äî step_harmonic","text":"step 1 tuning parameters: frequency: Harmonic Frequency (type: double, default: NA)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_harmonic.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Add sin and cos terms for harmonic analysis ‚Äî step_harmonic","text":"tidy() step, tibble returned columns terms, starting_val, cycle_size, frequency, key , id: terms character, selectors variables selected starting_val numeric, starting value cycle_size numeric, cycle size frequency numeric, frequency key character, key describing calculation id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_harmonic.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Add sin and cos terms for harmonic analysis ‚Äî step_harmonic","text":"underlying operation allow case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_harmonic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add sin and cos terms for harmonic analysis ‚Äî step_harmonic","text":"Doran, H. E., & Quilkey, J. J. (1972). Harmonic analysis seasonal data: important properties. American Journal Agricultural Economics, 54, volume 4, part 1, 646-651. Foreman, M. G. G., & Henry, R. F. (1989). harmonic analysis tidal model time series. Advances water resources, 12(3), 109-120.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_harmonic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add sin and cos terms for harmonic analysis ‚Äî step_harmonic","text":"","code":"library(ggplot2, quietly = TRUE) library(dplyr)  data(sunspot.year) sunspots <-   tibble(     year = 1700:1988,     n_sunspot = sunspot.year,     type = \"measured\"   ) %>%   slice(1:75)  # sunspots period is around 11 years, sample spacing is one year dat <- recipe(n_sunspot ~ year, data = sunspots) %>%   step_harmonic(year, frequency = 1 / 11, cycle_size = 1) %>%   prep() %>%   bake(new_data = NULL)  fit <- lm(n_sunspot ~ year_sin_1 + year_cos_1, data = dat)  preds <- tibble(   year = sunspots$year,   n_sunspot = fit$fitted.values,   type = \"predicted\" )  bind_rows(sunspots, preds) %>%   ggplot(aes(x = year, y = n_sunspot, color = type)) +   geom_line()    # ------------------------------------------------------------------------------ # POSIXct example  date_time <-   as.POSIXct(     paste0(rep(1959:1997, each = 12), \"-\", rep(1:12, length(1959:1997)), \"-01\"),     tz = \"UTC\"   )  carbon_dioxide <- tibble(   date_time = date_time,   co2 = as.numeric(co2),   type = \"measured\" )  # yearly co2 fluctuations dat <-   recipe(co2 ~ date_time,     data = carbon_dioxide   ) %>%   step_mutate(date_time_num = as.numeric(date_time)) %>%   step_ns(date_time_num, deg_free = 3) %>%   step_harmonic(date_time, frequency = 1, cycle_size = 86400 * 365.24) %>%   prep() %>%   bake(new_data = NULL)  fit <- lm(co2 ~ date_time_num_ns_1 + date_time_num_ns_2 +   date_time_num_ns_3 + date_time_sin_1 +   date_time_cos_1, data = dat)  preds <- tibble(   date_time = date_time,   co2 = fit$fitted.values,   type = \"predicted\" )  bind_rows(carbon_dioxide, preds) %>%   ggplot(aes(x = date_time, y = co2, color = type)) +   geom_line()"},{"path":"https://recipes.tidymodels.org/dev/reference/step_holiday.html","id":null,"dir":"Reference","previous_headings":"","what":"Holiday feature generator ‚Äî step_holiday","title":"Holiday feature generator ‚Äî step_holiday","text":"step_holiday() creates specification recipe step convert date data one binary indicator variables common holidays.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_holiday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Holiday feature generator ‚Äî step_holiday","text":"","code":"step_holiday(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   holidays = c(\"LaborDay\", \"NewYearsDay\", \"ChristmasDay\"),   columns = NULL,   keep_original_cols = TRUE,   skip = FALSE,   id = rand_id(\"holiday\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_holiday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Holiday feature generator ‚Äî step_holiday","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. selected variables class Date POSIXct. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. holidays character string includes least one holiday supported timeDate package. See timeDate::listHolidays() complete list. columns character string selected variable names. field placeholder populated prep() used. keep_original_cols logical keep original variables output. Defaults TRUE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_holiday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Holiday feature generator ‚Äî step_holiday","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_holiday.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Holiday feature generator ‚Äî step_holiday","text":"Unlike steps, step_holiday remove original date variables default. Set keep_original_cols FALSE remove .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_holiday.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Holiday feature generator ‚Äî step_holiday","text":"tidy() step, tibble returned columns terms, holiday , id: terms character, selectors variables selected holiday character, name holidays id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_holiday.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Holiday feature generator ‚Äî step_holiday","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_holiday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Holiday feature generator ‚Äî step_holiday","text":"","code":"library(lubridate)  examples <- data.frame(someday = ymd(\"2000-12-20\") + days(0:40)) holiday_rec <- recipe(~someday, examples) %>%   step_holiday(all_predictors())  holiday_rec <- prep(holiday_rec, training = examples) holiday_values <- bake(holiday_rec, new_data = examples) holiday_values #> # A tibble: 41 √ó 4 #>    someday    someday_LaborDay someday_NewYearsDay someday_ChristmasDay #>    <date>                <int>               <int>                <int> #>  1 2000-12-20                0                   0                    0 #>  2 2000-12-21                0                   0                    0 #>  3 2000-12-22                0                   0                    0 #>  4 2000-12-23                0                   0                    0 #>  5 2000-12-24                0                   0                    0 #>  6 2000-12-25                0                   0                    1 #>  7 2000-12-26                0                   0                    0 #>  8 2000-12-27                0                   0                    0 #>  9 2000-12-28                0                   0                    0 #> 10 2000-12-29                0                   0                    0 #> # ‚Ñπ 31 more rows"},{"path":"https://recipes.tidymodels.org/dev/reference/step_hyperbolic.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperbolic transformations ‚Äî step_hyperbolic","title":"Hyperbolic transformations ‚Äî step_hyperbolic","text":"step_hyperbolic() creates specification recipe step transform data using hyperbolic function.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_hyperbolic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperbolic transformations ‚Äî step_hyperbolic","text":"","code":"step_hyperbolic(   recipe,   ...,   role = NA,   trained = FALSE,   func = c(\"sinh\", \"cosh\", \"tanh\"),   inverse = TRUE,   columns = NULL,   skip = FALSE,   id = rand_id(\"hyperbolic\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_hyperbolic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperbolic transformations ‚Äî step_hyperbolic","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. func character value function. Valid values \"sinh\", \"cosh\", \"tanh\". inverse logical: inverse function used? columns character string selected variable names. field placeholder populated prep() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_hyperbolic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperbolic transformations ‚Äî step_hyperbolic","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_hyperbolic.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Hyperbolic transformations ‚Äî step_hyperbolic","text":"tidy() step, tibble returned columns terms, inverse, func , id: terms character, selectors variables selected inverse logical, inverse function used func character, name function. \"sinh\", \"cosh\", \"tanh\" id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_hyperbolic.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Hyperbolic transformations ‚Äî step_hyperbolic","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_hyperbolic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hyperbolic transformations ‚Äî step_hyperbolic","text":"","code":"set.seed(313) examples <- matrix(rnorm(40), ncol = 2) examples <- as.data.frame(examples)  rec <- recipe(~ V1 + V2, data = examples)  cos_trans <- rec %>%   step_hyperbolic(     all_numeric_predictors(),     func = \"cosh\", inverse = FALSE   )  cos_obj <- prep(cos_trans, training = examples)  transformed_te <- bake(cos_obj, examples) plot(examples$V1, transformed_te$V1)   tidy(cos_trans, number = 1) #> # A tibble: 1 √ó 4 #>   terms                    inverse func  id               #>   <chr>                    <lgl>   <chr> <chr>            #> 1 all_numeric_predictors() FALSE   cosh  hyperbolic_IhS7o tidy(cos_obj, number = 1) #> # A tibble: 2 √ó 4 #>   terms inverse func  id               #>   <chr> <lgl>   <chr> <chr>            #> 1 V1    FALSE   cosh  hyperbolic_IhS7o #> 2 V2    FALSE   cosh  hyperbolic_IhS7o"},{"path":"https://recipes.tidymodels.org/dev/reference/step_ica.html","id":null,"dir":"Reference","previous_headings":"","what":"ICA signal extraction ‚Äî step_ica","title":"ICA signal extraction ‚Äî step_ica","text":"step_ica() creates specification recipe step convert numeric data one independent components.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ica.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ICA signal extraction ‚Äî step_ica","text":"","code":"step_ica(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   num_comp = 5,   options = list(method = \"C\"),   seed = sample.int(10000, 5),   res = NULL,   columns = NULL,   prefix = \"IC\",   keep_original_cols = FALSE,   skip = FALSE,   id = rand_id(\"ica\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_ica.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ICA signal extraction ‚Äî step_ica","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. num_comp number components retain new predictors. num_comp greater number columns number possible components, smaller value used. num_comp = 0 set transformation done selected variables stay unchanged, regardless value keep_original_cols. options list options fastICA::fastICA(). defaults set . Note arguments X n.comp passed . seed single integer set random number stream prior running ICA. res fastICA::fastICA() object stored preprocessing step trained prep(). columns character string selected variable names. field placeholder populated prep() used. prefix character string prefix resulting new variables. See notes . keep_original_cols logical keep original variables output. Defaults FALSE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ica.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ICA signal extraction ‚Äî step_ica","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ica.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ICA signal extraction ‚Äî step_ica","text":"Independent component analysis (ICA) transformation group variables produces new set artificial features components. ICA assumes variables mixtures set distinct, non-Gaussian signals attempts transform data isolate signals. Like PCA, components statistically independent one another. means can used combat large inter-variables correlations data set. Also like PCA, advisable center scale variables prior running ICA. package produces components using \"FastICA\" methodology (see reference ). step requires dimRed fastICA packages. installed, step stop note installing packages. argument num_comp controls number components retained (original variables used derive components removed data). new components names begin prefix sequence numbers. variable names padded zeros. example, num_comp < 10, names IC1 - IC9. num_comp = 101, names IC1 - IC101.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ica.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"ICA signal extraction ‚Äî step_ica","text":"tidy() step, tibble returned columns terms, component, value , id: terms character, selectors variables selected component character, name component value numeric, loading id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ica.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"ICA signal extraction ‚Äî step_ica","text":"step 1 tuning parameters: num_comp: # Components (type: integer, default: 5)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ica.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"ICA signal extraction ‚Äî step_ica","text":"underlying operation allow case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ica.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ICA signal extraction ‚Äî step_ica","text":"Hyvarinen, ., Oja, E. (2000). Independent component analysis: algorithms applications. Neural Networks, 13(4-5), 411-430.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_ica.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ICA signal extraction ‚Äî step_ica","text":"","code":"if (FALSE) { # from fastICA::fastICA set.seed(131) S <- matrix(runif(400), 200, 2) A <- matrix(c(1, 1, -1, 3), 2, 2, byrow = TRUE) X <- as.data.frame(S %*% A)  tr <- X[1:100, ] te <- X[101:200, ]  rec <- recipe(~., data = tr)  ica_trans <- step_center(rec, V1, V2) ica_trans <- step_scale(ica_trans, V1, V2) ica_trans <- step_ica(ica_trans, V1, V2, num_comp = 2)  ica_estimates <- prep(ica_trans, training = tr) ica_data <- bake(ica_estimates, te)  plot(te$V1, te$V2) plot(ica_data$IC1, ica_data$IC2)  tidy(ica_trans, number = 3) tidy(ica_estimates, number = 3) }"},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_bag.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute via bagged trees ‚Äî step_impute_bag","title":"Impute via bagged trees ‚Äî step_impute_bag","text":"step_impute_bag() creates specification recipe step create bagged tree models impute missing data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_bag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute via bagged trees ‚Äî step_impute_bag","text":"","code":"step_impute_bag(   recipe,   ...,   role = NA,   trained = FALSE,   impute_with = imp_vars(all_predictors()),   trees = 25,   models = NULL,   options = list(keepX = FALSE),   seed_val = sample.int(10^4, 1),   skip = FALSE,   id = rand_id(\"impute_bag\") )  imp_vars(...)"},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_bag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute via bagged trees ‚Äî step_impute_bag","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables imputed. used imp_vars, dots indicate variables used predict missing data variable. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. impute_with call imp_vars specify variables used impute variables can include specific variable names separated commas different selectors (see selections()). column included lists imputed imputation predictor, removed latter used impute . trees integer number bagged trees use model. models ipred::ipredbagg() objects stored bagged trees trained prep(). options list options ipred::ipredbagg(). Defaults set arguments nbagg keepX others can passed . Note arguments X y passed . seed_val integer used create reproducible models. seed used across imputation models. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_bag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute via bagged trees ‚Äî step_impute_bag","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_bag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute via bagged trees ‚Äî step_impute_bag","text":"variable requiring imputation, bagged tree created outcome variable interest predictors variables listed impute_with formula. One advantage bagged tree can accept predictors missing values . imputation method can used variable interest (predictors) numeric categorical. Imputed categorical variables remain categorical. Also, integers imputed integer . Note variable imputed also impute_with, variable ignored. possible missing values still occur imputation large majority () imputing variables also missing. recipes 0.1.16, function name changed step_bagimpute() step_impute_bag().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_bag.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Impute via bagged trees ‚Äî step_impute_bag","text":"tidy() step, tibble columns terms (selectors variables selected) model (bagged tree object) returned. tidy() step, tibble returned columns terms, model , id: terms character, selectors variables selected model list, bagged tree object id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_bag.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Impute via bagged trees ‚Äî step_impute_bag","text":"step 1 tuning parameters: trees: # Trees (type: integer, default: 25)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_bag.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Impute via bagged trees ‚Äî step_impute_bag","text":"underlying operation allow case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_bag.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Impute via bagged trees ‚Äî step_impute_bag","text":"Kuhn, M. Johnson, K. (2013). Applied Predictive Modeling. Springer Verlag.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_bag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute via bagged trees ‚Äî step_impute_bag","text":"","code":"data(\"credit_data\", package = \"modeldata\")  ## missing data per column vapply(credit_data, function(x) mean(is.na(x)), c(num = 0)) #>       Status    Seniority         Home         Time          Age  #> 0.0000000000 0.0000000000 0.0013471037 0.0000000000 0.0000000000  #>      Marital      Records          Job     Expenses       Income  #> 0.0002245173 0.0000000000 0.0004490346 0.0000000000 0.0855410867  #>       Assets         Debt       Amount        Price  #> 0.0105523125 0.0040413112 0.0000000000 0.0000000000   set.seed(342) in_training <- sample(1:nrow(credit_data), 2000)  credit_tr <- credit_data[in_training, ] credit_te <- credit_data[-in_training, ] missing_examples <- c(14, 394, 565)  rec <- recipe(Price ~ ., data = credit_tr) if (FALSE) { # \\dontrun{ impute_rec <- rec %>%   step_impute_bag(Status, Home, Marital, Job, Income, Assets, Debt)  imp_models <- prep(impute_rec, training = credit_tr)  imputed_te <- bake(imp_models, new_data = credit_te)  credit_te[missing_examples, ] imputed_te[missing_examples, names(credit_te)]  tidy(impute_rec, number = 1) tidy(imp_models, number = 1)  ## Specifying which variables to imputate with  impute_rec <- rec %>%   step_impute_bag(Status, Home, Marital, Job, Income, Assets, Debt,     impute_with = imp_vars(Time, Age, Expenses),     # for quick execution, nbagg lowered     options = list(nbagg = 5, keepX = FALSE)   )  imp_models <- prep(impute_rec, training = credit_tr)  imputed_te <- bake(imp_models, new_data = credit_te)  credit_te[missing_examples, ] imputed_te[missing_examples, names(credit_te)]  tidy(impute_rec, number = 1) tidy(imp_models, number = 1) } # }"},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute via k-nearest neighbors ‚Äî step_impute_knn","title":"Impute via k-nearest neighbors ‚Äî step_impute_knn","text":"step_impute_knn() creates specification recipe step impute missing data using nearest neighbors.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute via k-nearest neighbors ‚Äî step_impute_knn","text":"","code":"step_impute_knn(   recipe,   ...,   role = NA,   trained = FALSE,   neighbors = 5,   impute_with = imp_vars(all_predictors()),   options = list(nthread = 1, eps = 1e-08),   ref_data = NULL,   columns = NULL,   skip = FALSE,   id = rand_id(\"impute_knn\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute via k-nearest neighbors ‚Äî step_impute_knn","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables imputed. used imp_vars, dots indicate variables used predict missing data variable. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. neighbors number neighbors. impute_with call imp_vars specify variables used impute variables can include specific variable names separated commas different selectors (see selections()). column included lists imputed imputation predictor, removed latter used impute . options named list options pass gower::gower_topn(). Available options currently nthread eps. ref_data tibble data reflect data preprocessing done point imputation step. NULL step trained prep(). columns character string selected variable names. field placeholder populated prep() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute via k-nearest neighbors ‚Äî step_impute_knn","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_knn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute via k-nearest neighbors ‚Äî step_impute_knn","text":"step uses training set impute data sets. distance function available Gower's distance can used mixtures nominal numeric data. nearest neighbors determined, mode used predictor nominal variables mean used numeric data. Note , underlying data integer, mean converted integer . Note variable imputed also impute_with, variable ignored. possible missing values still occur imputation large majority () imputing variables also missing. recipes 0.1.16, function name changed step_knnimpute() step_impute_knn().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_knn.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Impute via k-nearest neighbors ‚Äî step_impute_knn","text":"tidy() step, tibble returned columns terms, predictors, neighbors , id: terms character, selectors variables selected predictors character, selected predictors used impute neighbors integer, number neighbors id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_knn.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Impute via k-nearest neighbors ‚Äî step_impute_knn","text":"step 1 tuning parameters: neighbors: # Nearest Neighbors (type: integer, default: 5)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_knn.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Impute via k-nearest neighbors ‚Äî step_impute_knn","text":"underlying operation allow case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_knn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Impute via k-nearest neighbors ‚Äî step_impute_knn","text":"Gower, C. (1971) \"general coefficient similarity properties,\" Biometrics, 857-871.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute via k-nearest neighbors ‚Äî step_impute_knn","text":"","code":"library(recipes) data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ] biomass_te_whole <- biomass_te  # induce some missing data at random set.seed(9039) carb_missing <- sample(1:nrow(biomass_te), 3) nitro_missing <- sample(1:nrow(biomass_te), 3)  biomass_te$carbon[carb_missing] <- NA biomass_te$nitrogen[nitro_missing] <- NA  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  ratio_recipe <- rec %>%   step_impute_knn(all_predictors(), neighbors = 3) ratio_recipe2 <- prep(ratio_recipe, training = biomass_tr) imputed <- bake(ratio_recipe2, biomass_te)  # how well did it work? summary(biomass_te_whole$carbon) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   27.80   44.24   47.30   47.96   49.00   79.34  cbind(   before = biomass_te_whole$carbon[carb_missing],   after = imputed$carbon[carb_missing] ) #>      before    after #> [1,]  46.83 47.43000 #> [2,]  47.80 47.53333 #> [3,]  46.40 46.21000  summary(biomass_te_whole$nitrogen) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   0.010   0.295   0.690   1.092   1.450   4.790  cbind(   before = biomass_te_whole$nitrogen[nitro_missing],   after = imputed$nitrogen[nitro_missing] ) #>      before      after #> [1,]   1.24 0.59333333 #> [2,]   0.30 0.92333333 #> [3,]   0.06 0.04666667  tidy(ratio_recipe, number = 1) #> # A tibble: 1 √ó 4 #>   terms            predictors neighbors id               #>   <chr>            <chr>          <dbl> <chr>            #> 1 all_predictors() NA                 3 impute_knn_iyPXM tidy(ratio_recipe2, number = 1) #> # A tibble: 20 √ó 4 #>    terms    predictors neighbors id               #>    <chr>    <chr>          <dbl> <chr>            #>  1 carbon   hydrogen           3 impute_knn_iyPXM #>  2 carbon   oxygen             3 impute_knn_iyPXM #>  3 carbon   nitrogen           3 impute_knn_iyPXM #>  4 carbon   sulfur             3 impute_knn_iyPXM #>  5 hydrogen carbon             3 impute_knn_iyPXM #>  6 hydrogen oxygen             3 impute_knn_iyPXM #>  7 hydrogen nitrogen           3 impute_knn_iyPXM #>  8 hydrogen sulfur             3 impute_knn_iyPXM #>  9 oxygen   carbon             3 impute_knn_iyPXM #> 10 oxygen   hydrogen           3 impute_knn_iyPXM #> 11 oxygen   nitrogen           3 impute_knn_iyPXM #> 12 oxygen   sulfur             3 impute_knn_iyPXM #> 13 nitrogen carbon             3 impute_knn_iyPXM #> 14 nitrogen hydrogen           3 impute_knn_iyPXM #> 15 nitrogen oxygen             3 impute_knn_iyPXM #> 16 nitrogen sulfur             3 impute_knn_iyPXM #> 17 sulfur   carbon             3 impute_knn_iyPXM #> 18 sulfur   hydrogen           3 impute_knn_iyPXM #> 19 sulfur   oxygen             3 impute_knn_iyPXM #> 20 sulfur   nitrogen           3 impute_knn_iyPXM"},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute numeric variables via a linear model ‚Äî step_impute_linear","title":"Impute numeric variables via a linear model ‚Äî step_impute_linear","text":"step_impute_linear() creates specification recipe step create linear regression models impute missing data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute numeric variables via a linear model ‚Äî step_impute_linear","text":"","code":"step_impute_linear(   recipe,   ...,   role = NA,   trained = FALSE,   impute_with = imp_vars(all_predictors()),   models = NULL,   skip = FALSE,   id = rand_id(\"impute_linear\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute numeric variables via a linear model ‚Äî step_impute_linear","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables imputed; variables must type numeric. used imp_vars, dots indicate variables used predict missing data variable. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. impute_with call imp_vars specify variables used impute variables can include specific variable names separated commas different selectors (see selections()). column included lists imputed imputation predictor, removed latter used impute . models lm() objects stored linear models trained prep(). skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute numeric variables via a linear model ‚Äî step_impute_linear","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_linear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute numeric variables via a linear model ‚Äî step_impute_linear","text":"variable requiring imputation, linear model fit outcome variable interest predictors variables listed impute_with formula. Note variable imputed also impute_with, variable ignored. variable(s) imputed must type numeric. imputed values keep type original data (.e, model predictions coerced integer needed). Since linear regression, imputation model uses complete cases training set predictors.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_linear.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Impute numeric variables via a linear model ‚Äî step_impute_linear","text":"tidy() step, tibble returned columns terms, model , id: terms character, selectors variables selected model list, list fitted lm() models id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_linear.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Impute numeric variables via a linear model ‚Äî step_impute_linear","text":"step performs unsupervised operation can utilize case weights. result, case weights used frequency weights. information, see documentation case_weights examples tidymodels.org.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_linear.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Impute numeric variables via a linear model ‚Äî step_impute_linear","text":"Kuhn, M. Johnson, K. (2013). Feature Engineering Selection https://bookdown.org/max/FES/handling-missing-data.html","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute numeric variables via a linear model ‚Äî step_impute_linear","text":"","code":"data(ames, package = \"modeldata\") set.seed(393) ames_missing <- ames ames_missing$Longitude[sample(1:nrow(ames), 200)] <- NA  imputed_ames <-   recipe(Sale_Price ~ ., data = ames_missing) %>%   step_impute_linear(     Longitude,     impute_with = imp_vars(Latitude, Neighborhood, MS_Zoning, Alley)   ) %>%   prep(ames_missing)  imputed <-   bake(imputed_ames, new_data = ames_missing) %>%   dplyr::rename(imputed = Longitude) %>%   bind_cols(ames %>% dplyr::select(original = Longitude)) %>%   bind_cols(ames_missing %>% dplyr::select(Longitude)) %>%   dplyr::filter(is.na(Longitude))  library(ggplot2) ggplot(imputed, aes(x = original, y = imputed)) +   geom_abline(col = \"green\") +   geom_point(alpha = .3) +   coord_equal() +   labs(title = \"Imputed Values\")"},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_lower.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute numeric data below the threshold of measurement ‚Äî step_impute_lower","title":"Impute numeric data below the threshold of measurement ‚Äî step_impute_lower","text":"step_impute_lower() creates specification recipe step designed cases non-negative numeric data measured known value. cases, one method imputing data substitute truncated value random uniform number zero truncation point.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_lower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute numeric data below the threshold of measurement ‚Äî step_impute_lower","text":"","code":"step_impute_lower(   recipe,   ...,   role = NA,   trained = FALSE,   threshold = NULL,   skip = FALSE,   id = rand_id(\"impute_lower\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_lower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute numeric data below the threshold of measurement ‚Äî step_impute_lower","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. threshold named numeric vector lower bounds. NULL computed prep(). skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_lower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute numeric data below the threshold of measurement ‚Äî step_impute_lower","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_lower.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute numeric data below the threshold of measurement ‚Äî step_impute_lower","text":"step_impute_lower estimates variable minimums data used training argument prep.recipe. bake.recipe simulates value data minimum random uniform value zero minimum. recipes 0.1.16, function name changed step_lowerimpute() step_impute_lower().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_lower.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Impute numeric data below the threshold of measurement ‚Äî step_impute_lower","text":"tidy() step, tibble returned columns terms, value , id: terms character, selectors variables selected value numeric, estimated value id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_lower.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Impute numeric data below the threshold of measurement ‚Äî step_impute_lower","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_lower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute numeric data below the threshold of measurement ‚Äî step_impute_lower","text":"","code":"library(recipes) data(biomass, package = \"modeldata\")  ## Truncate some values to emulate what a lower limit of ## the measurement system might look like  biomass$carbon <- ifelse(biomass$carbon > 40, biomass$carbon, 40) biomass$hydrogen <- ifelse(biomass$hydrogen > 5, biomass$carbon, 5)  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  impute_rec <- rec %>%   step_impute_lower(carbon, hydrogen)  tidy(impute_rec, number = 1) #> # A tibble: 2 √ó 3 #>   terms    value id                 #>   <chr>    <dbl> <chr>              #> 1 carbon      NA impute_lower_b4CM3 #> 2 hydrogen    NA impute_lower_b4CM3  impute_rec <- prep(impute_rec, training = biomass_tr)  tidy(impute_rec, number = 1) #> # A tibble: 2 √ó 3 #>   terms    value id                 #>   <chr>    <dbl> <chr>              #> 1 carbon      40 impute_lower_b4CM3 #> 2 hydrogen     5 impute_lower_b4CM3  transformed_te <- bake(impute_rec, biomass_te)  plot(transformed_te$carbon, biomass_te$carbon,   ylab = \"pre-imputation\", xlab = \"imputed\" )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute numeric data using the mean ‚Äî step_impute_mean","title":"Impute numeric data using the mean ‚Äî step_impute_mean","text":"step_impute_mean() creates specification recipe step substitute missing values numeric variables training set mean variables.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute numeric data using the mean ‚Äî step_impute_mean","text":"","code":"step_impute_mean(   recipe,   ...,   role = NA,   trained = FALSE,   means = NULL,   trim = 0,   skip = FALSE,   id = rand_id(\"impute_mean\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute numeric data using the mean ‚Äî step_impute_mean","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. means named numeric vector means. NULL computed prep(). Note , original data integers, mean converted integer maintain data type. trim fraction (0 0.5) observations trimmed end variables mean computed. Values trim outside range taken nearest endpoint. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute numeric data using the mean ‚Äî step_impute_mean","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_mean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute numeric data using the mean ‚Äî step_impute_mean","text":"step_impute_mean estimates variable means data used training argument prep.recipe. bake.recipe applies new values new data sets using averages. recipes 0.1.16, function name changed step_meanimpute() step_impute_mean().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_mean.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Impute numeric data using the mean ‚Äî step_impute_mean","text":"tidy() step, tibble returned columns terms, value , id: terms character, selectors variables selected value numeric, mean value id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_mean.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Impute numeric data using the mean ‚Äî step_impute_mean","text":"step 1 tuning parameters: trim: Amount Trimming (type: double, default: 0)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_mean.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Impute numeric data using the mean ‚Äî step_impute_mean","text":"step performs unsupervised operation can utilize case weights. result, case weights used frequency weights. information, see documentation case_weights examples tidymodels.org.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute numeric data using the mean ‚Äî step_impute_mean","text":"","code":"data(\"credit_data\", package = \"modeldata\")  ## missing data per column vapply(credit_data, function(x) mean(is.na(x)), c(num = 0)) #>       Status    Seniority         Home         Time          Age  #> 0.0000000000 0.0000000000 0.0013471037 0.0000000000 0.0000000000  #>      Marital      Records          Job     Expenses       Income  #> 0.0002245173 0.0000000000 0.0004490346 0.0000000000 0.0855410867  #>       Assets         Debt       Amount        Price  #> 0.0105523125 0.0040413112 0.0000000000 0.0000000000   set.seed(342) in_training <- sample(1:nrow(credit_data), 2000)  credit_tr <- credit_data[in_training, ] credit_te <- credit_data[-in_training, ] missing_examples <- c(14, 394, 565)  rec <- recipe(Price ~ ., data = credit_tr)  impute_rec <- rec %>%   step_impute_mean(Income, Assets, Debt)  imp_models <- prep(impute_rec, training = credit_tr)  imputed_te <- bake(imp_models, new_data = credit_te)  credit_te[missing_examples, ] #>      Status Seniority  Home Time Age Marital Records     Job Expenses #> 28     good        15 owner   36  43 married      no   fixed       75 #> 688    good         2  rent   60  32 married      no partime       87 #> 1002   good        21  rent   60  39 married      no   fixed      124 #>      Income Assets Debt Amount Price #> 28      251   4000    0   1800  2557 #> 688     115   2000    0   1250  1517 #> 1002    191   2000    0   2000  2536 imputed_te[missing_examples, names(credit_te)] #> # A tibble: 3 √ó 14 #>   Status Seniority Home   Time   Age Marital Records Job   Expenses Income #>   <fct>      <int> <fct> <int> <int> <fct>   <fct>   <fct>    <int>  <int> #> 1 good          15 owner    36    43 married no      fixed       75    251 #> 2 good           2 rent     60    32 married no      part‚Ä¶       87    115 #> 3 good          21 rent     60    39 married no      fixed      124    191 #> # ‚Ñπ 4 more variables: Assets <int>, Debt <int>, Amount <int>, Price <int>  tidy(impute_rec, number = 1) #> # A tibble: 3 √ó 3 #>   terms  value id                #>   <chr>  <dbl> <chr>             #> 1 Income    NA impute_mean_Hlm2y #> 2 Assets    NA impute_mean_Hlm2y #> 3 Debt      NA impute_mean_Hlm2y tidy(imp_models, number = 1) #> # A tibble: 3 √ó 3 #>   terms  value id                #>   <chr>  <dbl> <chr>             #> 1 Income   142 impute_mean_Hlm2y #> 2 Assets  5378 impute_mean_Hlm2y #> 3 Debt     364 impute_mean_Hlm2y"},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute numeric data using the median ‚Äî step_impute_median","title":"Impute numeric data using the median ‚Äî step_impute_median","text":"step_impute_median() creates specification recipe step substitute missing values numeric variables training set median variables.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute numeric data using the median ‚Äî step_impute_median","text":"","code":"step_impute_median(   recipe,   ...,   role = NA,   trained = FALSE,   medians = NULL,   skip = FALSE,   id = rand_id(\"impute_median\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute numeric data using the median ‚Äî step_impute_median","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. medians named numeric vector medians. NULL computed prep(). Note , original data integers, median converted integer maintain data type. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute numeric data using the median ‚Äî step_impute_median","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_median.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute numeric data using the median ‚Äî step_impute_median","text":"step_impute_median estimates variable medians data used training argument prep.recipe. bake.recipe applies new values new data sets using medians. recipes 0.1.16, function name changed step_medianimpute() step_impute_median().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_median.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Impute numeric data using the median ‚Äî step_impute_median","text":"tidy() step, tibble returned columns terms, value , id: terms character, selectors variables selected value numeric, median value id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_median.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Impute numeric data using the median ‚Äî step_impute_median","text":"step performs unsupervised operation can utilize case weights. result, case weights used frequency weights. information, see documentation case_weights examples tidymodels.org.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_median.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute numeric data using the median ‚Äî step_impute_median","text":"","code":"data(\"credit_data\", package = \"modeldata\")  ## missing data per column vapply(credit_data, function(x) mean(is.na(x)), c(num = 0)) #>       Status    Seniority         Home         Time          Age  #> 0.0000000000 0.0000000000 0.0013471037 0.0000000000 0.0000000000  #>      Marital      Records          Job     Expenses       Income  #> 0.0002245173 0.0000000000 0.0004490346 0.0000000000 0.0855410867  #>       Assets         Debt       Amount        Price  #> 0.0105523125 0.0040413112 0.0000000000 0.0000000000   set.seed(342) in_training <- sample(1:nrow(credit_data), 2000)  credit_tr <- credit_data[in_training, ] credit_te <- credit_data[-in_training, ] missing_examples <- c(14, 394, 565)  rec <- recipe(Price ~ ., data = credit_tr)  impute_rec <- rec %>%   step_impute_median(Income, Assets, Debt)  imp_models <- prep(impute_rec, training = credit_tr)  imputed_te <- bake(imp_models, new_data = credit_te)  credit_te[missing_examples, ] #>      Status Seniority  Home Time Age Marital Records     Job Expenses #> 28     good        15 owner   36  43 married      no   fixed       75 #> 688    good         2  rent   60  32 married      no partime       87 #> 1002   good        21  rent   60  39 married      no   fixed      124 #>      Income Assets Debt Amount Price #> 28      251   4000    0   1800  2557 #> 688     115   2000    0   1250  1517 #> 1002    191   2000    0   2000  2536 imputed_te[missing_examples, names(credit_te)] #> # A tibble: 3 √ó 14 #>   Status Seniority Home   Time   Age Marital Records Job   Expenses Income #>   <fct>      <int> <fct> <int> <int> <fct>   <fct>   <fct>    <int>  <int> #> 1 good          15 owner    36    43 married no      fixed       75    251 #> 2 good           2 rent     60    32 married no      part‚Ä¶       87    115 #> 3 good          21 rent     60    39 married no      fixed      124    191 #> # ‚Ñπ 4 more variables: Assets <int>, Debt <int>, Amount <int>, Price <int>  tidy(impute_rec, number = 1) #> # A tibble: 3 √ó 3 #>   terms  value id                  #>   <chr>  <dbl> <chr>               #> 1 Income    NA impute_median_Hlm2y #> 2 Assets    NA impute_median_Hlm2y #> 3 Debt      NA impute_median_Hlm2y tidy(imp_models, number = 1) #> # A tibble: 3 √ó 3 #>   terms  value id                  #>   <chr>  <dbl> <chr>               #> 1 Income   125 impute_median_Hlm2y #> 2 Assets  3000 impute_median_Hlm2y #> 3 Debt       0 impute_median_Hlm2y"},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute nominal data using the most common value ‚Äî step_impute_mode","title":"Impute nominal data using the most common value ‚Äî step_impute_mode","text":"step_impute_mode() creates specification recipe step substitute missing values nominal variables training set mode variables.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute nominal data using the most common value ‚Äî step_impute_mode","text":"","code":"step_impute_mode(   recipe,   ...,   role = NA,   trained = FALSE,   modes = NULL,   ptype = NULL,   skip = FALSE,   id = rand_id(\"impute_mode\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute nominal data using the most common value ‚Äî step_impute_mode","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. modes named character vector modes. NULL computed prep(). ptype data frame prototype cast new data sets . commonly 0-row slice training set. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_mode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute nominal data using the most common value ‚Äî step_impute_mode","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_mode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute nominal data using the most common value ‚Äî step_impute_mode","text":"step_impute_mode estimates variable modes data used training argument prep.recipe. bake.recipe applies new values new data sets using values. training set data one mode, one selected random. recipes 0.1.16, function name changed step_modeimpute() step_impute_mode().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_mode.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Impute nominal data using the most common value ‚Äî step_impute_mode","text":"tidy() step, tibble returned columns terms, value , id: terms character, selectors variables selected value character, mode value id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_mode.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Impute nominal data using the most common value ‚Äî step_impute_mode","text":"step performs unsupervised operation can utilize case weights. result, case weights used frequency weights. information, see documentation case_weights examples tidymodels.org.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_mode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute nominal data using the most common value ‚Äî step_impute_mode","text":"","code":"data(\"credit_data\", package = \"modeldata\")  ## missing data per column vapply(credit_data, function(x) mean(is.na(x)), c(num = 0)) #>       Status    Seniority         Home         Time          Age  #> 0.0000000000 0.0000000000 0.0013471037 0.0000000000 0.0000000000  #>      Marital      Records          Job     Expenses       Income  #> 0.0002245173 0.0000000000 0.0004490346 0.0000000000 0.0855410867  #>       Assets         Debt       Amount        Price  #> 0.0105523125 0.0040413112 0.0000000000 0.0000000000   set.seed(342) in_training <- sample(1:nrow(credit_data), 2000)  credit_tr <- credit_data[in_training, ] credit_te <- credit_data[-in_training, ] missing_examples <- c(14, 394, 565)  rec <- recipe(Price ~ ., data = credit_tr)  impute_rec <- rec %>%   step_impute_mode(Status, Home, Marital)  imp_models <- prep(impute_rec, training = credit_tr)  imputed_te <- bake(imp_models, new_data = credit_te)  table(credit_te$Home, imputed_te$Home, useNA = \"always\") #>           #>           ignore other owner parents priv rent <NA> #>   ignore      13     0     0       0    0    0    0 #>   other        0   176     0       0    0    0    0 #>   owner        0     0  1171       0    0    0    0 #>   parents      0     0     0     436    0    0    0 #>   priv         0     0     0       0  135    0    0 #>   rent         0     0     0       0    0  519    0 #>   <NA>         0     0     4       0    0    0    0  tidy(impute_rec, number = 1) #> # A tibble: 3 √ó 3 #>   terms   value id                #>   <chr>   <chr> <chr>             #> 1 Status  NA    impute_mode_Hlm2y #> 2 Home    NA    impute_mode_Hlm2y #> 3 Marital NA    impute_mode_Hlm2y tidy(imp_models, number = 1) #> # A tibble: 3 √ó 3 #>   terms   value   id                #>   <chr>   <chr>   <chr>             #> 1 Status  good    impute_mode_Hlm2y #> 2 Home    owner   impute_mode_Hlm2y #> 3 Marital married impute_mode_Hlm2y"},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_roll.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute numeric data using a rolling window statistic ‚Äî step_impute_roll","title":"Impute numeric data using a rolling window statistic ‚Äî step_impute_roll","text":"step_impute_roll() creates specification recipe step substitute missing values numeric variables measure location (e.g. median) within moving window.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_roll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute numeric data using a rolling window statistic ‚Äî step_impute_roll","text":"","code":"step_impute_roll(   recipe,   ...,   role = NA,   trained = FALSE,   columns = NULL,   statistic = median,   window = 5,   skip = FALSE,   id = rand_id(\"impute_roll\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_roll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute numeric data using a rolling window statistic ‚Äî step_impute_roll","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables imputed; columns must non-integer numerics (.e., double precision). See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. columns character string selected variable names. field placeholder populated prep() used. statistic function single argument data compute imputed value. complete values passed function return double precision value. window size window around point imputed. odd integer greater one. See Details discussion points ends series. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_roll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute numeric data using a rolling window statistic ‚Äî step_impute_roll","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_roll.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute numeric data using a rolling window statistic ‚Äî step_impute_roll","text":"tails, window shifted towards ends. example, 5-point window, windows first four points 1:5, 1:5, 1:5, 2:6. missing data window, passed function. data window missing, missing value returned. statistics calculated training set values imputation. means previous data within window missing, imputed values included window data used imputation. words, imputation know anything previous imputations series prior current point. recipes 0.1.16, function name changed step_rollimpute() step_impute_roll().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_roll.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Impute numeric data using a rolling window statistic ‚Äî step_impute_roll","text":"tidy() step, tibble returned columns terms, window , id: terms character, selectors variables selected window integer, window size id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_roll.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Impute numeric data using a rolling window statistic ‚Äî step_impute_roll","text":"step 2 tuning parameters: statistic: Rolling Summary Statistic (type: character, default: median) window: Window Size (type: integer, default: 5)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_roll.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Impute numeric data using a rolling window statistic ‚Äî step_impute_roll","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_impute_roll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute numeric data using a rolling window statistic ‚Äî step_impute_roll","text":"","code":"library(lubridate)  set.seed(145) example_data <-   data.frame(     day = ymd(\"2012-06-07\") + days(1:12),     x1 = round(runif(12), 2),     x2 = round(runif(12), 2),     x3 = round(runif(12), 2)   ) example_data$x1[c(1, 5, 6)] <- NA example_data$x2[c(1:4, 10)] <- NA  library(recipes) seven_pt <- recipe(~., data = example_data) %>%   update_role(day, new_role = \"time_index\") %>%   step_impute_roll(all_numeric_predictors(), window = 7) %>%   prep(training = example_data)  # The training set: bake(seven_pt, new_data = NULL) #> # A tibble: 12 √ó 4 #>    day           x1    x2    x3 #>    <date>     <dbl> <dbl> <dbl> #>  1 2012-06-08  0.89 0.79   0.58 #>  2 2012-06-09  0.53 0.79   0.45 #>  3 2012-06-10  0.86 0.79   0.67 #>  4 2012-06-11  0.92 0.79   0.05 #>  5 2012-06-12  0.86 0.88   0.27 #>  6 2012-06-13  0.86 0.6    0.13 #>  7 2012-06-14  0.97 0.79   0.67 #>  8 2012-06-15  0.85 0.27   0.16 #>  9 2012-06-16  0.86 0.11   0.36 #> 10 2012-06-17  0.96 0.435  0.09 #> 11 2012-06-18  0.91 0.16   0.76 #> 12 2012-06-19  0.07 0.86   0.74"},{"path":"https://recipes.tidymodels.org/dev/reference/step_indicate_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Create missing data column indicators ‚Äî step_indicate_na","title":"Create missing data column indicators ‚Äî step_indicate_na","text":"step_indicate_na() creates specification recipe step create append additional binary columns data set indicate observations missing.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_indicate_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create missing data column indicators ‚Äî step_indicate_na","text":"","code":"step_indicate_na(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   columns = NULL,   prefix = \"na_ind\",   keep_original_cols = TRUE,   skip = FALSE,   id = rand_id(\"indicate_na\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_indicate_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create missing data column indicators ‚Äî step_indicate_na","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. columns character string selected variable names. field placeholder populated prep() used. prefix character string prefix resulting new variables. Defaults \"na_ind\". keep_original_cols logical keep original variables output. Defaults TRUE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_indicate_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create missing data column indicators ‚Äî step_indicate_na","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_indicate_na.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Create missing data column indicators ‚Äî step_indicate_na","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_indicate_na.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Create missing data column indicators ‚Äî step_indicate_na","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_indicate_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create missing data column indicators ‚Äî step_indicate_na","text":"","code":"data(\"credit_data\", package = \"modeldata\")  ## missing data per column purrr::map_dbl(credit_data, function(x) mean(is.na(x))) #>       Status    Seniority         Home         Time          Age  #> 0.0000000000 0.0000000000 0.0013471037 0.0000000000 0.0000000000  #>      Marital      Records          Job     Expenses       Income  #> 0.0002245173 0.0000000000 0.0004490346 0.0000000000 0.0855410867  #>       Assets         Debt       Amount        Price  #> 0.0105523125 0.0040413112 0.0000000000 0.0000000000   set.seed(342) in_training <- sample(1:nrow(credit_data), 2000)  credit_tr <- credit_data[in_training, ] credit_te <- credit_data[-in_training, ]  rec <- recipe(Price ~ ., data = credit_tr)  impute_rec <- rec %>%   step_indicate_na(Income, Assets, Debt)  imp_models <- prep(impute_rec, training = credit_tr)  imputed_te <- bake(imp_models, new_data = credit_te)"},{"path":"https://recipes.tidymodels.org/dev/reference/step_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert values to predefined integers ‚Äî step_integer","title":"Convert values to predefined integers ‚Äî step_integer","text":"step_integer() creates specification recipe step convert new data set integers based original data values.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert values to predefined integers ‚Äî step_integer","text":"","code":"step_integer(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   strict = TRUE,   zero_based = FALSE,   key = NULL,   skip = FALSE,   id = rand_id(\"integer\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert values to predefined integers ‚Äî step_integer","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. strict logical whether values returned integers (opposed double). zero_based logical whether integers start zero new values appended largest integer. key list contains information needed create integer variables variable contained terms. NULL step trained prep(). skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert values to predefined integers ‚Äî step_integer","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_integer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert values to predefined integers ‚Äî step_integer","text":"step_integer determine unique values variable training set (excluding missing values), order , assign integers value. baked, data point translated corresponding integer value zero yet unseen data (although see zero_based argument ). Missing values propagate. Factor inputs ordered levels. others ordered sort. Despite name, new values returned numeric unless strict = TRUE, coerce results integers.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_integer.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Convert values to predefined integers ‚Äî step_integer","text":"tidy() step, tibble returned columns terms, value , id: terms character, selectors variables selected value list, list column conversion key id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_integer.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Convert values to predefined integers ‚Äî step_integer","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert values to predefined integers ‚Äî step_integer","text":"","code":"data(Sacramento, package = \"modeldata\")  sacr_tr <- Sacramento[1:100, ] sacr_tr$sqft[1] <- NA  sacr_te <- Sacramento[101:105, ] sacr_te$sqft[1] <- NA sacr_te$city[1] <- \"whoville\" #> Warning: invalid factor level, NA generated sacr_te$city[2] <- NA  rec <- recipe(type ~ ., data = sacr_tr) %>%   step_integer(all_predictors()) %>%   prep(training = sacr_tr)  bake(rec, sacr_te, all_predictors()) #> # A tibble: 5 √ó 8 #>    city   zip  beds baths  sqft price latitude longitude #>   <int> <int> <int> <int> <int> <int>    <int>     <int> #> 1    NA    35     4     2    NA     0        0         0 #> 2    NA    62     3     2     0     0        0         0 #> 3    28    34     3     2    56     0        0         0 #> 4    34    51     3     1     0     0        0         0 #> 5    34    58     4     3     0     0        0         0 tidy(rec, number = 1) #> # A tibble: 8 √ó 3 #>   terms     value             id            #>   <chr>     <list>            <chr>         #> 1 city      <tibble [37 √ó 2]> integer_3IckW #> 2 zip       <tibble [68 √ó 2]> integer_3IckW #> 3 beds      <tibble [5 √ó 2]>  integer_3IckW #> 4 baths     <tibble [4 √ó 2]>  integer_3IckW #> 5 sqft      <tibble [94 √ó 2]> integer_3IckW #> 6 price     <tibble [95 √ó 2]> integer_3IckW #> 7 latitude  <tibble [99 √ó 2]> integer_3IckW #> 8 longitude <tibble [99 √ó 2]> integer_3IckW"},{"path":"https://recipes.tidymodels.org/dev/reference/step_interact.html","id":null,"dir":"Reference","previous_headings":"","what":"Create interaction variables ‚Äî step_interact","title":"Create interaction variables ‚Äî step_interact","text":"step_interact() creates specification recipe step create new columns interaction terms two variables.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_interact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create interaction variables ‚Äî step_interact","text":"","code":"step_interact(   recipe,   terms,   role = \"predictor\",   trained = FALSE,   objects = NULL,   sep = \"_x_\",   keep_original_cols = TRUE,   skip = FALSE,   id = rand_id(\"interact\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_interact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create interaction variables ‚Äî step_interact","text":"recipe recipe object. step added sequence operations recipe. terms traditional R formula contains interaction terms. can include . selectors. See selections() details, consider using tidyselect::starts_with() dummy variables created. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. objects list terms objects individual interaction. sep character value used delineate variables interaction (e.g. var1_x_var2 instead traditional var1:var2). keep_original_cols logical keep original variables output. Defaults TRUE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_interact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create interaction variables ‚Äî step_interact","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_interact.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create interaction variables ‚Äî step_interact","text":"step_interact can create interactions variables. primarily intended numeric data; categorical variables probably converted dummy variables using step_dummy() prior used interactions. Unlike step functions, terms argument traditional R model formula contain inline functions (e.g. log). example, predictors , B, C, formula ~:B:C can used make three way interaction variables. formula contains terms interactions (e.g. (+B+C)^3) interaction terms retained design matrix. separator variables defaults \"_x_\" three way interaction shown previously generate column named A_x_B_x_C. can changed using sep argument. dummy variables created used interactions, selectors can help specify interactions succinctly. example, suppose factor column X gets converted dummy variables x_2, x_3, ..., x_6 using step_dummy(). wanted interaction numeric column z, create set specific interaction effects (e.g. x_2:z + x_3:z ) use starts_with(\"x_\"):z. prep() evaluates step, starts_with(\"x_\") resolves (x_2 + x_3 + x_4 + x_5 + x_6) formula now (x_2 + x_3 + x_4 + x_5 + x_6):z two-way interactions created.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_interact.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Create interaction variables ‚Äî step_interact","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_interact.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Create interaction variables ‚Äî step_interact","text":"underlying operation allow case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_interact.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create interaction variables ‚Äî step_interact","text":"","code":"data(penguins, package = \"modeldata\") penguins <- penguins %>% na.omit()  rec <- recipe(flipper_length_mm ~ ., data = penguins)  int_mod_1 <- rec %>%   step_interact(terms = ~ bill_depth_mm:bill_length_mm)  # specify all dummy variables succinctly with `starts_with()` int_mod_2 <- rec %>%   step_dummy(sex, species, island) %>%   step_interact(terms = ~ body_mass_g:starts_with(\"species\"))  int_mod_1 <- prep(int_mod_1, training = penguins) int_mod_2 <- prep(int_mod_2, training = penguins)  dat_1 <- bake(int_mod_1, penguins) dat_2 <- bake(int_mod_2, penguins)  names(dat_1) #> [1] \"species\"                        \"island\"                         #> [3] \"bill_length_mm\"                 \"bill_depth_mm\"                  #> [5] \"body_mass_g\"                    \"sex\"                            #> [7] \"flipper_length_mm\"              \"bill_depth_mm_x_bill_length_mm\" names(dat_2) #>  [1] \"bill_length_mm\"                  \"bill_depth_mm\"                   #>  [3] \"body_mass_g\"                     \"flipper_length_mm\"               #>  [5] \"sex_male\"                        \"species_Chinstrap\"               #>  [7] \"species_Gentoo\"                  \"island_Dream\"                    #>  [9] \"island_Torgersen\"                \"body_mass_g_x_species_Chinstrap\" #> [11] \"body_mass_g_x_species_Gentoo\"     tidy(int_mod_1, number = 1) #> # A tibble: 1 √ó 2 #>   terms                        id             #>   <chr>                        <chr>          #> 1 bill_depth_mm:bill_length_mm interact_IUB7W tidy(int_mod_2, number = 2) #> # A tibble: 2 √ó 2 #>   terms                         id             #>   <chr>                         <chr>          #> 1 body_mass_g:species_Chinstrap interact_kM5w7 #> 2 body_mass_g:species_Gentoo    interact_kM5w7"},{"path":"https://recipes.tidymodels.org/dev/reference/step_intercept.html","id":null,"dir":"Reference","previous_headings":"","what":"Add intercept (or constant) column ‚Äî step_intercept","title":"Add intercept (or constant) column ‚Äî step_intercept","text":"step_intercept() creates specification recipe step add intercept constant term first column data matrix. step_intercept() defaults predictor role default called bake step. careful avoid unintentional transformations calling steps all_predictors().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_intercept.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add intercept (or constant) column ‚Äî step_intercept","text":"","code":"step_intercept(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   name = \"intercept\",   value = 1L,   skip = FALSE,   id = rand_id(\"intercept\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_intercept.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add intercept (or constant) column ‚Äî step_intercept","text":"recipe recipe object. step added sequence operations recipe. ... Argument ignored; included consistency step specification functions. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. included consistency. name Character name newly added column value numeric constant fill intercept column. Defaults 1L. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_intercept.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add intercept (or constant) column ‚Äî step_intercept","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_intercept.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Add intercept (or constant) column ‚Äî step_intercept","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_intercept.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Add intercept (or constant) column ‚Äî step_intercept","text":"underlying operation allow case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_intercept.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add intercept (or constant) column ‚Äî step_intercept","text":"","code":"data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr ) rec_trans <- recipe(HHV ~ ., data = biomass_tr[, -(1:2)]) %>%   step_intercept(value = 2) %>%   step_scale(carbon)  rec_obj <- prep(rec_trans, training = biomass_tr)  with_intercept <- bake(rec_obj, biomass_te) with_intercept #> # A tibble: 80 √ó 7 #>    intercept carbon hydrogen oxygen nitrogen sulfur   HHV #>        <dbl>  <dbl>    <dbl>  <dbl>    <dbl>  <dbl> <dbl> #>  1         2   4.45     5.67   47.2     0.3    0.22  18.3 #>  2         2   4.16     5.5    48.1     2.85   0.34  17.6 #>  3         2   4.10     5.5    49.1     2.4    0.3   17.2 #>  4         2   4.46     6.1    37.3     1.8    0.5   18.9 #>  5         2   4.68     6.32   42.8     0.2    0     20.5 #>  6         2   4.26     5.5    41.7     0.7    0.2   18.5 #>  7         2   3.74     5.23   54.1     1.19   0.51  15.1 #>  8         2   4.04     4.66   33.8     0.95   0.2   16.2 #>  9         2   2.81     4.4    31.1     0.14   4.9   11.1 #> 10         2   2.67     3.77   23.7     4.63   1.05  10.8 #> # ‚Ñπ 70 more rows"},{"path":"https://recipes.tidymodels.org/dev/reference/step_inverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse transformation ‚Äî step_inverse","title":"Inverse transformation ‚Äî step_inverse","text":"step_inverse() creates specification recipe step inverse transform data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_inverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse transformation ‚Äî step_inverse","text":"","code":"step_inverse(   recipe,   ...,   role = NA,   offset = 0,   trained = FALSE,   columns = NULL,   skip = FALSE,   id = rand_id(\"inverse\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_inverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse transformation ‚Äî step_inverse","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. offset optional value add data prior logging (avoid 1/0). trained logical indicate quantities preprocessing estimated. columns character string selected variable names. field placeholder populated prep() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_inverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse transformation ‚Äî step_inverse","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_inverse.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Inverse transformation ‚Äî step_inverse","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_inverse.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Inverse transformation ‚Äî step_inverse","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_inverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse transformation ‚Äî step_inverse","text":"","code":"set.seed(313) examples <- matrix(runif(40), ncol = 2) examples <- data.frame(examples)  rec <- recipe(~ X1 + X2, data = examples)  inverse_trans <- rec %>%   step_inverse(all_numeric_predictors())  inverse_obj <- prep(inverse_trans, training = examples)  transformed_te <- bake(inverse_obj, examples) plot(examples$X1, transformed_te$X1)   tidy(inverse_trans, number = 1) #> # A tibble: 1 √ó 2 #>   terms                    id            #>   <chr>                    <chr>         #> 1 all_numeric_predictors() inverse_ooyvr tidy(inverse_obj, number = 1) #> # A tibble: 2 √ó 2 #>   terms id            #>   <chr> <chr>         #> 1 X1    inverse_ooyvr #> 2 X2    inverse_ooyvr"},{"path":"https://recipes.tidymodels.org/dev/reference/step_invlogit.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse logit transformation ‚Äî step_invlogit","title":"Inverse logit transformation ‚Äî step_invlogit","text":"step_invlogit() creates specification recipe step transform data real values zero one.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_invlogit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse logit transformation ‚Äî step_invlogit","text":"","code":"step_invlogit(   recipe,   ...,   role = NA,   trained = FALSE,   columns = NULL,   skip = FALSE,   id = rand_id(\"invlogit\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_invlogit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse logit transformation ‚Äî step_invlogit","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. columns character string selected variable names. field placeholder populated prep() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_invlogit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse logit transformation ‚Äî step_invlogit","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_invlogit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverse logit transformation ‚Äî step_invlogit","text":"inverse logit transformation takes values real line translates zero one using function f(x) = 1/(1+exp(-x)).","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_invlogit.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Inverse logit transformation ‚Äî step_invlogit","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_invlogit.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Inverse logit transformation ‚Äî step_invlogit","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_invlogit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse logit transformation ‚Äî step_invlogit","text":"","code":"data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  ilogit_trans <- rec %>%   step_center(carbon, hydrogen) %>%   step_scale(carbon, hydrogen) %>%   step_invlogit(carbon, hydrogen)  ilogit_obj <- prep(ilogit_trans, training = biomass_tr)  transformed_te <- bake(ilogit_obj, biomass_te) plot(biomass_te$carbon, transformed_te$carbon)"},{"path":"https://recipes.tidymodels.org/dev/reference/step_isomap.html","id":null,"dir":"Reference","previous_headings":"","what":"Isomap embedding ‚Äî step_isomap","title":"Isomap embedding ‚Äî step_isomap","text":"step_isomap() creates specification recipe step uses multidimensional scaling convert numeric data one new dimensions.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_isomap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Isomap embedding ‚Äî step_isomap","text":"","code":"step_isomap(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   num_terms = 5,   neighbors = 50,   options = list(.mute = c(\"message\", \"output\")),   res = NULL,   columns = NULL,   prefix = \"Isomap\",   keep_original_cols = FALSE,   skip = FALSE,   id = rand_id(\"isomap\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_isomap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Isomap embedding ‚Äî step_isomap","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. num_terms number isomap dimensions retain new predictors. num_terms greater number columns number possible dimensions, smaller value used. neighbors number neighbors. options list options dimRed::Isomap(). res dimRed::Isomap() object stored preprocessing step trained prep(). columns character string selected variable names. field placeholder populated prep() used. prefix character string prefix resulting new variables. See notes . keep_original_cols logical keep original variables output. Defaults FALSE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_isomap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Isomap embedding ‚Äî step_isomap","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_isomap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Isomap embedding ‚Äî step_isomap","text":"Isomap form multidimensional scaling (MDS). MDS methods try find reduced set dimensions geometric distances original data points preserved. version MDS uses nearest neighbors data method increasing fidelity new dimensions original data values. step requires dimRed, RSpectra, igraph, RANN packages. installed, step stop note installing packages. advisable center scale variables prior running Isomap (step_center step_scale can used purpose). argument num_terms controls number components retained (original variables used derive components removed data). new components names begin prefix sequence numbers. variable names padded zeros. example, num_terms < 10, names Isomap1 - Isomap9. num_terms = 101, names Isomap001 - Isomap101.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_isomap.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Isomap embedding ‚Äî step_isomap","text":"tidy() step, tibble returned columns terms  , id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_isomap.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Isomap embedding ‚Äî step_isomap","text":"step 2 tuning parameters: num_terms: # Model Terms (type: integer, default: 5) neighbors: # Nearest Neighbors (type: integer, default: 50)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_isomap.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Isomap embedding ‚Äî step_isomap","text":"underlying operation allow case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_isomap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Isomap embedding ‚Äî step_isomap","text":"De Silva, V., Tenenbaum, J. B. (2003). Global versus local methods nonlinear dimensionality reduction. Advances Neural Information Processing Systems. 721-728. dimRed, framework dimensionality reduction, https://github.com/gdkrmr","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_isomap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Isomap embedding ‚Äî step_isomap","text":"","code":"if (FALSE) { data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  im_trans <- rec %>%   step_YeoJohnson(all_numeric_predictors()) %>%   step_normalize(all_numeric_predictors()) %>%   step_isomap(all_numeric_predictors(), neighbors = 100, num_terms = 2)  im_estimates <- prep(im_trans, training = biomass_tr)  im_te <- bake(im_estimates, biomass_te)  rng <- extendrange(c(im_te$Isomap1, im_te$Isomap2)) plot(im_te$Isomap1, im_te$Isomap2,   xlim = rng, ylim = rng )  tidy(im_trans, number = 3) tidy(im_estimates, number = 3) }"},{"path":"https://recipes.tidymodels.org/dev/reference/step_knnimpute.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute via k-nearest neighbors ‚Äî step_knnimpute","title":"Impute via k-nearest neighbors ‚Äî step_knnimpute","text":"Please use step_impute_knn() instead.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_knnimpute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute via k-nearest neighbors ‚Äî step_knnimpute","text":"","code":"step_knnimpute(   recipe,   ...,   role = NA,   trained = FALSE,   neighbors = 5,   impute_with = imp_vars(all_predictors()),   options = list(nthread = 1, eps = 1e-08),   ref_data = NULL,   columns = NULL,   skip = FALSE,   id = rand_id(\"impute_knn\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel PCA signal extraction ‚Äî step_kpca","title":"Kernel PCA signal extraction ‚Äî step_kpca","text":"step_kpca() creates specification recipe step convert numeric data one principal components using kernel basis expansion.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel PCA signal extraction ‚Äî step_kpca","text":"","code":"step_kpca(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   num_comp = 5,   res = NULL,   columns = NULL,   options = list(kernel = \"rbfdot\", kpar = list(sigma = 0.2)),   prefix = \"kPC\",   keep_original_cols = FALSE,   skip = FALSE,   id = rand_id(\"kpca\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel PCA signal extraction ‚Äî step_kpca","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. num_comp number components retain new predictors. num_comp greater number columns number possible components, smaller value used. num_comp = 0 set transformation done selected variables stay unchanged, regardless value keep_original_cols. res S4 kernlab::kpca() object stored preprocessing step trained prep(). columns character string selected variable names. field placeholder populated prep() used. options list options kernlab::kpca(). Defaults set arguments kernel kpar others can passed . Note arguments x features passed (). prefix character string prefix resulting new variables. See notes . keep_original_cols logical keep original variables output. Defaults FALSE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kernel PCA signal extraction ‚Äî step_kpca","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kernel PCA signal extraction ‚Äî step_kpca","text":"performing kPCA step_kpca(), must choose kernel function (important kernel parameters). step uses kernlab package; reference discusses types kernels available parameter(s). specifications can made kernel kpar slots options argument step_kpca(). Consider using step_kpca_rbf() radial basis function kernel step_kpca_poly() polynomial kernel. Kernel principal component analysis (kPCA) extension PCA analysis conducts calculations broader dimensionality defined kernel function. example, quadratic kernel function used, variable represented original values well square. nonlinear mapping used PCA analysis can potentially help find better representations original data. step requires kernlab package. installed, step stop prompt installing package. ordinary PCA, important center scale variables prior computing PCA components (step_normalize() can used purpose). argument num_comp controls number components retained (original variables used derive components removed data). new components names begin prefix sequence numbers. variable names padded zeros. example, num_comp < 10, names kPC1 - kPC9. num_comp = 101, names kPC1 - kPC101.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca.html","id":"tidy-results","dir":"Reference","previous_headings":"","what":"tidy() results","title":"Kernel PCA signal extraction ‚Äî step_kpca","text":"tidy() step, tibble column terms (selectors variables selected) returned.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Kernel PCA signal extraction ‚Äî step_kpca","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Kernel PCA signal extraction ‚Äî step_kpca","text":"underlying operation allow case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Kernel PCA signal extraction ‚Äî step_kpca","text":"Scholkopf, B., Smola, ., Muller, K. (1997). Kernel principal component analysis. Lecture Notes Computer Science, 1327, 583-588. Karatzoglou, K., Smola, ., Hornik, K., Zeileis, . (2004). kernlab - S4 package kernel methods R. Journal Statistical Software, 11(1), 1-20.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernel PCA signal extraction ‚Äî step_kpca","text":"","code":"library(ggplot2) data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  kpca_trans <- rec %>%   step_YeoJohnson(all_numeric_predictors()) %>%   step_normalize(all_numeric_predictors()) %>%   step_kpca(all_numeric_predictors())  kpca_estimates <- prep(kpca_trans, training = biomass_tr)  kpca_te <- bake(kpca_estimates, biomass_te)  ggplot(kpca_te, aes(x = kPC1, y = kPC2)) +   geom_point() +   coord_equal()   tidy(kpca_trans, number = 3) #> # A tibble: 1 √ó 2 #>   terms                    id         #>   <chr>                    <chr>      #> 1 all_numeric_predictors() kpca_ntsLB tidy(kpca_estimates, number = 3) #> # A tibble: 5 √ó 2 #>   terms    id         #>   <chr>    <chr>      #> 1 carbon   kpca_ntsLB #> 2 hydrogen kpca_ntsLB #> 3 oxygen   kpca_ntsLB #> 4 nitrogen kpca_ntsLB #> 5 sulfur   kpca_ntsLB"},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_poly.html","id":null,"dir":"Reference","previous_headings":"","what":"Polynomial kernel PCA signal extraction ‚Äî step_kpca_poly","title":"Polynomial kernel PCA signal extraction ‚Äî step_kpca_poly","text":"step_kpca_poly() creates specification recipe step convert numeric data one principal components using polynomial kernel basis expansion.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_poly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polynomial kernel PCA signal extraction ‚Äî step_kpca_poly","text":"","code":"step_kpca_poly(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   num_comp = 5,   res = NULL,   columns = NULL,   degree = 2,   scale_factor = 1,   offset = 1,   prefix = \"kPC\",   keep_original_cols = FALSE,   skip = FALSE,   id = rand_id(\"kpca_poly\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_poly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polynomial kernel PCA signal extraction ‚Äî step_kpca_poly","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. num_comp number components retain new predictors. num_comp greater number columns number possible components, smaller value used. num_comp = 0 set transformation done selected variables stay unchanged, regardless value keep_original_cols. res S4 kernlab::kpca() object stored preprocessing step trained prep(). columns character string selected variable names. field placeholder populated prep() used. degree, scale_factor, offset Numeric values polynomial kernel function. prefix character string prefix resulting new variables. See notes . keep_original_cols logical keep original variables output. Defaults FALSE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_poly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Polynomial kernel PCA signal extraction ‚Äî step_kpca_poly","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_poly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Polynomial kernel PCA signal extraction ‚Äî step_kpca_poly","text":"Kernel principal component analysis (kPCA) extension PCA analysis conducts calculations broader dimensionality defined kernel function. example, quadratic kernel function used, variable represented original values well square. nonlinear mapping used PCA analysis can potentially help find better representations original data. step requires kernlab package. installed, step stop prompt installing package. ordinary PCA, important center scale variables prior computing PCA components (step_normalize() can used purpose). argument num_comp controls number components retained (original variables used derive components removed data). new components names begin prefix sequence numbers. variable names padded zeros. example, num_comp < 10, names kPC1 - kPC9. num_comp = 101, names kPC1 - kPC101.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_poly.html","id":"tidy-results","dir":"Reference","previous_headings":"","what":"tidy() results","title":"Polynomial kernel PCA signal extraction ‚Äî step_kpca_poly","text":"tidy() step, tibble column terms (selectors variables selected) returned.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_poly.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Polynomial kernel PCA signal extraction ‚Äî step_kpca_poly","text":"step 4 tuning parameters: num_comp: # Components (type: integer, default: 5) degree: Polynomial Degree (type: double, default: 2) scale_factor: Scale Factor (type: double, default: 1) offset: Offset (type: double, default: 1)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_poly.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Polynomial kernel PCA signal extraction ‚Äî step_kpca_poly","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_poly.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Polynomial kernel PCA signal extraction ‚Äî step_kpca_poly","text":"underlying operation allow case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_poly.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Polynomial kernel PCA signal extraction ‚Äî step_kpca_poly","text":"Scholkopf, B., Smola, ., Muller, K. (1997). Kernel principal component analysis. Lecture Notes Computer Science, 1327, 583-588. Karatzoglou, K., Smola, ., Hornik, K., Zeileis, . (2004). kernlab - S4 package kernel methods R. Journal Statistical Software, 11(1), 1-20.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_poly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polynomial kernel PCA signal extraction ‚Äî step_kpca_poly","text":"","code":"library(ggplot2) data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  kpca_trans <- rec %>%   step_YeoJohnson(all_numeric_predictors()) %>%   step_normalize(all_numeric_predictors()) %>%   step_kpca_poly(all_numeric_predictors())  kpca_estimates <- prep(kpca_trans, training = biomass_tr)  kpca_te <- bake(kpca_estimates, biomass_te)  ggplot(kpca_te, aes(x = kPC1, y = kPC2)) +   geom_point() +   coord_equal()   tidy(kpca_trans, number = 3) #> # A tibble: 1 √ó 2 #>   terms                    id              #>   <chr>                    <chr>           #> 1 all_numeric_predictors() kpca_poly_Qw9rI tidy(kpca_estimates, number = 3) #> # A tibble: 5 √ó 2 #>   terms    id              #>   <chr>    <chr>           #> 1 carbon   kpca_poly_Qw9rI #> 2 hydrogen kpca_poly_Qw9rI #> 3 oxygen   kpca_poly_Qw9rI #> 4 nitrogen kpca_poly_Qw9rI #> 5 sulfur   kpca_poly_Qw9rI"},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_rbf.html","id":null,"dir":"Reference","previous_headings":"","what":"Radial basis function kernel PCA signal extraction ‚Äî step_kpca_rbf","title":"Radial basis function kernel PCA signal extraction ‚Äî step_kpca_rbf","text":"step_kpca_rbf() creates specification recipe step convert numeric data one principal components using radial basis function kernel basis expansion.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_rbf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Radial basis function kernel PCA signal extraction ‚Äî step_kpca_rbf","text":"","code":"step_kpca_rbf(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   num_comp = 5,   res = NULL,   columns = NULL,   sigma = 0.2,   prefix = \"kPC\",   keep_original_cols = FALSE,   skip = FALSE,   id = rand_id(\"kpca_rbf\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_rbf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Radial basis function kernel PCA signal extraction ‚Äî step_kpca_rbf","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. num_comp number components retain new predictors. num_comp greater number columns number possible components, smaller value used. num_comp = 0 set transformation done selected variables stay unchanged, regardless value keep_original_cols. res S4 kernlab::kpca() object stored preprocessing step trained prep(). columns character string selected variable names. field placeholder populated prep() used. sigma numeric value radial basis function parameter. prefix character string prefix resulting new variables. See notes . keep_original_cols logical keep original variables output. Defaults FALSE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_rbf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Radial basis function kernel PCA signal extraction ‚Äî step_kpca_rbf","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_rbf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Radial basis function kernel PCA signal extraction ‚Äî step_kpca_rbf","text":"Kernel principal component analysis (kPCA) extension PCA analysis conducts calculations broader dimensionality defined kernel function. example, quadratic kernel function used, variable represented original values well square. nonlinear mapping used PCA analysis can potentially help find better representations original data. step requires kernlab package. installed, step stop prompt installing package. ordinary PCA, important center scale variables prior computing PCA components (step_normalize() can used purpose). argument num_comp controls number components retained (original variables used derive components removed data). new components names begin prefix sequence numbers. variable names padded zeros. example, num_comp < 10, names kPC1 - kPC9. num_comp = 101, names kPC1 - kPC101.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_rbf.html","id":"tidy-results","dir":"Reference","previous_headings":"","what":"tidy() results","title":"Radial basis function kernel PCA signal extraction ‚Äî step_kpca_rbf","text":"tidy() step, tibble column terms (selectors variables selected) returned.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_rbf.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Radial basis function kernel PCA signal extraction ‚Äî step_kpca_rbf","text":"step 2 tuning parameters: num_comp: # Components (type: integer, default: 5) sigma: Radial Basis Function sigma (type: double, default: 0.2)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_rbf.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Radial basis function kernel PCA signal extraction ‚Äî step_kpca_rbf","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_rbf.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Radial basis function kernel PCA signal extraction ‚Äî step_kpca_rbf","text":"underlying operation allow case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_rbf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Radial basis function kernel PCA signal extraction ‚Äî step_kpca_rbf","text":"Scholkopf, B., Smola, ., Muller, K. (1997). Kernel principal component analysis. Lecture Notes Computer Science, 1327, 583-588. Karatzoglou, K., Smola, ., Hornik, K., Zeileis, . (2004). kernlab - S4 package kernel methods R. Journal Statistical Software, 11(1), 1-20.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_kpca_rbf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Radial basis function kernel PCA signal extraction ‚Äî step_kpca_rbf","text":"","code":"library(ggplot2) data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  kpca_trans <- rec %>%   step_YeoJohnson(all_numeric_predictors()) %>%   step_normalize(all_numeric_predictors()) %>%   step_kpca_rbf(all_numeric_predictors())  kpca_estimates <- prep(kpca_trans, training = biomass_tr)  kpca_te <- bake(kpca_estimates, biomass_te)  ggplot(kpca_te, aes(x = kPC1, y = kPC2)) +   geom_point() +   coord_equal()   tidy(kpca_trans, number = 3) #> # A tibble: 1 √ó 2 #>   terms                    id             #>   <chr>                    <chr>          #> 1 all_numeric_predictors() kpca_rbf_voo0Z tidy(kpca_estimates, number = 3) #> # A tibble: 5 √ó 2 #>   terms    id             #>   <chr>    <chr>          #> 1 carbon   kpca_rbf_voo0Z #> 2 hydrogen kpca_rbf_voo0Z #> 3 oxygen   kpca_rbf_voo0Z #> 4 nitrogen kpca_rbf_voo0Z #> 5 sulfur   kpca_rbf_voo0Z"},{"path":"https://recipes.tidymodels.org/dev/reference/step_lag.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a lagged predictor ‚Äî step_lag","title":"Create a lagged predictor ‚Äî step_lag","text":"step_lag() creates specification recipe step add new columns lagged data. Lagged data default include NA values lag induced. can removed step_naomit(), may specify alternative filler value default argument.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_lag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a lagged predictor ‚Äî step_lag","text":"","code":"step_lag(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   lag = 1,   prefix = \"lag_\",   default = NA,   columns = NULL,   keep_original_cols = TRUE,   skip = FALSE,   id = rand_id(\"lag\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_lag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a lagged predictor ‚Äî step_lag","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. lag vector positive integers. specified column lagged value vector. prefix prefix generated column names, default \"lag_\". default Passed dplyr::lag, determines fills empty rows left lagging (defaults NA). columns character string selected variable names. field placeholder populated prep() used. keep_original_cols logical keep original variables output. Defaults TRUE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_lag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a lagged predictor ‚Äî step_lag","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_lag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a lagged predictor ‚Äî step_lag","text":"step assumes data already proper sequential order lagging.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_lag.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Create a lagged predictor ‚Äî step_lag","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_lag.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Create a lagged predictor ‚Äî step_lag","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_lag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a lagged predictor ‚Äî step_lag","text":"","code":"n <- 10 start <- as.Date(\"1999/01/01\") end <- as.Date(\"1999/01/10\")  df <- data.frame(   x = runif(n),   index = 1:n,   day = seq(start, end, by = \"day\") )  recipe(~., data = df) %>%   step_lag(index, day, lag = 2:3) %>%   prep(df) %>%   bake(df) #> # A tibble: 10 √ó 7 #>         x index day        lag_2_index lag_3_index lag_2_day  lag_3_day  #>     <dbl> <int> <date>           <int>       <int> <date>     <date>     #>  1 0.189      1 1999-01-01          NA          NA NA         NA         #>  2 0.0579     2 1999-01-02          NA          NA NA         NA         #>  3 0.0469     3 1999-01-03           1          NA 1999-01-01 NA         #>  4 0.356      4 1999-01-04           2           1 1999-01-02 1999-01-01 #>  5 0.563      5 1999-01-05           3           2 1999-01-03 1999-01-02 #>  6 0.757      6 1999-01-06           4           3 1999-01-04 1999-01-03 #>  7 0.687      7 1999-01-07           5           4 1999-01-05 1999-01-04 #>  8 0.966      8 1999-01-08           6           5 1999-01-06 1999-01-05 #>  9 0.977      9 1999-01-09           7           6 1999-01-07 1999-01-06 #> 10 0.0903    10 1999-01-10           8           7 1999-01-08 1999-01-07"},{"path":"https://recipes.tidymodels.org/dev/reference/step_lincomb.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear combination filter ‚Äî step_lincomb","title":"Linear combination filter ‚Äî step_lincomb","text":"step_lincomb() creates specification recipe step potentially remove numeric variables exact linear combinations .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_lincomb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear combination filter ‚Äî step_lincomb","text":"","code":"step_lincomb(   recipe,   ...,   role = NA,   trained = FALSE,   max_steps = 5,   removals = NULL,   skip = FALSE,   id = rand_id(\"lincomb\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_lincomb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear combination filter ‚Äî step_lincomb","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. max_steps number times apply algorithm. removals character string contains names columns removed. values determined prep() called. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_lincomb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear combination filter ‚Äî step_lincomb","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_lincomb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear combination filter ‚Äî step_lincomb","text":"step can potentially remove columns data set. may cause issues subsequent steps recipe missing columns specifically referenced name. avoid , see advice Tips saving recipes filtering columns section selections. step finds exact linear combinations two variables recommends column(s) removed resolve issue. algorithm may need applied multiple times (defined max_steps).","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_lincomb.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Linear combination filter ‚Äî step_lincomb","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_lincomb.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Linear combination filter ‚Äî step_lincomb","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_lincomb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Linear combination filter ‚Äî step_lincomb","text":"Max Kuhn, Kirk Mettler, Jed Wing","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_lincomb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear combination filter ‚Äî step_lincomb","text":"","code":"data(biomass, package = \"modeldata\")  biomass$new_1 <- with(   biomass,   .1 * carbon - .2 * hydrogen + .6 * sulfur ) biomass$new_2 <- with(   biomass,   .5 * carbon - .2 * oxygen + .6 * nitrogen )  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(HHV ~ carbon + hydrogen + oxygen + nitrogen +   sulfur + new_1 + new_2, data = biomass_tr )  lincomb_filter <- rec %>%   step_lincomb(all_numeric_predictors())  lincomb_filter_trained <- prep(lincomb_filter, training = biomass_tr) lincomb_filter_trained #>  #> ‚îÄ‚îÄ Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 7 #>  #> ‚îÄ‚îÄ Training information  #> Training data contained 456 data points and no incomplete rows. #>  #> ‚îÄ‚îÄ Operations  #> ‚Ä¢ Linear combination filter removed: new_1 and new_2 | Trained  tidy(lincomb_filter, number = 1) #> # A tibble: 1 √ó 2 #>   terms                    id            #>   <chr>                    <chr>         #> 1 all_numeric_predictors() lincomb_IeIAm tidy(lincomb_filter_trained, number = 1) #> # A tibble: 2 √ó 2 #>   terms id            #>   <chr> <chr>         #> 1 new_1 lincomb_IeIAm #> 2 new_2 lincomb_IeIAm"},{"path":"https://recipes.tidymodels.org/dev/reference/step_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Logarithmic transformation ‚Äî step_log","title":"Logarithmic transformation ‚Äî step_log","text":"step_log() creates specification recipe step log transform data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logarithmic transformation ‚Äî step_log","text":"","code":"step_log(   recipe,   ...,   role = NA,   trained = FALSE,   base = exp(1),   offset = 0,   columns = NULL,   skip = FALSE,   signed = FALSE,   id = rand_id(\"log\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logarithmic transformation ‚Äî step_log","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. base numeric value base. offset optional value add data prior logging (avoid log(0)). columns character string selected variable names. field placeholder populated prep() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. signed logical indicating whether take signed log. sign(x) * log(abs(x)) abs(x) => 1 0 abs(x) < 1. TRUE offset argument ignored. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logarithmic transformation ‚Äî step_log","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_log.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Logarithmic transformation ‚Äî step_log","text":"tidy() step, tibble returned columns terms, base , id: terms character, selectors variables selected base numeric, value base id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_log.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Logarithmic transformation ‚Äî step_log","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logarithmic transformation ‚Äî step_log","text":"","code":"set.seed(313) examples <- matrix(exp(rnorm(40)), ncol = 2) examples <- as.data.frame(examples)  rec <- recipe(~ V1 + V2, data = examples)  log_trans <- rec %>%   step_log(all_numeric_predictors())  log_obj <- prep(log_trans, training = examples)  transformed_te <- bake(log_obj, examples) plot(examples$V1, transformed_te$V1)   tidy(log_trans, number = 1) #> # A tibble: 1 √ó 3 #>   terms                     base id        #>   <chr>                    <dbl> <chr>     #> 1 all_numeric_predictors()  2.72 log_IhS7o tidy(log_obj, number = 1) #> # A tibble: 2 √ó 3 #>   terms  base id        #>   <chr> <dbl> <chr>     #> 1 V1     2.72 log_IhS7o #> 2 V2     2.72 log_IhS7o  # using the signed argument with negative values  examples2 <- matrix(rnorm(40, sd = 5), ncol = 2) examples2 <- as.data.frame(examples2)  recipe(~ V1 + V2, data = examples2) %>%   step_log(all_numeric_predictors()) %>%   prep(training = examples2) %>%   bake(examples2) #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> # A tibble: 20 √ó 2 #>         V1       V2 #>      <dbl>    <dbl> #>  1  -0.209 NaN      #>  2   1.71  NaN      #>  3   1.12    1.06   #>  4   1.65    1.19   #>  5 NaN       2.18   #>  6   1.15    1.08   #>  7 NaN       0.555  #>  8   0.102 NaN      #>  9   0.670   1.37   #> 10 NaN       1.02   #> 11 NaN     NaN      #> 12 NaN     NaN      #> 13 NaN     NaN      #> 14   1.25   -0.0880 #> 15   2.21    0.774  #> 16 NaN     NaN      #> 17 NaN       2.49   #> 18 NaN       1.47   #> 19 NaN     NaN      #> 20 NaN     NaN       recipe(~ V1 + V2, data = examples2) %>%   step_log(all_numeric_predictors(), signed = TRUE) %>%   prep(training = examples2) %>%   bake(examples2) #> # A tibble: 20 √ó 2 #>        V1      V2 #>     <dbl>   <dbl> #>  1  0     -1.24   #>  2  1.71  -1.81   #>  3  1.12   1.06   #>  4  1.65   1.19   #>  5 -1.63   2.18   #>  6  1.15   1.08   #>  7 -0.604  0.555  #>  8  0.102 -0.565  #>  9  0.670  1.37   #> 10 -2.65   1.02   #> 11 -1.34  -1.04   #> 12 -2.06  -1.51   #> 13 -0.613 -1.75   #> 14  1.25   0      #> 15  2.21   0.774  #> 16 -1.90  -0.0814 #> 17 -0.762  2.49   #> 18 -1.40   1.47   #> 19 -1.22  -0.825  #> 20 -1.20  -2.27"},{"path":"https://recipes.tidymodels.org/dev/reference/step_logit.html","id":null,"dir":"Reference","previous_headings":"","what":"Logit transformation ‚Äî step_logit","title":"Logit transformation ‚Äî step_logit","text":"step_logit() creates specification recipe step logit transform data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_logit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logit transformation ‚Äî step_logit","text":"","code":"step_logit(   recipe,   ...,   offset = 0,   role = NA,   trained = FALSE,   columns = NULL,   skip = FALSE,   id = rand_id(\"logit\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_logit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logit transformation ‚Äî step_logit","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. offset numeric value modify values columns either one zero. modified x - offset offset, respectively. role used step since new variables created. trained logical indicate quantities preprocessing estimated. columns character string selected variable names. field placeholder populated prep() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_logit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logit transformation ‚Äî step_logit","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_logit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Logit transformation ‚Äî step_logit","text":"logit transformation takes values zero one translates real line using function f(p) = log(p/(1-p)).","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_logit.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Logit transformation ‚Äî step_logit","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_logit.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Logit transformation ‚Äî step_logit","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_logit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logit transformation ‚Äî step_logit","text":"","code":"set.seed(313) examples <- matrix(runif(40), ncol = 2) examples <- data.frame(examples)  rec <- recipe(~ X1 + X2, data = examples)  logit_trans <- rec %>%   step_logit(all_numeric_predictors())  logit_obj <- prep(logit_trans, training = examples)  transformed_te <- bake(logit_obj, examples) plot(examples$X1, transformed_te$X1)   tidy(logit_trans, number = 1) #> # A tibble: 1 √ó 2 #>   terms                    id          #>   <chr>                    <chr>       #> 1 all_numeric_predictors() logit_ooyvr tidy(logit_obj, number = 1) #> # A tibble: 2 √ó 2 #>   terms id          #>   <chr> <chr>       #> 1 X1    logit_ooyvr #> 2 X2    logit_ooyvr"},{"path":"https://recipes.tidymodels.org/dev/reference/step_lowerimpute.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute numeric data below the threshold of measurement ‚Äî step_lowerimpute","title":"Impute numeric data below the threshold of measurement ‚Äî step_lowerimpute","text":"Please use step_impute_lower() instead.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_lowerimpute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute numeric data below the threshold of measurement ‚Äî step_lowerimpute","text":"","code":"step_lowerimpute(   recipe,   ...,   role = NA,   trained = FALSE,   threshold = NULL,   skip = FALSE,   id = rand_id(\"impute_lower\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_meanimpute.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute numeric data using the mean ‚Äî step_meanimpute","title":"Impute numeric data using the mean ‚Äî step_meanimpute","text":"Please use step_impute_mean() instead.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_meanimpute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute numeric data using the mean ‚Äî step_meanimpute","text":"","code":"step_meanimpute(   recipe,   ...,   role = NA,   trained = FALSE,   means = NULL,   trim = 0,   skip = FALSE,   id = rand_id(\"impute_mean\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_medianimpute.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute numeric data using the median ‚Äî step_medianimpute","title":"Impute numeric data using the median ‚Äî step_medianimpute","text":"Please use step_impute_median() instead.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_medianimpute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute numeric data using the median ‚Äî step_medianimpute","text":"","code":"step_medianimpute(   recipe,   ...,   role = NA,   trained = FALSE,   medians = NULL,   skip = FALSE,   id = rand_id(\"impute_median\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_modeimpute.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute nominal data using the most common value ‚Äî step_modeimpute","title":"Impute nominal data using the most common value ‚Äî step_modeimpute","text":"Please use step_impute_mode() instead.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_modeimpute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute nominal data using the most common value ‚Äî step_modeimpute","text":"","code":"step_modeimpute(   recipe,   ...,   role = NA,   trained = FALSE,   modes = NULL,   ptype = NULL,   skip = FALSE,   id = rand_id(\"impute_mode\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_mutate.html","id":null,"dir":"Reference","previous_headings":"","what":"Add new variables using dplyr ‚Äî step_mutate","title":"Add new variables using dplyr ‚Äî step_mutate","text":"step_mutate() creates specification recipe step add variables using dplyr::mutate().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_mutate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add new variables using dplyr ‚Äî step_mutate","text":"","code":"step_mutate(   recipe,   ...,   .pkgs = character(),   role = \"predictor\",   trained = FALSE,   inputs = NULL,   skip = FALSE,   id = rand_id(\"mutate\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_mutate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add new variables using dplyr ‚Äî step_mutate","text":"recipe recipe object. step added sequence operations recipe. ... Name-value pairs expressions. See dplyr::mutate(). .pkgs Character vector, package names functions used expressions .... specified using non-base functions. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. inputs Quosure(s) .... skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_mutate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add new variables using dplyr ‚Äî step_mutate","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_mutate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add new variables using dplyr ‚Äî step_mutate","text":"using flexible step, use extra care avoid data leakage preprocessing. Consider, example, transformation x = w > mean(w). applied new data testing data, transformation use mean w new data, mean w training data. object user's global environment referenced expression defining new variable(s), good idea use quasiquotation (e.g. !!) embed value object expression (portable sessions). See examples. preceding step removes column selected name step_mutate(), recipe error estimated prep().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_mutate.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Add new variables using dplyr ‚Äî step_mutate","text":"tidy() step, tibble returned columns terms, value , id: terms character, selectors variables selected value character, expression passed mutate() id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_mutate.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Add new variables using dplyr ‚Äî step_mutate","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_mutate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add new variables using dplyr ‚Äî step_mutate","text":"","code":"rec <-   recipe(~., data = iris) %>%   step_mutate(     dbl_width = Sepal.Width * 2,     half_length = Sepal.Length / 2   )  prepped <- prep(rec, training = iris %>% slice(1:75))  library(dplyr)  dplyr_train <-   iris %>%   as_tibble() %>%   slice(1:75) %>%   mutate(     dbl_width = Sepal.Width * 2,     half_length = Sepal.Length / 2   )  rec_train <- bake(prepped, new_data = NULL) all.equal(dplyr_train, rec_train) #> [1] TRUE  dplyr_test <-   iris %>%   as_tibble() %>%   slice(76:150) %>%   mutate(     dbl_width = Sepal.Width * 2,     half_length = Sepal.Length / 2   ) rec_test <- bake(prepped, iris %>% slice(76:150)) all.equal(dplyr_test, rec_test) #> [1] TRUE  # Embedding objects: const <- 1.414  qq_rec <-   recipe(~., data = iris) %>%   step_mutate(     bad_approach = Sepal.Width * const,     best_approach = Sepal.Width * !!const   ) %>%   prep(training = iris)  bake(qq_rec, new_data = NULL, contains(\"appro\")) %>% slice(1:4) #> # A tibble: 4 √ó 2 #>   bad_approach best_approach #>          <dbl>         <dbl> #> 1         4.95          4.95 #> 2         4.24          4.24 #> 3         4.52          4.52 #> 4         4.38          4.38  # The difference: tidy(qq_rec, number = 1) #> # A tibble: 2 √ó 3 #>   terms         value               id           #>   <chr>         <chr>               <chr>        #> 1 bad_approach  Sepal.Width * const mutate_p75TX #> 2 best_approach Sepal.Width * 1.414 mutate_p75TX"},{"path":"https://recipes.tidymodels.org/dev/reference/step_mutate_at.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutate multiple columns using dplyr ‚Äî step_mutate_at","title":"Mutate multiple columns using dplyr ‚Äî step_mutate_at","text":"step_mutate_at() creates specification recipe step modify selected variables using common function via dplyr::mutate_at().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_mutate_at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutate multiple columns using dplyr ‚Äî step_mutate_at","text":"","code":"step_mutate_at(   recipe,   ...,   fn,   role = \"predictor\",   trained = FALSE,   inputs = NULL,   skip = FALSE,   id = rand_id(\"mutate_at\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_mutate_at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutate multiple columns using dplyr ‚Äî step_mutate_at","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. fn function fun, quosure style lambda `~ fun(.)‚Äú list either form. (see dplyr::mutate_at()). Note argument must named. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. inputs vector column names populated prep(). skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_mutate_at.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutate multiple columns using dplyr ‚Äî step_mutate_at","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_mutate_at.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mutate multiple columns using dplyr ‚Äî step_mutate_at","text":"using flexible step, use extra care avoid data leakage preprocessing. Consider, example, transformation x = w > mean(w). applied new data testing data, transformation use mean w new data, mean w training data.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_mutate_at.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Mutate multiple columns using dplyr ‚Äî step_mutate_at","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_mutate_at.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Mutate multiple columns using dplyr ‚Äî step_mutate_at","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_mutate_at.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutate multiple columns using dplyr ‚Äî step_mutate_at","text":"","code":"library(dplyr) recipe(~., data = iris) %>%   step_mutate_at(contains(\"Length\"), fn = ~ 1 / .) %>%   prep() %>%   bake(new_data = NULL) %>%   slice(1:10) #> # A tibble: 10 √ó 5 #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>           <dbl>       <dbl>        <dbl>       <dbl> <fct>   #>  1        0.196         3.5        0.714         0.2 setosa  #>  2        0.204         3          0.714         0.2 setosa  #>  3        0.213         3.2        0.769         0.2 setosa  #>  4        0.217         3.1        0.667         0.2 setosa  #>  5        0.2           3.6        0.714         0.2 setosa  #>  6        0.185         3.9        0.588         0.4 setosa  #>  7        0.217         3.4        0.714         0.3 setosa  #>  8        0.2           3.4        0.667         0.2 setosa  #>  9        0.227         2.9        0.714         0.2 setosa  #> 10        0.204         3.1        0.667         0.1 setosa   recipe(~., data = iris) %>%   # leads to more columns being created.   step_mutate_at(contains(\"Length\"), fn = list(log = log, sqrt = sqrt)) %>%   prep() %>%   bake(new_data = NULL) %>%   slice(1:10) #> # A tibble: 10 √ó 9 #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>           <dbl>       <dbl>        <dbl>       <dbl> <fct>   #>  1          5.1         3.5          1.4         0.2 setosa  #>  2          4.9         3            1.4         0.2 setosa  #>  3          4.7         3.2          1.3         0.2 setosa  #>  4          4.6         3.1          1.5         0.2 setosa  #>  5          5           3.6          1.4         0.2 setosa  #>  6          5.4         3.9          1.7         0.4 setosa  #>  7          4.6         3.4          1.4         0.3 setosa  #>  8          5           3.4          1.5         0.2 setosa  #>  9          4.4         2.9          1.4         0.2 setosa  #> 10          4.9         3.1          1.5         0.1 setosa  #> # ‚Ñπ 4 more variables: Sepal.Length_log <dbl>, Petal.Length_log <dbl>, #> #   Sepal.Length_sqrt <dbl>, Petal.Length_sqrt <dbl>"},{"path":"https://recipes.tidymodels.org/dev/reference/step_naomit.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove observations with missing values ‚Äî step_naomit","title":"Remove observations with missing values ‚Äî step_naomit","text":"step_naomit() creates specification recipe step remove observations (rows data) contain NA NaN values.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_naomit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove observations with missing values ‚Äî step_naomit","text":"","code":"step_naomit(   recipe,   ...,   role = NA,   trained = FALSE,   columns = NULL,   skip = TRUE,   id = rand_id(\"naomit\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_naomit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove observations with missing values ‚Äî step_naomit","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role Unused, include consistency steps. trained logical indicate quantities preprocessing estimated. included consistency. columns character string selected variable names. field placeholder populated prep() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = FALSE. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_naomit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove observations with missing values ‚Äî step_naomit","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_naomit.html","id":"row-filtering","dir":"Reference","previous_headings":"","what":"Row Filtering","title":"Remove observations with missing values ‚Äî step_naomit","text":"step can entirely remove observations (rows data), can unintended /problematic consequences applying step new data later via bake(). Consider whether skip = TRUE skip = FALSE appropriate given use case. instances affect rows data predicted, step probably applied ; instead, execute operations like outside starting preprocessing recipe().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_naomit.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Remove observations with missing values ‚Äî step_naomit","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_naomit.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Remove observations with missing values ‚Äî step_naomit","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_naomit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove observations with missing values ‚Äî step_naomit","text":"","code":"recipe(Ozone ~ ., data = airquality) %>%   step_naomit(Solar.R) %>%   prep(airquality, verbose = FALSE) %>%   bake(new_data = NULL) #> # A tibble: 146 √ó 6 #>    Solar.R  Wind  Temp Month   Day Ozone #>      <int> <dbl> <int> <int> <int> <int> #>  1     190   7.4    67     5     1    41 #>  2     118   8      72     5     2    36 #>  3     149  12.6    74     5     3    12 #>  4     313  11.5    62     5     4    18 #>  5     299   8.6    65     5     7    23 #>  6      99  13.8    59     5     8    19 #>  7      19  20.1    61     5     9     8 #>  8     194   8.6    69     5    10    NA #>  9     256   9.7    69     5    12    16 #> 10     290   9.2    66     5    13    11 #> # ‚Ñπ 136 more rows"},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-negative matrix factorization signal extraction ‚Äî step_nnmf","title":"Non-negative matrix factorization signal extraction ‚Äî step_nnmf","text":"step_nnmf() creates specification recipe step convert numeric data one non-negative components.  Please use step_nnmf_sparse() instead step function.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-negative matrix factorization signal extraction ‚Äî step_nnmf","text":"","code":"step_nnmf(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   num_comp = 2,   num_run = 30,   options = list(),   res = NULL,   columns = NULL,   prefix = \"NNMF\",   seed = sample.int(10^5, 1),   keep_original_cols = FALSE,   skip = FALSE,   id = rand_id(\"nnmf\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non-negative matrix factorization signal extraction ‚Äî step_nnmf","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. num_comp number components retain new predictors. num_comp greater number columns number possible components, smaller value used. num_comp = 0 set transformation done selected variables stay unchanged, regardless value keep_original_cols. num_run positive integer number computations runs used obtain consensus projection. options list options nmf() NMF package way NNMF() function dimRed package. Note arguments data ndim passed , NMF's parallel processing turned favor resample-level parallelization. res NNMF() object stored preprocessing step trained prep(). columns character string selected variable names. field placeholder populated prep() used. prefix character string prefix resulting new variables. See notes . seed integer used set seed isolation computing factorization. keep_original_cols logical keep original variables output. Defaults FALSE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non-negative matrix factorization signal extraction ‚Äî step_nnmf","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Non-negative matrix factorization signal extraction ‚Äî step_nnmf","text":"Non-negative matrix factorization computes latent components non-negative values take account original data non-negative values. argument num_comp controls number components retained (original variables used derive components removed data). new components names begin prefix sequence numbers. variable names padded zeros. example, num_comp < 10, names NNMF1 - NNMF9. num_comp = 101, names NNMF1 - NNMF101.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Non-negative matrix factorization signal extraction ‚Äî step_nnmf","text":"tidy() step, tibble returned columns terms, value, component , id: terms character, selectors variables selected value numeric, value loading component character, name component id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Non-negative matrix factorization signal extraction ‚Äî step_nnmf","text":"step 2 tuning parameters: num_comp: # Components (type: integer, default: 2) num_run: Number Computation Runs (type: integer, default: 30)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Non-negative matrix factorization signal extraction ‚Äî step_nnmf","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non-negative matrix factorization signal extraction ‚Äî step_nnmf","text":"","code":"data(biomass, package = \"modeldata\")  # rec <- recipe(HHV ~ ., data = biomass) %>% #   update_role(sample, new_role = \"id var\") %>% #   update_role(dataset, new_role = \"split variable\") %>% #   step_nnmf(all_numeric_predictors(), num_comp = 2, seed = 473, num_run = 2) %>% #   prep(training = biomass) # # bake(rec, new_data = NULL) # # library(ggplot2) # bake(rec, new_data = NULL) %>% #  ggplot(aes(x = NNMF2, y = NNMF1, col = HHV)) + geom_point()"},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf_sparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-negative matrix factorization signal extraction with lasso penalization ‚Äî step_nnmf_sparse","title":"Non-negative matrix factorization signal extraction with lasso penalization ‚Äî step_nnmf_sparse","text":"step_nnmf_sparse() creates specification recipe step convert numeric data one non-negative components.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf_sparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-negative matrix factorization signal extraction with lasso penalization ‚Äî step_nnmf_sparse","text":"","code":"step_nnmf_sparse(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   num_comp = 2,   penalty = 0.001,   options = list(),   res = NULL,   prefix = \"NNMF\",   seed = sample.int(10^5, 1),   keep_original_cols = FALSE,   skip = FALSE,   id = rand_id(\"nnmf_sparse\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf_sparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non-negative matrix factorization signal extraction with lasso penalization ‚Äî step_nnmf_sparse","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. num_comp number components retain new predictors. num_comp greater number columns number possible components, smaller value used. num_comp = 0 set transformation done selected variables stay unchanged, regardless value keep_original_cols. penalty non-negative number used penalization factor loadings. Values usually zero one. options list options nmf() RcppML package. package separate function setRcppMLthreads() controls amount internal parallelization. Note argument , k, L1, seed passed . res matrix loadings stored , along names original predictors, preprocessing step trained prep(). prefix character string prefix resulting new variables. See notes . seed integer used set seed isolation computing factorization. keep_original_cols logical keep original variables output. Defaults FALSE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf_sparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non-negative matrix factorization signal extraction with lasso penalization ‚Äî step_nnmf_sparse","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf_sparse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Non-negative matrix factorization signal extraction with lasso penalization ‚Äî step_nnmf_sparse","text":"Non-negative matrix factorization computes latent components non-negative values take account original data non-negative values. argument num_comp controls number components retained (original variables used derive components removed data). new components names begin prefix sequence numbers. variable names padded zeros. example, num_comp < 10, names NNMF1 - NNMF9. num_comp = 101, names NNMF1 - NNMF101.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf_sparse.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Non-negative matrix factorization signal extraction with lasso penalization ‚Äî step_nnmf_sparse","text":"tidy() step, tibble returned columns terms, value, component , id: terms character, selectors variables selected value numeric, value loading component character, name component id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf_sparse.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Non-negative matrix factorization signal extraction with lasso penalization ‚Äî step_nnmf_sparse","text":"step 2 tuning parameters: num_comp: # Components (type: integer, default: 2) penalty: Amount Regularization (type: double, default: 0.001)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf_sparse.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Non-negative matrix factorization signal extraction with lasso penalization ‚Äî step_nnmf_sparse","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_nnmf_sparse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non-negative matrix factorization signal extraction with lasso penalization ‚Äî step_nnmf_sparse","text":"","code":"if (rlang::is_installed(c(\"modeldata\", \"RcppML\", \"ggplot2\"))) { library(Matrix) data(biomass, package = \"modeldata\")  rec <- recipe(HHV ~ ., data = biomass) %>%   update_role(sample, new_role = \"id var\") %>%   update_role(dataset, new_role = \"split variable\") %>%   step_nnmf_sparse(     all_numeric_predictors(),     num_comp = 2,     seed = 473,     penalty = 0.01   ) %>%   prep(training = biomass)  bake(rec, new_data = NULL)  library(ggplot2) bake(rec, new_data = NULL) %>%   ggplot(aes(x = NNMF2, y = NNMF1, col = HHV)) +   geom_point() }"},{"path":"https://recipes.tidymodels.org/dev/reference/step_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Center and scale numeric data ‚Äî step_normalize","title":"Center and scale numeric data ‚Äî step_normalize","text":"step_normalize() creates specification recipe step normalize numeric data standard deviation one mean zero.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Center and scale numeric data ‚Äî step_normalize","text":"","code":"step_normalize(   recipe,   ...,   role = NA,   trained = FALSE,   means = NULL,   sds = NULL,   na_rm = TRUE,   skip = FALSE,   id = rand_id(\"normalize\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Center and scale numeric data ‚Äî step_normalize","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. means named numeric vector means. NULL computed prep(). sds named numeric vector standard deviations NULL computed prep(). na_rm logical value indicating whether NA values removed computing standard deviation mean. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Center and scale numeric data ‚Äî step_normalize","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_normalize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Center and scale numeric data ‚Äî step_normalize","text":"Centering data means average variable subtracted data. Scaling data means standard deviation variable divided data. step_normalize estimates variable standard deviations means data used training argument prep.recipe. bake.recipe applies scaling new data sets using estimates.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_normalize.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Center and scale numeric data ‚Äî step_normalize","text":"tidy() step, tibble returned columns terms, statistic, value , id: terms character, selectors variables selected statistic character, name statistic (\"mean\" \"sd\") value numeric, value statistic id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_normalize.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Center and scale numeric data ‚Äî step_normalize","text":"step performs unsupervised operation can utilize case weights. result, case weights used frequency weights. information, see documentation case_weights examples tidymodels.org.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Center and scale numeric data ‚Äî step_normalize","text":"","code":"data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  norm_trans <- rec %>%   step_normalize(carbon, hydrogen)  norm_obj <- prep(norm_trans, training = biomass_tr)  transformed_te <- bake(norm_obj, biomass_te)  biomass_te[1:10, names(transformed_te)] #>    carbon hydrogen oxygen nitrogen sulfur    HHV #> 15  46.35     5.67  47.20     0.30   0.22 18.275 #> 20  43.25     5.50  48.06     2.85   0.34 17.560 #> 26  42.70     5.50  49.10     2.40   0.30 17.173 #> 31  46.40     6.10  37.30     1.80   0.50 18.851 #> 36  48.76     6.32  42.77     0.20   0.00 20.547 #> 41  44.30     5.50  41.70     0.70   0.20 18.467 #> 46  38.94     5.23  54.13     1.19   0.51 15.095 #> 51  42.10     4.66  33.80     0.95   0.20 16.240 #> 55  29.20     4.40  31.10     0.14   4.90 11.147 #> 65  27.80     3.77  23.69     4.63   1.05 10.750 transformed_te #> # A tibble: 80 √ó 6 #>     carbon hydrogen oxygen nitrogen sulfur   HHV #>      <dbl>    <dbl>  <dbl>    <dbl>  <dbl> <dbl> #>  1 -0.193    0.176    47.2     0.3    0.22  18.3 #>  2 -0.490    0.0342   48.1     2.85   0.34  17.6 #>  3 -0.543    0.0342   49.1     2.4    0.3   17.2 #>  4 -0.188    0.535    37.3     1.8    0.5   18.9 #>  5  0.0390   0.719    42.8     0.2    0     20.5 #>  6 -0.390    0.0342   41.7     0.7    0.2   18.5 #>  7 -0.904   -0.191    54.1     1.19   0.51  15.1 #>  8 -0.601   -0.668    33.8     0.95   0.2   16.2 #>  9 -1.84    -0.885    31.1     0.14   4.9   11.1 #> 10 -1.97    -1.41     23.7     4.63   1.05  10.8 #> # ‚Ñπ 70 more rows tidy(norm_trans, number = 1) #> # A tibble: 2 √ó 4 #>   terms    statistic value id              #>   <chr>    <chr>     <dbl> <chr>           #> 1 carbon   NA           NA normalize_u8gfY #> 2 hydrogen NA           NA normalize_u8gfY tidy(norm_obj, number = 1) #> # A tibble: 4 √ó 4 #>   terms    statistic value id              #>   <chr>    <chr>     <dbl> <chr>           #> 1 carbon   mean      48.4  normalize_u8gfY #> 2 hydrogen mean       5.46 normalize_u8gfY #> 3 carbon   sd        10.4  normalize_u8gfY #> 4 hydrogen sd         1.20 normalize_u8gfY  # To keep the original variables in the output, use `step_mutate_at`: norm_keep_orig <- rec %>%   step_mutate_at(all_numeric_predictors(), fn = list(orig = ~.)) %>%   step_normalize(-contains(\"orig\"), -all_outcomes())  keep_orig_obj <- prep(norm_keep_orig, training = biomass_tr) keep_orig_te <- bake(keep_orig_obj, biomass_te) keep_orig_te #> # A tibble: 80 √ó 11 #>     carbon hydrogen oxygen nitrogen   sulfur   HHV carbon_orig #>      <dbl>    <dbl>  <dbl>    <dbl>    <dbl> <dbl>       <dbl> #>  1 -0.193    0.176   0.801  -0.643   0.00755  18.3        46.4 #>  2 -0.490    0.0342  0.881   1.47    0.281    17.6        43.2 #>  3 -0.543    0.0342  0.977   1.10    0.190    17.2        42.7 #>  4 -0.188    0.535  -0.113   0.602   0.646    18.9        46.4 #>  5  0.0390   0.719   0.392  -0.726  -0.494    20.5        48.8 #>  6 -0.390    0.0342  0.293  -0.311  -0.0380   18.5        44.3 #>  7 -0.904   -0.191   1.44    0.0958  0.668    15.1        38.9 #>  8 -0.601   -0.668  -0.436  -0.103  -0.0380   16.2        42.1 #>  9 -1.84    -0.885  -0.686  -0.776  10.7      11.1        29.2 #> 10 -1.97    -1.41   -1.37    2.95    1.90     10.8        27.8 #> # ‚Ñπ 70 more rows #> # ‚Ñπ 4 more variables: hydrogen_orig <dbl>, oxygen_orig <dbl>, #> #   nitrogen_orig <dbl>, sulfur_orig <dbl>"},{"path":"https://recipes.tidymodels.org/dev/reference/step_novel.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple value assignments for novel factor levels ‚Äî step_novel","title":"Simple value assignments for novel factor levels ‚Äî step_novel","text":"step_novel() creates specification recipe step assign previously unseen factor level \"new\".","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_novel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple value assignments for novel factor levels ‚Äî step_novel","text":"","code":"step_novel(   recipe,   ...,   role = NA,   trained = FALSE,   new_level = \"new\",   objects = NULL,   skip = FALSE,   id = rand_id(\"novel\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_novel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple value assignments for novel factor levels ‚Äî step_novel","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. new_level single character value assigned new factor levels. objects list objects contain information factor levels determined prep(). skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_novel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple value assignments for novel factor levels ‚Äî step_novel","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_novel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple value assignments for novel factor levels ‚Äî step_novel","text":"selected variables adjusted new level (given new_level) placed last position. preparation data points associated new level since data seen. Note original columns character, converted factors step. Missing values remain missing. new_level already data given prep, error thrown. fitting model can deal new factor levels, consider using workflows::add_recipe() allow_novel_levels = TRUE set hardhat::default_recipe_blueprint(). allow model handle new levels prediction time, instead throwing warnings errors.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_novel.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Simple value assignments for novel factor levels ‚Äî step_novel","text":"tidy() step, tibble returned columns terms, value , id: terms character, selectors variables selected value character, factor levels used new value id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_novel.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Simple value assignments for novel factor levels ‚Äî step_novel","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_novel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple value assignments for novel factor levels ‚Äî step_novel","text":"","code":"data(Sacramento, package = \"modeldata\")  sacr_tr <- Sacramento[1:800, ] sacr_te <- Sacramento[801:806, ] sacr_te$city[3] <- \"beeptown\" #> Warning: invalid factor level, NA generated sacr_te$city[4] <- \"boopville\" #> Warning: invalid factor level, NA generated  rec <- recipe(~ city + zip, data = sacr_tr)  rec <- rec %>%   step_novel(city, zip) rec <- prep(rec, training = sacr_tr)  processed <- bake(rec, sacr_te) tibble(old = sacr_te$city, new = processed$city) #> # A tibble: 6 √ó 2 #>   old        new        #>   <fct>      <fct>      #> 1 SACRAMENTO SACRAMENTO #> 2 AUBURN     AUBURN     #> 3 NA         NA         #> 4 NA         NA         #> 5 SACRAMENTO SACRAMENTO #> 6 ROSEVILLE  ROSEVILLE   tidy(rec, number = 1) #> # A tibble: 2 √ó 3 #>   terms value id          #>   <chr> <chr> <chr>       #> 1 city  new   novel_3AY0w #> 2 zip   new   novel_3AY0w"},{"path":"https://recipes.tidymodels.org/dev/reference/step_ns.html","id":null,"dir":"Reference","previous_headings":"","what":"Natural spline basis functions ‚Äî step_ns","title":"Natural spline basis functions ‚Äî step_ns","text":"step_ns() creates specification recipe step create new columns basis expansions variables using natural splines.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Natural spline basis functions ‚Äî step_ns","text":"","code":"step_ns(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   objects = NULL,   deg_free = 2,   options = list(),   keep_original_cols = FALSE,   skip = FALSE,   id = rand_id(\"ns\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_ns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Natural spline basis functions ‚Äî step_ns","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. objects list splines::ns() objects created step trained. deg_free degrees freedom natural spline. degrees freedom natural spline increase, flexible complex curves can generated. single degree freedom used, result rescaled version original data. options list options splines::ns() include x df. keep_original_cols logical keep original variables output. Defaults FALSE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Natural spline basis functions ‚Äî step_ns","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Natural spline basis functions ‚Äî step_ns","text":"step_ns can create new features single variable enable fitting routines model variable nonlinear manner. extent possible nonlinearity determined df knots arguments splines::ns(). original variables removed data new columns added. naming convention new variables varname_ns_1 .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ns.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Natural spline basis functions ‚Äî step_ns","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ns.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Natural spline basis functions ‚Äî step_ns","text":"step 1 tuning parameters: deg_free: Spline Degrees Freedom (type: integer, default: 2)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ns.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Natural spline basis functions ‚Äî step_ns","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_ns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Natural spline basis functions ‚Äî step_ns","text":"","code":"data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  with_splines <- rec %>%   step_ns(carbon, hydrogen) with_splines <- prep(with_splines, training = biomass_tr)  expanded <- bake(with_splines, biomass_te) expanded #> # A tibble: 80 √ó 8 #>    oxygen nitrogen sulfur   HHV carbon_ns_1 carbon_ns_2 hydrogen_ns_1 #>     <dbl>    <dbl>  <dbl> <dbl>       <dbl>       <dbl>         <dbl> #>  1   47.2     0.3    0.22  18.3       0.524      -0.236         0.563 #>  2   48.1     2.85   0.34  17.6       0.493      -0.241         0.556 #>  3   49.1     2.4    0.3   17.2       0.487      -0.241         0.556 #>  4   37.3     1.8    0.5   18.9       0.524      -0.236         0.574 #>  5   42.8     0.2    0     20.5       0.542      -0.226         0.577 #>  6   41.7     0.7    0.2   18.5       0.504      -0.240         0.556 #>  7   54.1     1.19   0.51  15.1       0.440      -0.233         0.544 #>  8   33.8     0.95   0.2   16.2       0.480      -0.240         0.512 #>  9   31.1     0.14   4.9   11.1       0.285      -0.169         0.493 #> 10   23.7     4.63   1.05  10.8       0.260      -0.155         0.442 #> # ‚Ñπ 70 more rows #> # ‚Ñπ 1 more variable: hydrogen_ns_2 <dbl>"},{"path":"https://recipes.tidymodels.org/dev/reference/step_num2factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert numbers to factors ‚Äî step_num2factor","title":"Convert numbers to factors ‚Äî step_num2factor","text":"step_num2factor() convert one numeric vectors factors (ordered unordered). can useful categories encoded integers.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_num2factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert numbers to factors ‚Äî step_num2factor","text":"","code":"step_num2factor(   recipe,   ...,   role = NA,   transform = function(x) x,   trained = FALSE,   levels,   ordered = FALSE,   skip = FALSE,   id = rand_id(\"num2factor\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_num2factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert numbers to factors ‚Äî step_num2factor","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. transform function taking single argument x can used modify numeric values prior determining levels (perhaps using base::.integer()). output function integer corresponds value levels assigned. integer, value converted integer bake(). trained logical indicate quantities preprocessing estimated. levels character vector values used levels. numeric data converted character ordered. modified prep() executed. ordered single logical value; factor(s) ordered? skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_num2factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert numbers to factors ‚Äî step_num2factor","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_num2factor.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Convert numbers to factors ‚Äî step_num2factor","text":"tidy() step, tibble returned columns terms, ordered , id: terms character, selectors variables selected ordered logical, factor(s) ordered id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_num2factor.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Convert numbers to factors ‚Äî step_num2factor","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_num2factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert numbers to factors ‚Äî step_num2factor","text":"","code":"library(dplyr) data(attrition, package = \"modeldata\")  attrition %>%   group_by(StockOptionLevel) %>%   count() #> # A tibble: 4 √ó 2 #> # Groups:   StockOptionLevel [4] #>   StockOptionLevel     n #>              <int> <int> #> 1                0   631 #> 2                1   596 #> 3                2   158 #> 4                3    85  amnt <- c(\"nothin\", \"meh\", \"some\", \"copious\")  rec <-   recipe(Attrition ~ StockOptionLevel, data = attrition) %>%   step_num2factor(     StockOptionLevel,     transform = function(x) x + 1,     levels = amnt   )  encoded <- rec %>%   prep() %>%   bake(new_data = NULL)  table(encoded$StockOptionLevel, attrition$StockOptionLevel) #>           #>             0   1   2   3 #>   nothin  631   0   0   0 #>   meh       0 596   0   0 #>   some      0   0 158   0 #>   copious   0   0   0  85   # an example for binning  binner <- function(x) {   x <- cut(x, breaks = 1000 * c(0, 5, 10, 20), include.lowest = TRUE)   # now return the group number   as.numeric(x) }  inc <- c(\"low\", \"med\", \"high\")  rec <-   recipe(Attrition ~ MonthlyIncome, data = attrition) %>%   step_num2factor(     MonthlyIncome,     transform = binner,     levels = inc,     ordered = TRUE   ) %>%   prep()  encoded <- bake(rec, new_data = NULL)  table(encoded$MonthlyIncome, binner(attrition$MonthlyIncome)) #>        #>          1   2   3 #>   low  749   0   0 #>   med    0 440   0 #>   high   0   0 281  # What happens when a value is out of range? ceo <- attrition %>%   slice(1) %>%   mutate(MonthlyIncome = 10^10)  bake(rec, ceo) #> # A tibble: 1 √ó 2 #>   MonthlyIncome Attrition #>   <ord>         <fct>     #> 1 NA            Yes"},{"path":"https://recipes.tidymodels.org/dev/reference/step_nzv.html","id":null,"dir":"Reference","previous_headings":"","what":"Near-zero variance filter ‚Äî step_nzv","title":"Near-zero variance filter ‚Äî step_nzv","text":"step_nzv() creates specification recipe step potentially remove variables highly sparse unbalanced.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nzv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Near-zero variance filter ‚Äî step_nzv","text":"","code":"step_nzv(   recipe,   ...,   role = NA,   trained = FALSE,   freq_cut = 95/5,   unique_cut = 10,   options = list(freq_cut = 95/5, unique_cut = 10),   removals = NULL,   skip = FALSE,   id = rand_id(\"nzv\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_nzv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Near-zero variance filter ‚Äî step_nzv","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. freq_cut, unique_cut Numeric parameters filtering process. See Details section . options list options filter (see Details ). removals character string contains names columns removed. values determined prep() called. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nzv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Near-zero variance filter ‚Äî step_nzv","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nzv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Near-zero variance filter ‚Äî step_nzv","text":"step can potentially remove columns data set. may cause issues subsequent steps recipe missing columns specifically referenced name. avoid , see advice Tips saving recipes filtering columns section selections. step diagnoses predictors one unique value (.e. zero variance predictors) predictors following characteristics: unique values relative number samples ratio frequency common value frequency second common value large. example, example near-zero variance predictor one , 1000 samples, two distinct values 999 single value. flagged, first, frequency prevalent value second frequent value (called \"frequency ratio\") must freq_cut. Secondly, \"percent unique values,\" number unique values divided total number samples (times 100), must also unique_cut. example, frequency ratio 999 unique value percent 0.2%.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nzv.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Near-zero variance filter ‚Äî step_nzv","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nzv.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Near-zero variance filter ‚Äî step_nzv","text":"step 2 tuning parameters: freq_cut: Frequency Distribution Ratio (type: double, default: 95/5) unique_cut: % Unique Values (type: double, default: 10)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_nzv.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Near-zero variance filter ‚Äî step_nzv","text":"step performs unsupervised operation can utilize case weights. result, case weights used frequency weights. information, see documentation case_weights examples tidymodels.org.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_nzv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Near-zero variance filter ‚Äî step_nzv","text":"","code":"data(biomass, package = \"modeldata\")  biomass$sparse <- c(1, rep(0, nrow(biomass) - 1))  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(HHV ~ carbon + hydrogen + oxygen +   nitrogen + sulfur + sparse, data = biomass_tr )  nzv_filter <- rec %>%   step_nzv(all_predictors())  filter_obj <- prep(nzv_filter, training = biomass_tr)  filtered_te <- bake(filter_obj, biomass_te) any(names(filtered_te) == \"sparse\") #> [1] FALSE  tidy(nzv_filter, number = 1) #> # A tibble: 1 √ó 2 #>   terms            id        #>   <chr>            <chr>     #> 1 all_predictors() nzv_evI1V tidy(filter_obj, number = 1) #> # A tibble: 1 √ó 2 #>   terms  id        #>   <chr>  <chr>     #> 1 sparse nzv_evI1V"},{"path":"https://recipes.tidymodels.org/dev/reference/step_ordinalscore.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ordinal factors to numeric scores ‚Äî step_ordinalscore","title":"Convert ordinal factors to numeric scores ‚Äî step_ordinalscore","text":"step_ordinalscore() creates specification recipe step convert ordinal factor variables numeric scores.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ordinalscore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ordinal factors to numeric scores ‚Äî step_ordinalscore","text":"","code":"step_ordinalscore(   recipe,   ...,   role = NA,   trained = FALSE,   columns = NULL,   convert = as.numeric,   skip = FALSE,   id = rand_id(\"ordinalscore\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_ordinalscore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ordinal factors to numeric scores ‚Äî step_ordinalscore","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. columns character string selected variable names. field placeholder populated prep() used. convert function takes ordinal factor vector input outputs single numeric variable. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ordinalscore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert ordinal factors to numeric scores ‚Äî step_ordinalscore","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ordinalscore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert ordinal factors to numeric scores ‚Äî step_ordinalscore","text":"Dummy variables ordered factors C levels create polynomial basis functions C-1 terms. alternative, step can used translate ordered levels single numeric vector values represent (subjective) scores. default, translation uses linear scale (1, 2, 3, ... C) custom score functions can also used (see example ).","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ordinalscore.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Convert ordinal factors to numeric scores ‚Äî step_ordinalscore","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ordinalscore.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Convert ordinal factors to numeric scores ‚Äî step_ordinalscore","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_ordinalscore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert ordinal factors to numeric scores ‚Äî step_ordinalscore","text":"","code":"fail_lvls <- c(\"meh\", \"annoying\", \"really_bad\")  ord_data <-   data.frame(     item = c(\"paperclip\", \"twitter\", \"airbag\"),     fail_severity = factor(fail_lvls,       levels = fail_lvls,       ordered = TRUE     )   )  model.matrix(~fail_severity, data = ord_data) #>   (Intercept) fail_severity.L fail_severity.Q #> 1           1   -7.071068e-01       0.4082483 #> 2           1   -7.850462e-17      -0.8164966 #> 3           1    7.071068e-01       0.4082483 #> attr(,\"assign\") #> [1] 0 1 1 #> attr(,\"contrasts\") #> attr(,\"contrasts\")$fail_severity #> [1] \"contr.poly\" #>   linear_values <- recipe(~ item + fail_severity, data = ord_data) %>%   step_dummy(item) %>%   step_ordinalscore(fail_severity)  linear_values <- prep(linear_values, training = ord_data)  bake(linear_values, new_data = NULL) #> # A tibble: 3 √ó 3 #>   fail_severity item_paperclip item_twitter #>           <int>          <dbl>        <dbl> #> 1             1              1            0 #> 2             2              0            1 #> 3             3              0            0  custom <- function(x) {   new_values <- c(1, 3, 7)   new_values[as.numeric(x)] }  nonlin_scores <- recipe(~ item + fail_severity, data = ord_data) %>%   step_dummy(item) %>%   step_ordinalscore(fail_severity, convert = custom)  tidy(nonlin_scores, number = 2) #> # A tibble: 1 √ó 2 #>   terms         id                 #>   <chr>         <chr>              #> 1 fail_severity ordinalscore_eIAmG  nonlin_scores <- prep(nonlin_scores, training = ord_data)  bake(nonlin_scores, new_data = NULL) #> # A tibble: 3 √ó 3 #>   fail_severity item_paperclip item_twitter #>           <int>          <dbl>        <dbl> #> 1             1              1            0 #> 2             3              0            1 #> 3             7              0            0  tidy(nonlin_scores, number = 2) #> # A tibble: 1 √ó 2 #>   terms         id                 #>   <chr>         <chr>              #> 1 fail_severity ordinalscore_eIAmG"},{"path":"https://recipes.tidymodels.org/dev/reference/step_other.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse infrequent categorical levels ‚Äî step_other","title":"Collapse infrequent categorical levels ‚Äî step_other","text":"step_other() creates specification recipe step potentially pool infrequently occurring values \"\" category.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_other.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse infrequent categorical levels ‚Äî step_other","text":"","code":"step_other(   recipe,   ...,   role = NA,   trained = FALSE,   threshold = 0.05,   other = \"other\",   objects = NULL,   skip = FALSE,   id = rand_id(\"other\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_other.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse infrequent categorical levels ‚Äî step_other","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. threshold numeric value 0 1, integer greater equal one.  less one, factor levels rate occurrence training set threshold pooled . greater equal one, value treated frequency factor levels occur less threshold times pooled . single character value \"\" category. objects list objects contain information pool infrequent levels determined prep(). skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_other.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse infrequent categorical levels ‚Äî step_other","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_other.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collapse infrequent categorical levels ‚Äî step_other","text":"overall proportion (total counts) categories computed. \"\" category used place categorical levels whose individual proportion (frequency) training set less threshold. pooling done data unmodified (although character data may changed factors based value strings_as_factors prep()). Otherwise, factor always returned different factor levels. threshold less largest category proportion, levels except frequent collapsed level. retained categories include value , error thrown. list discarded levels, error occurs. pooling done, novel factor levels converted missing. pooling needed, placed category. data processed contains novel levels (.e., contained training set), category assigned.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_other.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Collapse infrequent categorical levels ‚Äî step_other","text":"tidy() step, tibble returned columns terms, retained , id: terms character, selectors variables selected retained character, factor levels pulled \"\" id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_other.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Collapse infrequent categorical levels ‚Äî step_other","text":"step 1 tuning parameters: threshold: Threshold (type: double, default: 0.05)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_other.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Collapse infrequent categorical levels ‚Äî step_other","text":"step performs unsupervised operation can utilize case weights. result, case weights used frequency weights. information, see documentation case_weights examples tidymodels.org.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_other.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse infrequent categorical levels ‚Äî step_other","text":"","code":"data(Sacramento, package = \"modeldata\")  set.seed(19) in_train <- sample(1:nrow(Sacramento), size = 800)  sacr_tr <- Sacramento[in_train, ] sacr_te <- Sacramento[-in_train, ]  rec <- recipe(~ city + zip, data = sacr_tr)   rec <- rec %>%   step_other(city, zip, threshold = .1, other = \"other values\") rec <- prep(rec, training = sacr_tr)  collapsed <- bake(rec, sacr_te) table(sacr_te$city, collapsed$city, useNA = \"always\") #>                   #>                   ELK_GROVE SACRAMENTO other values <NA> #>   ANTELOPE                0          0            3    0 #>   AUBURN                  0          0            0    0 #>   CAMERON_PARK            0          0            1    0 #>   CARMICHAEL              0          0            2    0 #>   CITRUS_HEIGHTS          0          0            6    0 #>   COOL                    0          0            0    0 #>   DIAMOND_SPRINGS         0          0            1    0 #>   EL_DORADO               0          0            1    0 #>   EL_DORADO_HILLS         0          0            4    0 #>   ELK_GROVE              16          0            0    0 #>   ELVERTA                 0          0            1    0 #>   FAIR_OAKS               0          0            0    0 #>   FOLSOM                  0          0            3    0 #>   FORESTHILL              0          0            0    0 #>   GALT                    0          0            2    0 #>   GARDEN_VALLEY           0          0            0    0 #>   GOLD_RIVER              0          0            1    0 #>   GRANITE_BAY             0          0            0    0 #>   GREENWOOD               0          0            0    0 #>   LINCOLN                 0          0            1    0 #>   LOOMIS                  0          0            0    0 #>   MATHER                  0          0            0    0 #>   MEADOW_VISTA            0          0            0    0 #>   NORTH_HIGHLANDS         0          0            4    0 #>   ORANGEVALE              0          0            1    0 #>   PENRYN                  0          0            0    0 #>   PLACERVILLE             0          0            1    0 #>   POLLOCK_PINES           0          0            0    0 #>   RANCHO_CORDOVA          0          0            1    0 #>   RANCHO_MURIETA          0          0            1    0 #>   RIO_LINDA               0          0            0    0 #>   ROCKLIN                 0          0            2    0 #>   ROSEVILLE               0          0            9    0 #>   SACRAMENTO              0         71            0    0 #>   WALNUT_GROVE            0          0            0    0 #>   WEST_SACRAMENTO         0          0            0    0 #>   WILTON                  0          0            0    0 #>   <NA>                    0          0            0    0  tidy(rec, number = 1) #> # A tibble: 3 √ó 3 #>   terms retained   id          #>   <chr> <chr>      <chr>       #> 1 city  ELK_GROVE  other_HsPSC #> 2 city  SACRAMENTO other_HsPSC #> 3 zip   z95823     other_HsPSC  # novel levels are also \"othered\" tahiti <- Sacramento[1, ] tahiti$zip <- \"a magical place\" bake(rec, tahiti) #> Warning: ! There was 1 column that was a factor when the recipe was prepped: #> ‚Ä¢ `zip` #> ‚Ñπ This may cause errors when processing new data. #> # A tibble: 1 √ó 2 #>   city       zip          #>   <fct>      <fct>        #> 1 SACRAMENTO other values  # threshold as a frequency rec <- recipe(~ city + zip, data = sacr_tr)  rec <- rec %>%   step_other(city, zip, threshold = 2000, other = \"other values\") rec <- prep(rec, training = sacr_tr)  tidy(rec, number = 1) #> # A tibble: 2 √ó 3 #>   terms retained   id          #>   <chr> <chr>      <chr>       #> 1 city  SACRAMENTO other_2VUP1 #> 2 zip   z95823     other_2VUP1 # compare it to # sacr_tr %>% count(city, sort = TRUE) %>% top_n(4) # sacr_tr %>% count(zip, sort = TRUE) %>% top_n(3)"},{"path":"https://recipes.tidymodels.org/dev/reference/step_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"PCA signal extraction ‚Äî step_pca","title":"PCA signal extraction ‚Äî step_pca","text":"step_pca() creates specification recipe step convert numeric variables one principal components.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCA signal extraction ‚Äî step_pca","text":"","code":"step_pca(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   num_comp = 5,   threshold = NA,   options = list(),   res = NULL,   columns = NULL,   prefix = \"PC\",   keep_original_cols = FALSE,   skip = FALSE,   id = rand_id(\"pca\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCA signal extraction ‚Äî step_pca","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. num_comp number components retain new predictors. num_comp greater number columns number possible components, smaller value used. num_comp = 0 set transformation done selected variables stay unchanged, regardless value keep_original_cols. threshold fraction total variance covered components. example, threshold = .75 means step_pca generate enough components capture 75 percent variability variables. Note: using argument override reset value given num_comp. options list options default method stats::prcomp(). Argument defaults set retx = FALSE, center = FALSE, scale. = FALSE, tol = NULL. Note argument x passed (). res stats::prcomp.default() object stored preprocessing step trained prep(). columns character string selected variable names. field placeholder populated prep() used. prefix character string prefix resulting new variables. See notes . keep_original_cols logical keep original variables output. Defaults FALSE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PCA signal extraction ‚Äî step_pca","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_pca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PCA signal extraction ‚Äî step_pca","text":"Principal component analysis (PCA) transformation group variables produces new set artificial features components. components designed capture maximum amount information (.e. variance) original variables. Also, components statistically independent one another. means can used combat large inter-variables correlations data set. advisable standardize variables prior running PCA. , variable centered scaled prior PCA calculation. can changed using options argument using step_center() step_scale(). argument num_comp controls number components retained (original variables used derive components removed data). new components names begin prefix sequence numbers. variable names padded zeros. example, num_comp < 10, names PC1 - PC9. num_comp = 101, names PC1 - PC101. Alternatively, threshold can used determine number components required capture specified fraction total variance variables.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_pca.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"PCA signal extraction ‚Äî step_pca","text":"tidy() step two things can happen depending type argument. type = \"coef\" tibble returned 4 columns terms, value, component , id: terms character, selectors variables selected value numeric, variable loading component character, principle component id character, id step type = \"variance\" tibble returned 4 columns terms, value, component , id: terms character, type variance value numeric, value variance component integer, principle component id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_pca.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"PCA signal extraction ‚Äî step_pca","text":"step 2 tuning parameters: num_comp: # Components (type: integer, default: 5) threshold: Threshold (type: double, default: NA)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_pca.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"PCA signal extraction ‚Äî step_pca","text":"step performs unsupervised operation can utilize case weights. result, case weights used frequency weights. information, see documentation case_weights examples tidymodels.org.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_pca.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PCA signal extraction ‚Äî step_pca","text":"Jolliffe, . T. (2010). Principal Component Analysis. Springer.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PCA signal extraction ‚Äî step_pca","text":"","code":"rec <- recipe(~., data = USArrests) pca_trans <- rec %>%   step_normalize(all_numeric()) %>%   step_pca(all_numeric(), num_comp = 3) pca_estimates <- prep(pca_trans, training = USArrests) pca_data <- bake(pca_estimates, USArrests)  rng <- extendrange(c(pca_data$PC1, pca_data$PC2)) plot(pca_data$PC1, pca_data$PC2,   xlim = rng, ylim = rng )   with_thresh <- rec %>%   step_normalize(all_numeric()) %>%   step_pca(all_numeric(), threshold = .99) with_thresh <- prep(with_thresh, training = USArrests) bake(with_thresh, USArrests) #> # A tibble: 50 √ó 4 #>        PC1     PC2     PC3      PC4 #>      <dbl>   <dbl>   <dbl>    <dbl> #>  1 -0.976  -1.12    0.440   0.155   #>  2 -1.93   -1.06   -2.02   -0.434   #>  3 -1.75    0.738  -0.0542 -0.826   #>  4  0.140  -1.11   -0.113  -0.181   #>  5 -2.50    1.53   -0.593  -0.339   #>  6 -1.50    0.978  -1.08    0.00145 #>  7  1.34    1.08    0.637  -0.117   #>  8 -0.0472  0.322   0.711  -0.873   #>  9 -2.98   -0.0388  0.571  -0.0953  #> 10 -1.62   -1.27    0.339   1.07    #> # ‚Ñπ 40 more rows  tidy(pca_trans, number = 2) #> # A tibble: 1 √ó 4 #>   terms         value component id        #>   <chr>         <dbl> <chr>     <chr>     #> 1 all_numeric()    NA NA        pca_Esd0U tidy(pca_estimates, number = 2) #> # A tibble: 16 √ó 4 #>    terms      value component id        #>    <chr>      <dbl> <chr>     <chr>     #>  1 Murder   -0.536  PC1       pca_Esd0U #>  2 Assault  -0.583  PC1       pca_Esd0U #>  3 UrbanPop -0.278  PC1       pca_Esd0U #>  4 Rape     -0.543  PC1       pca_Esd0U #>  5 Murder   -0.418  PC2       pca_Esd0U #>  6 Assault  -0.188  PC2       pca_Esd0U #>  7 UrbanPop  0.873  PC2       pca_Esd0U #>  8 Rape      0.167  PC2       pca_Esd0U #>  9 Murder    0.341  PC3       pca_Esd0U #> 10 Assault   0.268  PC3       pca_Esd0U #> 11 UrbanPop  0.378  PC3       pca_Esd0U #> 12 Rape     -0.818  PC3       pca_Esd0U #> 13 Murder    0.649  PC4       pca_Esd0U #> 14 Assault  -0.743  PC4       pca_Esd0U #> 15 UrbanPop  0.134  PC4       pca_Esd0U #> 16 Rape      0.0890 PC4       pca_Esd0U tidy(pca_estimates, number = 2, type = \"variance\") #> # A tibble: 16 √ó 4 #>    terms                         value component id        #>    <chr>                         <dbl>     <int> <chr>     #>  1 variance                      2.48          1 pca_Esd0U #>  2 variance                      0.990         2 pca_Esd0U #>  3 variance                      0.357         3 pca_Esd0U #>  4 variance                      0.173         4 pca_Esd0U #>  5 cumulative variance           2.48          1 pca_Esd0U #>  6 cumulative variance           3.47          2 pca_Esd0U #>  7 cumulative variance           3.83          3 pca_Esd0U #>  8 cumulative variance           4             4 pca_Esd0U #>  9 percent variance             62.0           1 pca_Esd0U #> 10 percent variance             24.7           2 pca_Esd0U #> 11 percent variance              8.91          3 pca_Esd0U #> 12 percent variance              4.34          4 pca_Esd0U #> 13 cumulative percent variance  62.0           1 pca_Esd0U #> 14 cumulative percent variance  86.8           2 pca_Esd0U #> 15 cumulative percent variance  95.7           3 pca_Esd0U #> 16 cumulative percent variance 100             4 pca_Esd0U"},{"path":"https://recipes.tidymodels.org/dev/reference/step_percentile.html","id":null,"dir":"Reference","previous_headings":"","what":"Percentile transformation ‚Äî step_percentile","title":"Percentile transformation ‚Äî step_percentile","text":"step_percentile() creates specification recipe step replaces value variable percentile training set.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_percentile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percentile transformation ‚Äî step_percentile","text":"","code":"step_percentile(   recipe,   ...,   role = NA,   trained = FALSE,   ref_dist = NULL,   options = list(probs = (0:100)/100),   outside = \"none\",   skip = FALSE,   id = rand_id(\"percentile\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_percentile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percentile transformation ‚Äî step_percentile","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. ref_dist computed percentiles stored preprocessing step trained prep(). options named list options pass stats::quantile(). See Details information. outside character, describing interpolation take place outside interval [min(x), max(x)]. none means nothing happen values outside range NA. lower means new values less min(x) given value 0. upper means new values larger max(x) given value 1. handle cases. Defaults none. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_percentile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Percentile transformation ‚Äî step_percentile","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_percentile.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Percentile transformation ‚Äî step_percentile","text":"tidy() step, tibble returned columns terms, value, percentile , id: terms character, selectors variables selected value numeric, value percentile percentile numeric, percentile percentage id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_percentile.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Percentile transformation ‚Äî step_percentile","text":"step performs unsupervised operation can utilize case weights. result, case weights used frequency weights. information, see documentation case_weights examples tidymodels.org.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_percentile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Percentile transformation ‚Äî step_percentile","text":"","code":"data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr ) %>%   step_percentile(carbon)  prepped_rec <- prep(rec)  prepped_rec %>%   bake(biomass_te) #> # A tibble: 80 √ó 6 #>    carbon hydrogen oxygen nitrogen sulfur   HHV #>     <dbl>    <dbl>  <dbl>    <dbl>  <dbl> <dbl> #>  1 0.421      5.67   47.2     0.3    0.22  18.3 #>  2 0.18       5.5    48.1     2.85   0.34  17.6 #>  3 0.156      5.5    49.1     2.4    0.3   17.2 #>  4 0.423      6.1    37.3     1.8    0.5   18.9 #>  5 0.666      6.32   42.8     0.2    0     20.5 #>  6 0.218      5.5    41.7     0.7    0.2   18.5 #>  7 0.0803     5.23   54.1     1.19   0.51  15.1 #>  8 0.139      4.66   33.8     0.95   0.2   16.2 #>  9 0.0226     4.4    31.1     0.14   4.9   11.1 #> 10 0.0178     3.77   23.7     4.63   1.05  10.8 #> # ‚Ñπ 70 more rows  tidy(rec, 1) #> # A tibble: 1 √ó 4 #>   terms  value percentile id               #>   <chr>  <dbl>      <dbl> <chr>            #> 1 carbon    NA         NA percentile_dwNDP tidy(prepped_rec, 1) #> # A tibble: 101 √ó 4 #>    terms  value percentile id               #>    <chr>  <dbl>      <dbl> <chr>            #>  1 carbon  14.6          0 percentile_dwNDP #>  2 carbon  25.9          1 percentile_dwNDP #>  3 carbon  28.4          2 percentile_dwNDP #>  4 carbon  31.6          3 percentile_dwNDP #>  5 carbon  35.1          4 percentile_dwNDP #>  6 carbon  35.9          5 percentile_dwNDP #>  7 carbon  37.5          6 percentile_dwNDP #>  8 carbon  38.3          7 percentile_dwNDP #>  9 carbon  38.9          8 percentile_dwNDP #> 10 carbon  39.6          9 percentile_dwNDP #> # ‚Ñπ 91 more rows"},{"path":"https://recipes.tidymodels.org/dev/reference/step_pls.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial least squares feature extraction ‚Äî step_pls","title":"Partial least squares feature extraction ‚Äî step_pls","text":"step_pls() creates specification recipe step convert numeric data one new dimensions.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_pls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial least squares feature extraction ‚Äî step_pls","text":"","code":"step_pls(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   num_comp = 2,   predictor_prop = 1,   outcome = NULL,   options = list(scale = TRUE),   preserve = deprecated(),   res = NULL,   columns = NULL,   prefix = \"PLS\",   keep_original_cols = FALSE,   skip = FALSE,   id = rand_id(\"pls\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_pls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial least squares feature extraction ‚Äî step_pls","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. num_comp number components retain new predictors. num_comp greater number columns number possible components, smaller value used. num_comp = 0 set transformation done selected variables stay unchanged, regardless value keep_original_cols. predictor_prop maximum number original predictors can non-zero coefficients PLS component (via regularization). outcome single outcome available, character string call dplyr::vars() can used specify single outcome variable. options list options mixOmics::pls(), mixOmics::spls(), mixOmics::plsda(), mixOmics::splsda() (depending data arguments). preserve Use keep_original_cols instead specify whether original predictor data retained along new features. res list results stored preprocessing step trained prep(). columns character string selected variable names. field placeholder populated prep() used. prefix character string prefix resulting new variables. See notes . keep_original_cols logical keep original variables output. Defaults FALSE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_pls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial least squares feature extraction ‚Äî step_pls","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_pls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Partial least squares feature extraction ‚Äî step_pls","text":"PLS supervised version principal component analysis requires outcome data compute new features. step requires Bioconductor mixOmics package. installed, step stop note installing package. Install mixOmics using pak package:   argument num_comp controls number components retained (original variables used derive components removed data). new components names begin prefix sequence numbers. variable names padded zeros. example, num_comp < 10, names PLS1 - PLS9. num_comp = 101, names PLS1 - PLS101. Sparsity can encouraged using predictor_prop parameter. affects PLS component, indicates maximum proportion predictors non-zero coefficients component. step_pls() converts proportion determine keepX parameter mixOmics::spls() mixOmics::splsda(). See references mixOmics::spls() details.","code":"# install.packages(\"pak\") pak::pak(\"mixOmics\")"},{"path":"https://recipes.tidymodels.org/dev/reference/step_pls.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Partial least squares feature extraction ‚Äî step_pls","text":"tidy() step, tibble returned columns terms, value, component , id: terms character, selectors variables selected value numeric, coefficients defined \\(W(P'W)^{-1}\\) size character, name component id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_pls.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Partial least squares feature extraction ‚Äî step_pls","text":"step 2 tuning parameters: num_comp: # Components (type: integer, default: 2) predictor_prop: Proportion Predictors (type: double, default: 1)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_pls.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Partial least squares feature extraction ‚Äî step_pls","text":"underlying operation allow case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_pls.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Partial least squares feature extraction ‚Äî step_pls","text":"https://en.wikipedia.org/wiki/Partial_least_squares_regression Rohart F, Gautier B, Singh , L√™ Cao K-(2017) mixOmics: R package 'omics feature selection multiple data integration. PLoS Comput Biol 13(11): e1005752. doi:10.1371/journal.pcbi.1005752","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_pls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial least squares feature extraction ‚Äî step_pls","text":"","code":"# requires the Bioconductor mixOmics package data(biomass, package = \"modeldata\")  biom_tr <-   biomass %>%   dplyr::filter(dataset == \"Training\") %>%   dplyr::select(-dataset, -sample) biom_te <-   biomass %>%   dplyr::filter(dataset == \"Testing\") %>%   dplyr::select(-dataset, -sample, -HHV)  dense_pls <-   recipe(HHV ~ ., data = biom_tr) %>%   step_pls(all_numeric_predictors(), outcome = \"HHV\", num_comp = 3)  sparse_pls <-   recipe(HHV ~ ., data = biom_tr) %>%   step_pls(all_numeric_predictors(), outcome = \"HHV\", num_comp = 3,            predictor_prop = 4 / 5)  ## ----------------------------------------------------------------------------- ## PLS discriminant analysis  data(cells, package = \"modeldata\")  cell_tr <-   cells %>%   dplyr::filter(case == \"Train\") %>%   dplyr::select(-case) cell_te <-   cells %>%   dplyr::filter(case == \"Test\") %>%   dplyr::select(-case, -class)  dense_plsda <-   recipe(class ~ ., data = cell_tr) %>%   step_pls(all_numeric_predictors(), outcome = \"class\", num_comp = 5)  sparse_plsda <-   recipe(class ~ ., data = cell_tr) %>%   step_pls(all_numeric_predictors(), outcome = \"class\", num_comp = 5,            predictor_prop = 1 / 4)"},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly.html","id":null,"dir":"Reference","previous_headings":"","what":"Orthogonal polynomial basis functions ‚Äî step_poly","title":"Orthogonal polynomial basis functions ‚Äî step_poly","text":"step_poly() creates specification recipe step create new columns basis expansions variables using orthogonal polynomials.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orthogonal polynomial basis functions ‚Äî step_poly","text":"","code":"step_poly(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   objects = NULL,   degree = 2,   options = list(),   keep_original_cols = FALSE,   skip = FALSE,   id = rand_id(\"poly\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orthogonal polynomial basis functions ‚Äî step_poly","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. objects list stats::poly() objects created step trained. degree polynomial degree (integer). options list options stats::poly() include x, degree, simple. Note option raw = TRUE produce regular polynomial values (orthogonalized). keep_original_cols logical keep original variables output. Defaults FALSE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Orthogonal polynomial basis functions ‚Äî step_poly","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Orthogonal polynomial basis functions ‚Äî step_poly","text":"step_poly() can create new features single variable enable fitting routines model variable nonlinear manner. extent possible nonlinearity determined degree argument stats::poly(). original variables removed data default, can retained setting keep_original_cols = TRUE new columns added. naming convention new variables varname_poly_1 . orthogonal polynomial expansion used default yields variables uncorrelated produce large values otherwise problem large values degree. Orthogonal polynomial expansion pick signal uncorrelated counterpart.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Orthogonal polynomial basis functions ‚Äî step_poly","text":"tidy() step, tibble returned columns terms, degree , id: terms character, selectors variables selected degree integer, polynomial degree id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Orthogonal polynomial basis functions ‚Äî step_poly","text":"step 1 tuning parameters: degree: Polynomial Degree (type: integer, default: 2)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Orthogonal polynomial basis functions ‚Äî step_poly","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orthogonal polynomial basis functions ‚Äî step_poly","text":"","code":"data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  quadratic <- rec %>%   step_poly(carbon, hydrogen) quadratic <- prep(quadratic, training = biomass_tr)  expanded <- bake(quadratic, biomass_te) expanded #> # A tibble: 80 √ó 8 #>    oxygen nitrogen sulfur   HHV carbon_poly_1 carbon_poly_2 #>     <dbl>    <dbl>  <dbl> <dbl>         <dbl>         <dbl> #>  1   47.2     0.3    0.22  18.3      -0.00903      -0.0124  #>  2   48.1     2.85   0.34  17.6      -0.0230        0.00403 #>  3   49.1     2.4    0.3   17.2      -0.0255        0.00734 #>  4   37.3     1.8    0.5   18.9      -0.00880      -0.0126  #>  5   42.8     0.2    0     20.5       0.00183      -0.0226  #>  6   41.7     0.7    0.2   18.5      -0.0183       -0.00195 #>  7   54.1     1.19   0.51  15.1      -0.0424        0.0331  #>  8   33.8     0.95   0.2   16.2      -0.0282        0.0111  #>  9   31.1     0.14   4.9   11.1      -0.0863        0.125   #> 10   23.7     4.63   1.05  10.8      -0.0926        0.142   #> # ‚Ñπ 70 more rows #> # ‚Ñπ 2 more variables: hydrogen_poly_1 <dbl>, hydrogen_poly_2 <dbl>  tidy(quadratic, number = 1) #> # A tibble: 2 √ó 3 #>   terms    degree id         #>   <chr>     <int> <chr>      #> 1 carbon        2 poly_R8bgI #> 2 hydrogen      2 poly_R8bgI"},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly_bernstein.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized bernstein polynomial basis ‚Äî step_poly_bernstein","title":"Generalized bernstein polynomial basis ‚Äî step_poly_bernstein","text":"step_poly_bernstein() creates specification recipe step creates Bernstein polynomial features.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly_bernstein.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized bernstein polynomial basis ‚Äî step_poly_bernstein","text":"","code":"step_poly_bernstein(   recipe,   ...,   role = NA,   trained = FALSE,   degree = 10,   complete_set = FALSE,   options = NULL,   keep_original_cols = FALSE,   results = NULL,   skip = FALSE,   id = rand_id(\"poly_bernstein\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly_bernstein.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized bernstein polynomial basis ‚Äî step_poly_bernstein","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. degree degrees polynomial. degrees polynomial increase, flexible complex curves can generated. complete_set TRUE, complete basis matrix returned. Otherwise, first basis excluded output. maps intercept argument corresponding function splines2 package default value. options list options splines2::bernsteinPoly() include x degree. keep_original_cols logical keep original variables output. Defaults FALSE. results list objects created step trained. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly_bernstein.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized bernstein polynomial basis ‚Äî step_poly_bernstein","text":"object classes \"step_poly_bernstein\" \"step\".","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly_bernstein.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalized bernstein polynomial basis ‚Äî step_poly_bernstein","text":"Polynomial transformations take numeric column create multiple features , used model, can estimate nonlinear trends column outcome. degrees freedom determines many new features added data. spline expansion fails selected column, step remove column's results (retain original data). Use tidy() method determine columns used.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly_bernstein.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Generalized bernstein polynomial basis ‚Äî step_poly_bernstein","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly_bernstein.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Generalized bernstein polynomial basis ‚Äî step_poly_bernstein","text":"step 1 tuning parameters: degree: Polynomial Degree (type: integer, default: 10)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly_bernstein.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Generalized bernstein polynomial basis ‚Äî step_poly_bernstein","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_poly_bernstein.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized bernstein polynomial basis ‚Äî step_poly_bernstein","text":"","code":"library(tidyr) library(dplyr)  library(ggplot2) data(ames, package = \"modeldata\")  spline_rec <- recipe(Sale_Price ~ Longitude, data = ames) %>%   step_poly_bernstein(Longitude, degree = 6, keep_original_cols = TRUE) %>%   prep()  tidy(spline_rec, number = 1) #> # A tibble: 1 √ó 2 #>   terms     id                   #>   <chr>     <chr>                #> 1 Longitude poly_bernstein_EVN95  # Show where each feature is active spline_rec %>%   bake(new_data =  NULL,-Sale_Price) %>%   pivot_longer(c(starts_with(\"Longitude_\")), names_to = \"feature\", values_to = \"value\") %>%   mutate(feature = gsub(\"Longitude_\", \"feature \", feature)) %>%   filter(value > 0) %>%   ggplot(aes(x = Longitude, y = value)) +   geom_line() +   facet_wrap(~ feature)"},{"path":"https://recipes.tidymodels.org/dev/reference/step_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a profiling version of a data set ‚Äî step_profile","title":"Create a profiling version of a data set ‚Äî step_profile","text":"step_profile() creates specification recipe step fix levels variables one create sequence values remaining variable. step can helpful creating partial regression plots additive models.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a profiling version of a data set ‚Äî step_profile","text":"","code":"step_profile(   recipe,   ...,   profile = NULL,   pct = 0.5,   index = 1,   grid = list(pctl = TRUE, len = 100),   columns = NULL,   role = NA,   trained = FALSE,   skip = FALSE,   id = rand_id(\"profile\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a profiling version of a data set ‚Äî step_profile","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. profile call dplyr::vars()) specify variable profiled (see selections()). column included lists fixed profiled, error thrown. pct value 0 1 percentile fix continuous variables. applied continuous variables captured selectors. date variables, either minimum, median, maximum used based distance pct. index level qualitative variables fixed. variables character (factors), index sorted unique values. applied qualitative variables captured selectors. grid named list elements pctl (logical) len (integer). pctl = TRUE, len denotes many percentiles use create profiling grid. creates grid 0 1 profile determined percentiles data. example, pctl = TRUE len = 3, profile contain minimum, median, maximum values. pctl = FALSE, defines many grid points minimum maximum values created. parameter ignored qualitative variables (since possible levels profiled). case date variables, pctl = FALSE always used since quantile method dates. columns character string selected variable names. field placeholder populated prep() used. role used step since new variables created. trained logical indicate quantities preprocessing estimated. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a profiling version of a data set ‚Äî step_profile","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_profile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a profiling version of a data set ‚Äî step_profile","text":"step atypical , baked, new_data argument ignored; resulting data set based fixed profiled variable's information.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_profile.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Create a profiling version of a data set ‚Äî step_profile","text":"tidy() step, tibble returned columns terms, type , id: terms character, selectors variables selected type character, \"fixed\" \"profiled\" id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_profile.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Create a profiling version of a data set ‚Äî step_profile","text":"underlying operation allow case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a profiling version of a data set ‚Äî step_profile","text":"","code":"data(Sacramento, package = \"modeldata\")  # Setup a grid across beds but keep the other values fixed recipe(~ city + price + beds, data = Sacramento) %>%   step_profile(-beds, profile = vars(beds)) %>%   prep(training = Sacramento) %>%   bake(new_data = NULL) #> # A tibble: 6 √ó 3 #>   city      price  beds #>   <fct>     <int> <int> #> 1 ANTELOPE 220000     1 #> 2 ANTELOPE 220000     2 #> 3 ANTELOPE 220000     3 #> 4 ANTELOPE 220000     4 #> 5 ANTELOPE 220000     5 #> 6 ANTELOPE 220000     8  ##########  # An *additive* model; not for use when there are interactions or # other functional relationships between predictors  lin_mod <- lm(mpg ~ poly(disp, 2) + cyl + hp, data = mtcars)  # Show the difference in the two grid creation methods  disp_pctl <- recipe(~ disp + cyl + hp, data = mtcars) %>%   step_profile(-disp, profile = vars(disp)) %>%   prep(training = mtcars)  disp_grid <- recipe(~ disp + cyl + hp, data = mtcars) %>%   step_profile(     -disp,     profile = vars(disp),     grid = list(pctl = FALSE, len = 100)   ) %>%   prep(training = mtcars)  grid_data <- bake(disp_grid, new_data = NULL) grid_data <- grid_data %>%   mutate(     pred = predict(lin_mod, grid_data),     method = \"grid\"   )  pctl_data <- bake(disp_pctl, new_data = NULL) pctl_data <- pctl_data %>%   mutate(     pred = predict(lin_mod, pctl_data),     method = \"percentile\"   )  plot_data <- bind_rows(grid_data, pctl_data)  library(ggplot2)  ggplot(plot_data, aes(x = disp, y = pred)) +   geom_point(alpha = .5, cex = 1) +   facet_wrap(~method)"},{"path":"https://recipes.tidymodels.org/dev/reference/step_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Scaling numeric data to a specific range ‚Äî step_range","title":"Scaling numeric data to a specific range ‚Äî step_range","text":"step_range() creates specification recipe step normalize numeric data within pre-defined range values.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scaling numeric data to a specific range ‚Äî step_range","text":"","code":"step_range(   recipe,   ...,   role = NA,   trained = FALSE,   min = 0,   max = 1,   clipping = TRUE,   ranges = NULL,   skip = FALSE,   id = rand_id(\"range\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scaling numeric data to a specific range ‚Äî step_range","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. min single numeric value smallest value range. max single numeric value largest value range. clipping single logical value determining whether application transformation onto new data forced inside min max. Defaults TRUE. ranges character vector variables normalized. Note ignored values determined prep(). Setting value ineffective. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scaling numeric data to a specific range ‚Äî step_range","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_range.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scaling numeric data to a specific range ‚Äî step_range","text":"new data point outside ranges seen training set, new values truncated min max.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_range.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Scaling numeric data to a specific range ‚Äî step_range","text":"tidy() step, tibble returned columns terms, min, max , id: terms character, selectors variables selected min numeric, lower range max numeric, upper range id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_range.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Scaling numeric data to a specific range ‚Äî step_range","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scaling numeric data to a specific range ‚Äî step_range","text":"","code":"data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  ranged_trans <- rec %>%   step_range(carbon, hydrogen)  ranged_obj <- prep(ranged_trans, training = biomass_tr)  transformed_te <- bake(ranged_obj, biomass_te)  biomass_te[1:10, names(transformed_te)] #>    carbon hydrogen oxygen nitrogen sulfur    HHV #> 15  46.35     5.67  47.20     0.30   0.22 18.275 #> 20  43.25     5.50  48.06     2.85   0.34 17.560 #> 26  42.70     5.50  49.10     2.40   0.30 17.173 #> 31  46.40     6.10  37.30     1.80   0.50 18.851 #> 36  48.76     6.32  42.77     0.20   0.00 20.547 #> 41  44.30     5.50  41.70     0.70   0.20 18.467 #> 46  38.94     5.23  54.13     1.19   0.51 15.095 #> 51  42.10     4.66  33.80     0.95   0.20 16.240 #> 55  29.20     4.40  31.10     0.14   4.90 11.147 #> 65  27.80     3.77  23.69     4.63   1.05 10.750 transformed_te #> # A tibble: 80 √ó 6 #>    carbon hydrogen oxygen nitrogen sulfur   HHV #>     <dbl>    <dbl>  <dbl>    <dbl>  <dbl> <dbl> #>  1  0.384    0.490   47.2     0.3    0.22  18.3 #>  2  0.347    0.475   48.1     2.85   0.34  17.6 #>  3  0.340    0.475   49.1     2.4    0.3   17.2 #>  4  0.385    0.527   37.3     1.8    0.5   18.9 #>  5  0.414    0.546   42.8     0.2    0     20.5 #>  6  0.360    0.475   41.7     0.7    0.2   18.5 #>  7  0.295    0.451   54.1     1.19   0.51  15.1 #>  8  0.333    0.402   33.8     0.95   0.2   16.2 #>  9  0.177    0.379   31.1     0.14   4.9   11.1 #> 10  0.160    0.325   23.7     4.63   1.05  10.8 #> # ‚Ñπ 70 more rows  tidy(ranged_trans, number = 1) #> # A tibble: 2 √ó 4 #>   terms      min   max id          #>   <chr>    <dbl> <dbl> <chr>       #> 1 carbon      NA    NA range_RcYYk #> 2 hydrogen    NA    NA range_RcYYk tidy(ranged_obj, number = 1) #> # A tibble: 2 √ó 4 #>   terms      min   max id          #>   <chr>    <dbl> <dbl> <chr>       #> 1 carbon   14.6   97.2 range_RcYYk #> 2 hydrogen  0.03  11.6 range_RcYYk"},{"path":"https://recipes.tidymodels.org/dev/reference/step_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Ratio variable creation ‚Äî step_ratio","title":"Ratio variable creation ‚Äî step_ratio","text":"step_ratio() creates specification recipe step create one ratios selected numeric variables.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ratio variable creation ‚Äî step_ratio","text":"","code":"step_ratio(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   denom = denom_vars(),   naming = function(numer, denom) {      make.names(paste(numer, denom, sep = \"_o_\"))  },   columns = NULL,   keep_original_cols = TRUE,   skip = FALSE,   id = rand_id(\"ratio\") )  denom_vars(...)"},{"path":"https://recipes.tidymodels.org/dev/reference/step_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ratio variable creation ‚Äî step_ratio","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables used numerator ratio. used denom_vars, dots indicate variables used denominator. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. denom call denom_vars specify variables used denominator can include specific variable names separated commas different selectors (see selections()). column included lists numerator denominator, removed listing. naming function defines naming convention new ratio columns. columns character string selected variable names. field placeholder populated prep() used. keep_original_cols logical keep original variables output. Defaults TRUE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ratio variable creation ‚Äî step_ratio","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ratio.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Ratio variable creation ‚Äî step_ratio","text":"tidy() step, tibble columns terms (selectors variables selected) denom returned. tidy() step, tibble returned columns terms, denom , id: terms character, selectors variables selected denom character, name denominator selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_ratio.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Ratio variable creation ‚Äî step_ratio","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ratio variable creation ‚Äî step_ratio","text":"","code":"library(recipes) data(biomass, package = \"modeldata\")  biomass$total <- apply(biomass[, 3:7], 1, sum) biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(HHV ~ carbon + hydrogen + oxygen + nitrogen +   sulfur + total, data = biomass_tr )  ratio_recipe <- rec %>%   # all predictors over total   step_ratio(all_numeric_predictors(), denom = denom_vars(total),              keep_original_cols = FALSE)  ratio_recipe <- prep(ratio_recipe, training = biomass_tr)  ratio_data <- bake(ratio_recipe, biomass_te) ratio_data #> # A tibble: 80 √ó 6 #>      HHV carbon_o_total hydrogen_o_total oxygen_o_total nitrogen_o_total #>    <dbl>          <dbl>            <dbl>          <dbl>            <dbl> #>  1  18.3          0.465           0.0568          0.473          0.00301 #>  2  17.6          0.432           0.055           0.481          0.0285  #>  3  17.2          0.427           0.055           0.491          0.024   #>  4  18.9          0.504           0.0662          0.405          0.0195  #>  5  20.5          0.497           0.0645          0.436          0.00204 #>  6  18.5          0.479           0.0595          0.451          0.00758 #>  7  15.1          0.389           0.0523          0.541          0.0119  #>  8  16.2          0.515           0.0570          0.414          0.0116  #>  9  11.1          0.419           0.0631          0.446          0.00201 #> 10  10.8          0.456           0.0619          0.389          0.0760  #> # ‚Ñπ 70 more rows #> # ‚Ñπ 1 more variable: sulfur_o_total <dbl>"},{"path":"https://recipes.tidymodels.org/dev/reference/step_regex.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect a regular expression ‚Äî step_regex","title":"Detect a regular expression ‚Äî step_regex","text":"step_regex() creates specification recipe step create new dummy variable based regular expression.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_regex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect a regular expression ‚Äî step_regex","text":"","code":"step_regex(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   pattern = \".\",   options = list(),   result = make.names(pattern),   input = NULL,   keep_original_cols = TRUE,   skip = FALSE,   id = rand_id(\"regex\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect a regular expression ‚Äî step_regex","text":"recipe recipe object. step added sequence operations recipe. ... single selector function choose variable searched regex pattern. selector resolve single variable. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. pattern character string containing regular expression (character string fixed = TRUE) matched given character vector. Coerced .character character string possible. options list options grepl() include x pattern. result single character value name new variable. valid column name. input single character value name variable searched. NULL computed prep(). keep_original_cols logical keep original variables output. Defaults TRUE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_regex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect a regular expression ‚Äî step_regex","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_regex.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Detect a regular expression ‚Äî step_regex","text":"tidy() step, tibble returned columns terms, result , id: terms character, selectors variables selected result character, new column name id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_regex.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Detect a regular expression ‚Äî step_regex","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_regex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect a regular expression ‚Äî step_regex","text":"","code":"data(covers, package = \"modeldata\")  rec <- recipe(~description, covers) %>%   step_regex(description, pattern = \"(rock|stony)\", result = \"rocks\") %>%   step_regex(description, pattern = \"ratake families\")  rec2 <- prep(rec, training = covers) rec2 #>  #> ‚îÄ‚îÄ Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> predictor: 1 #>  #> ‚îÄ‚îÄ Training information  #> Training data contained 40 data points and no incomplete rows. #>  #> ‚îÄ‚îÄ Operations  #> ‚Ä¢ Regular expression dummy variable using: \"(rock|stony)\" | Trained #> ‚Ä¢ Regular expression dummy variable using: \"ratake families\" | Trained  with_dummies <- bake(rec2, new_data = covers) with_dummies #> # A tibble: 40 √ó 3 #>    description                                       rocks ratake.families #>    <fct>                                             <int>           <int> #>  1 1,cathedral family,rock outcrop complex,extremel‚Ä¶     1               0 #>  2 2,vanet,ratake families complex,very stony            1               1 #>  3 3,haploborolis,rock outcrop complex,rubbly            1               0 #>  4 4,ratake family,rock outcrop complex,rubbly           1               0 #>  5 5,vanet family,rock outcrop complex complex,rubb‚Ä¶     1               0 #>  6 6,vanet,wetmore families,rock outcrop complex,st‚Ä¶     1               0 #>  7 7,gothic family                                       0               0 #>  8 8,supervisor,limber families complex                  0               0 #>  9 9,troutville family,very stony                        1               0 #> 10 10,bullwark,catamount families,rock outcrop comp‚Ä¶     1               0 #> # ‚Ñπ 30 more rows tidy(rec, number = 1) #> # A tibble: 1 √ó 3 #>   terms       result id          #>   <chr>       <chr>  <chr>       #> 1 description NA     regex_0cUH6 tidy(rec2, number = 1) #> # A tibble: 1 √ó 3 #>   terms       result id          #>   <chr>       <chr>  <chr>       #> 1 description rocks  regex_0cUH6"},{"path":"https://recipes.tidymodels.org/dev/reference/step_relevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Relevel factors to a desired level ‚Äî step_relevel","title":"Relevel factors to a desired level ‚Äî step_relevel","text":"step_relevel() creates specification recipe step reorder provided factor columns level specified ref_level first. useful contr.treatment() contrasts take first level reference.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_relevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relevel factors to a desired level ‚Äî step_relevel","text":"","code":"step_relevel(   recipe,   ...,   role = NA,   trained = FALSE,   ref_level,   objects = NULL,   skip = FALSE,   id = rand_id(\"relevel\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_relevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relevel factors to a desired level ‚Äî step_relevel","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. ref_level single character value used relevel factor column(s) (level present). objects list objects contain information factor levels determined prep(). skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_relevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relevel factors to a desired level ‚Äî step_relevel","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_relevel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relevel factors to a desired level ‚Äî step_relevel","text":"selected variables releveled level (given ref_level), placing ref_level first position. Note original columns character, converted factors step.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_relevel.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Relevel factors to a desired level ‚Äî step_relevel","text":"tidy() step, tibble returned columns terms, value , id: terms character, selectors variables selected value character, value ref_level id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_relevel.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Relevel factors to a desired level ‚Äî step_relevel","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_relevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relevel factors to a desired level ‚Äî step_relevel","text":"","code":"data(Sacramento, package = \"modeldata\") rec <- recipe(~ city + zip, data = Sacramento) %>%   step_unknown(city, new_level = \"UNKNOWN\") %>%   step_relevel(city, ref_level = \"UNKNOWN\") %>%   prep()  data <- bake(rec, Sacramento) levels(data$city) #>  [1] \"UNKNOWN\"         \"ANTELOPE\"        \"AUBURN\"          #>  [4] \"CAMERON_PARK\"    \"CARMICHAEL\"      \"CITRUS_HEIGHTS\"  #>  [7] \"COOL\"            \"DIAMOND_SPRINGS\" \"EL_DORADO\"       #> [10] \"EL_DORADO_HILLS\" \"ELK_GROVE\"       \"ELVERTA\"         #> [13] \"FAIR_OAKS\"       \"FOLSOM\"          \"FORESTHILL\"      #> [16] \"GALT\"            \"GARDEN_VALLEY\"   \"GOLD_RIVER\"      #> [19] \"GRANITE_BAY\"     \"GREENWOOD\"       \"LINCOLN\"         #> [22] \"LOOMIS\"          \"MATHER\"          \"MEADOW_VISTA\"    #> [25] \"NORTH_HIGHLANDS\" \"ORANGEVALE\"      \"PENRYN\"          #> [28] \"PLACERVILLE\"     \"POLLOCK_PINES\"   \"RANCHO_CORDOVA\"  #> [31] \"RANCHO_MURIETA\"  \"RIO_LINDA\"       \"ROCKLIN\"         #> [34] \"ROSEVILLE\"       \"SACRAMENTO\"      \"WALNUT_GROVE\"    #> [37] \"WEST_SACRAMENTO\" \"WILTON\""},{"path":"https://recipes.tidymodels.org/dev/reference/step_relu.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply (smoothed) rectified linear transformation ‚Äî step_relu","title":"Apply (smoothed) rectified linear transformation ‚Äî step_relu","text":"step_relu() creates specification recipe step add rectified linear softplus transformations variable data set.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_relu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply (smoothed) rectified linear transformation ‚Äî step_relu","text":"","code":"step_relu(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   shift = 0,   reverse = FALSE,   smooth = FALSE,   prefix = \"right_relu_\",   columns = NULL,   skip = FALSE,   id = rand_id(\"relu\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_relu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply (smoothed) rectified linear transformation ‚Äî step_relu","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. shift numeric value dictating translation apply data. reverse logical indicate left hinge used opposed right hinge. smooth logical indicating softplus function, smooth approximation rectified linear transformation, used. prefix prefix generated column names, defaults \"right_relu_\" right hinge transformation \"left_relu_\" reversed/left hinge transformations. columns character string selected variable names. field placeholder populated prep() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_relu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply (smoothed) rectified linear transformation ‚Äî step_relu","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_relu.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply (smoothed) rectified linear transformation ‚Äî step_relu","text":"rectified linear transformation calculated $$max(0, x - c)$$ also known ReLu right hinge function. reverse true, transformation reflected y-axis, like : $$max(0, c - x)$$ Setting smooth option true instead calculate smooth approximation ReLu according $$ln(1 + e^(x - c)$$ reverse argument may also applied transformation.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_relu.html","id":"connection-to-mars-","dir":"Reference","previous_headings":"","what":"Connection to MARS:","title":"Apply (smoothed) rectified linear transformation ‚Äî step_relu","text":"rectified linear transformation used Multivariate Adaptive Regression Splines basis function fit piecewise linear functions data strategy similar employed tree based models. transformation popular choice activation function many neural networks, seen stacked generalization MARS making use ReLu activations. hinge function also appears loss function Support Vector Machines, penalizes residuals within certain margin decision boundary.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_relu.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Apply (smoothed) rectified linear transformation ‚Äî step_relu","text":"tidy() step, tibble returned columns terms, shift, reverse , id: terms character, selectors variables selected shift numeric, location hinge reverse logical, whether left hinge used id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_relu.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Apply (smoothed) rectified linear transformation ‚Äî step_relu","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_relu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply (smoothed) rectified linear transformation ‚Äî step_relu","text":"","code":"data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  transformed_te <- rec %>%   step_relu(carbon, shift = 40) %>%   prep(biomass_tr) %>%   bake(biomass_te)  transformed_te #> # A tibble: 80 √ó 7 #>    carbon hydrogen oxygen nitrogen sulfur   HHV right_relu_carbon #>     <dbl>    <dbl>  <dbl>    <dbl>  <dbl> <dbl>             <dbl> #>  1   46.4     5.67   47.2     0.3    0.22  18.3              6.35 #>  2   43.2     5.5    48.1     2.85   0.34  17.6              3.25 #>  3   42.7     5.5    49.1     2.4    0.3   17.2              2.70 #>  4   46.4     6.1    37.3     1.8    0.5   18.9              6.4  #>  5   48.8     6.32   42.8     0.2    0     20.5              8.76 #>  6   44.3     5.5    41.7     0.7    0.2   18.5              4.30 #>  7   38.9     5.23   54.1     1.19   0.51  15.1              0    #>  8   42.1     4.66   33.8     0.95   0.2   16.2              2.10 #>  9   29.2     4.4    31.1     0.14   4.9   11.1              0    #> 10   27.8     3.77   23.7     4.63   1.05  10.8              0    #> # ‚Ñπ 70 more rows"},{"path":"https://recipes.tidymodels.org/dev/reference/step_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename variables by name using dplyr ‚Äî step_rename","title":"Rename variables by name using dplyr ‚Äî step_rename","text":"step_rename() creates specification recipe step add variables using dplyr::rename().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename variables by name using dplyr ‚Äî step_rename","text":"","code":"step_rename(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   inputs = NULL,   skip = FALSE,   id = rand_id(\"rename\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename variables by name using dplyr ‚Äî step_rename","text":"recipe recipe object. step added sequence operations recipe. ... One unquoted expressions separated commas. See dplyr::rename() convention new_name = old_name. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. inputs Quosure(s) .... skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename variables by name using dplyr ‚Äî step_rename","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_rename.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rename variables by name using dplyr ‚Äî step_rename","text":"object user's global environment referenced expression defining new variable(s), good idea use quasiquotation (e.g. !!) embed value object expression (portable sessions).","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_rename.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Rename variables by name using dplyr ‚Äî step_rename","text":"tidy() step, tibble returned columns terms, value , id: terms character, selectors variables selected value character, rename expression id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_rename.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Rename variables by name using dplyr ‚Äî step_rename","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename variables by name using dplyr ‚Äî step_rename","text":"","code":"recipe(~., data = iris) %>%   step_rename(Sepal_Width = Sepal.Width) %>%   prep() %>%   bake(new_data = NULL) %>%   slice(1:5) #> # A tibble: 5 √ó 5 #>   Sepal.Length Sepal_Width Petal.Length Petal.Width Species #>          <dbl>       <dbl>        <dbl>       <dbl> <fct>   #> 1          5.1         3.5          1.4         0.2 setosa  #> 2          4.9         3            1.4         0.2 setosa  #> 3          4.7         3.2          1.3         0.2 setosa  #> 4          4.6         3.1          1.5         0.2 setosa  #> 5          5           3.6          1.4         0.2 setosa   vars <- c(var1 = \"cyl\", var2 = \"am\") car_rec <-   recipe(~., data = mtcars) %>%   step_rename(!!!vars)  car_rec %>%   prep() %>%   bake(new_data = NULL) #> # A tibble: 32 √ó 11 #>      mpg  var1  disp    hp  drat    wt  qsec    vs  var2  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ‚Ñπ 22 more rows  car_rec %>%   tidy(number = 1) #> # A tibble: 2 √ó 3 #>   terms value     id           #>   <chr> <chr>     <chr>        #> 1 var1  \"\\\"cyl\\\"\" rename_sfgIN #> 2 var2  \"\\\"am\\\"\"  rename_sfgIN"},{"path":"https://recipes.tidymodels.org/dev/reference/step_rename_at.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename multiple columns using dplyr ‚Äî step_rename_at","title":"Rename multiple columns using dplyr ‚Äî step_rename_at","text":"step_rename_at() creates specification recipe step rename selected variables using common function via dplyr::rename_at().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_rename_at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename multiple columns using dplyr ‚Äî step_rename_at","text":"","code":"step_rename_at(   recipe,   ...,   fn,   role = \"predictor\",   trained = FALSE,   inputs = NULL,   skip = FALSE,   id = rand_id(\"rename_at\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_rename_at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename multiple columns using dplyr ‚Äî step_rename_at","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. fn function fun, quosure style lambda `~ fun(.)‚Äú list either form (containing single function, see dplyr::rename_at()). Note argument must named. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. inputs vector column names populated prep(). skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_rename_at.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename multiple columns using dplyr ‚Äî step_rename_at","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_rename_at.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Rename multiple columns using dplyr ‚Äî step_rename_at","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_rename_at.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Rename multiple columns using dplyr ‚Äî step_rename_at","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_rename_at.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename multiple columns using dplyr ‚Äî step_rename_at","text":"","code":"library(dplyr) recipe(~., data = iris) %>%   step_rename_at(all_predictors(), fn = ~ gsub(\".\", \"_\", ., fixed = TRUE)) %>%   prep() %>%   bake(new_data = NULL) %>%   slice(1:10) #> # A tibble: 10 √ó 5 #>    Sepal_Length Sepal_Width Petal_Length Petal_Width Species #>           <dbl>       <dbl>        <dbl>       <dbl> <fct>   #>  1          5.1         3.5          1.4         0.2 setosa  #>  2          4.9         3            1.4         0.2 setosa  #>  3          4.7         3.2          1.3         0.2 setosa  #>  4          4.6         3.1          1.5         0.2 setosa  #>  5          5           3.6          1.4         0.2 setosa  #>  6          5.4         3.9          1.7         0.4 setosa  #>  7          4.6         3.4          1.4         0.3 setosa  #>  8          5           3.4          1.5         0.2 setosa  #>  9          4.4         2.9          1.4         0.2 setosa  #> 10          4.9         3.1          1.5         0.1 setosa"},{"path":"https://recipes.tidymodels.org/dev/reference/step_rm.html","id":null,"dir":"Reference","previous_headings":"","what":"General variable filter ‚Äî step_rm","title":"General variable filter ‚Äî step_rm","text":"step_rm() creates specification recipe step remove selected variables.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_rm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General variable filter ‚Äî step_rm","text":"","code":"step_rm(   recipe,   ...,   role = NA,   trained = FALSE,   removals = NULL,   skip = FALSE,   id = rand_id(\"rm\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_rm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General variable filter ‚Äî step_rm","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. removals character string contains names columns removed. values determined prep() called. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_rm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General variable filter ‚Äî step_rm","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_rm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"General variable filter ‚Äî step_rm","text":"step can potentially remove columns data set. may cause issues subsequent steps recipe missing columns specifically referenced name. avoid , see advice Tips saving recipes filtering columns section selections.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_rm.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"General variable filter ‚Äî step_rm","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_rm.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"General variable filter ‚Äî step_rm","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_rm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General variable filter ‚Äî step_rm","text":"","code":"data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  library(dplyr) smaller_set <- rec %>%   step_rm(contains(\"gen\"))  smaller_set <- prep(smaller_set, training = biomass_tr)  filtered_te <- bake(smaller_set, biomass_te) filtered_te #> # A tibble: 80 √ó 3 #>    carbon sulfur   HHV #>     <dbl>  <dbl> <dbl> #>  1   46.4   0.22  18.3 #>  2   43.2   0.34  17.6 #>  3   42.7   0.3   17.2 #>  4   46.4   0.5   18.9 #>  5   48.8   0     20.5 #>  6   44.3   0.2   18.5 #>  7   38.9   0.51  15.1 #>  8   42.1   0.2   16.2 #>  9   29.2   4.9   11.1 #> 10   27.8   1.05  10.8 #> # ‚Ñπ 70 more rows  tidy(smaller_set, number = 1) #> # A tibble: 3 √ó 2 #>   terms    id       #>   <chr>    <chr>    #> 1 hydrogen rm_SZcjw #> 2 oxygen   rm_SZcjw #> 3 nitrogen rm_SZcjw"},{"path":"https://recipes.tidymodels.org/dev/reference/step_rollimpute.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute numeric data using a rolling window statistic ‚Äî step_rollimpute","title":"Impute numeric data using a rolling window statistic ‚Äî step_rollimpute","text":"Please use step_impute_roll() instead.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_rollimpute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute numeric data using a rolling window statistic ‚Äî step_rollimpute","text":"","code":"step_rollimpute(   recipe,   ...,   role = NA,   trained = FALSE,   columns = NULL,   statistic = median,   window = 5,   skip = FALSE,   id = rand_id(\"impute_roll\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample rows using dplyr ‚Äî step_sample","title":"Sample rows using dplyr ‚Äî step_sample","text":"step_sample() creates specification recipe step sample rows using dplyr::sample_n() dplyr::sample_frac().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample rows using dplyr ‚Äî step_sample","text":"","code":"step_sample(   recipe,   ...,   role = NA,   trained = FALSE,   size = NULL,   replace = FALSE,   skip = TRUE,   id = rand_id(\"sample\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample rows using dplyr ‚Äî step_sample","text":"recipe recipe object. step added sequence operations recipe. ... Argument ignored; included consistency step specification functions. role used step since new variables created. trained logical indicate quantities preprocessing estimated. size integer fraction. value within (0, 1), dplyr::sample_frac() applied data. integer value 1 greater used, dplyr::sample_n() applied. default NULL uses dplyr::sample_n() size training set (smaller smaller new_data). replace Sample without replacement? skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = FALSE. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample rows using dplyr ‚Äî step_sample","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_sample.html","id":"row-filtering","dir":"Reference","previous_headings":"","what":"Row Filtering","title":"Sample rows using dplyr ‚Äî step_sample","text":"step can entirely remove observations (rows data), can unintended /problematic consequences applying step new data later via bake(). Consider whether skip = TRUE skip = FALSE appropriate given use case. instances affect rows data predicted, step probably applied ; instead, execute operations like outside starting preprocessing recipe().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_sample.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Sample rows using dplyr ‚Äî step_sample","text":"tidy() step, tibble returned columns terms, size, replace , id: terms character, selectors variables selected size numeric, amount sampling replace logical, whether sampling done replacement id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_sample.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Sample rows using dplyr ‚Äî step_sample","text":"step performs unsupervised operation can utilize case weights. result, case weights used frequency weights. information, see documentation case_weights examples tidymodels.org.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample rows using dplyr ‚Äî step_sample","text":"","code":"# Uses `sample_n` recipe(~., data = mtcars) %>%   step_sample(size = 1) %>%   prep(training = mtcars) %>%   bake(new_data = NULL) %>%   nrow() #> [1] 1  # Uses `sample_frac` recipe(~., data = mtcars) %>%   step_sample(size = 0.9999) %>%   prep(training = mtcars) %>%   bake(new_data = NULL) %>%   nrow() #> [1] 32  # Uses `sample_n` and returns _at maximum_ 20 samples. smaller_cars <-   recipe(~., data = mtcars) %>%   step_sample() %>%   prep(training = mtcars %>% slice(1:20))  bake(smaller_cars, new_data = NULL) %>% nrow() #> [1] 20 bake(smaller_cars, new_data = mtcars %>% slice(21:32)) %>% nrow() #> [1] 12"},{"path":"https://recipes.tidymodels.org/dev/reference/step_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Scaling numeric data ‚Äî step_scale","title":"Scaling numeric data ‚Äî step_scale","text":"step_scale() creates specification recipe step normalize numeric data standard deviation one.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scaling numeric data ‚Äî step_scale","text":"","code":"step_scale(   recipe,   ...,   role = NA,   trained = FALSE,   sds = NULL,   factor = 1,   na_rm = TRUE,   skip = FALSE,   id = rand_id(\"scale\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scaling numeric data ‚Äî step_scale","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. sds named numeric vector standard deviations. NULL computed prep(). factor numeric value either 1 2 scales numeric inputs one two standard deviations. dividing two standard deviations, coefficients attached continuous predictors can interpreted way binary inputs. Defaults 1. reference . na_rm logical value indicating whether NA values removed computing standard deviation. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scaling numeric data ‚Äî step_scale","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_scale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scaling numeric data ‚Äî step_scale","text":"Scaling data means standard deviation variable divided data. step_scale estimates variable standard deviations data used training argument prep.recipe. bake.recipe applies scaling new data sets using standard deviations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_scale.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Scaling numeric data ‚Äî step_scale","text":"tidy() step, tibble returned columns terms, value , id: terms character, selectors variables selected value numeric, standard deviations id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_scale.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Scaling numeric data ‚Äî step_scale","text":"step performs unsupervised operation can utilize case weights. result, case weights used frequency weights. information, see documentation case_weights examples tidymodels.org.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_scale.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Scaling numeric data ‚Äî step_scale","text":"Gelman, . (2007) \"Scaling regression inputs dividing two standard deviations.\" Unpublished. Source: http://www.stat.columbia.edu/~gelman/research/unpublished/standardizing.pdf.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scaling numeric data ‚Äî step_scale","text":"","code":"data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  scaled_trans <- rec %>%   step_scale(carbon, hydrogen)  scaled_obj <- prep(scaled_trans, training = biomass_tr)  transformed_te <- bake(scaled_obj, biomass_te)  biomass_te[1:10, names(transformed_te)] #>    carbon hydrogen oxygen nitrogen sulfur    HHV #> 15  46.35     5.67  47.20     0.30   0.22 18.275 #> 20  43.25     5.50  48.06     2.85   0.34 17.560 #> 26  42.70     5.50  49.10     2.40   0.30 17.173 #> 31  46.40     6.10  37.30     1.80   0.50 18.851 #> 36  48.76     6.32  42.77     0.20   0.00 20.547 #> 41  44.30     5.50  41.70     0.70   0.20 18.467 #> 46  38.94     5.23  54.13     1.19   0.51 15.095 #> 51  42.10     4.66  33.80     0.95   0.20 16.240 #> 55  29.20     4.40  31.10     0.14   4.90 11.147 #> 65  27.80     3.77  23.69     4.63   1.05 10.750 transformed_te #> # A tibble: 80 √ó 6 #>    carbon hydrogen oxygen nitrogen sulfur   HHV #>     <dbl>    <dbl>  <dbl>    <dbl>  <dbl> <dbl> #>  1   4.45     4.74   47.2     0.3    0.22  18.3 #>  2   4.16     4.60   48.1     2.85   0.34  17.6 #>  3   4.10     4.60   49.1     2.4    0.3   17.2 #>  4   4.46     5.10   37.3     1.8    0.5   18.9 #>  5   4.68     5.28   42.8     0.2    0     20.5 #>  6   4.26     4.60   41.7     0.7    0.2   18.5 #>  7   3.74     4.37   54.1     1.19   0.51  15.1 #>  8   4.04     3.89   33.8     0.95   0.2   16.2 #>  9   2.81     3.68   31.1     0.14   4.9   11.1 #> 10   2.67     3.15   23.7     4.63   1.05  10.8 #> # ‚Ñπ 70 more rows tidy(scaled_trans, number = 1) #> # A tibble: 2 √ó 3 #>   terms    value id          #>   <chr>    <dbl> <chr>       #> 1 carbon      NA scale_nNppk #> 2 hydrogen    NA scale_nNppk tidy(scaled_obj, number = 1) #> # A tibble: 2 √ó 3 #>   terms    value id          #>   <chr>    <dbl> <chr>       #> 1 carbon   10.4  scale_nNppk #> 2 hydrogen  1.20 scale_nNppk"},{"path":"https://recipes.tidymodels.org/dev/reference/step_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables using dplyr ‚Äî step_select","title":"Select variables using dplyr ‚Äî step_select","text":"step_select() creates specification recipe step select variables using dplyr::select().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables using dplyr ‚Äî step_select","text":"","code":"step_select(   recipe,   ...,   role = NA,   trained = FALSE,   skip = FALSE,   id = rand_id(\"select\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables using dplyr ‚Äî step_select","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms selected step, analysis role assigned? trained logical indicate quantities preprocessing estimated. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables using dplyr ‚Äî step_select","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables using dplyr ‚Äî step_select","text":"object user's global environment referenced expression defining new variable(s), good idea use quasiquotation (e.g. !!) embed value object expression (portable sessions). See examples. step can potentially remove columns data set. may cause issues subsequent steps recipe missing columns specifically referenced name. avoid , see advice Tips saving recipes filtering columns section selections.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_select.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Select variables using dplyr ‚Äî step_select","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_select.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Select variables using dplyr ‚Äî step_select","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select variables using dplyr ‚Äî step_select","text":"","code":"library(dplyr)  iris_tbl <- as_tibble(iris) iris_train <- slice(iris_tbl, 1:75) iris_test <- slice(iris_tbl, 76:150)  dplyr_train <- select(iris_train, Species, starts_with(\"Sepal\")) dplyr_test <- select(iris_test, Species, starts_with(\"Sepal\"))  rec <- recipe(~., data = iris_train) %>%   step_select(Species, starts_with(\"Sepal\")) %>%   prep(training = iris_train)  rec_train <- bake(rec, new_data = NULL) all.equal(dplyr_train, rec_train) #> [1] TRUE  rec_test <- bake(rec, iris_test) all.equal(dplyr_test, rec_test) #> [1] TRUE  # Local variables sepal_vars <- c(\"Sepal.Width\", \"Sepal.Length\")  qq_rec <-   recipe(~., data = iris_train) %>%   # fine for interactive usage   step_select(Species, all_of(sepal_vars)) %>%   # best approach for saving a recipe to disk   step_select(Species, all_of(!!sepal_vars))  # Note that `sepal_vars` is inlined in the second approach qq_rec #>  #> ‚îÄ‚îÄ Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> predictor: 5 #>  #> ‚îÄ‚îÄ Operations  #> ‚Ä¢ Variables selected: Species and all_of(sepal_vars) #> ‚Ä¢ Variables selected: Species, ..."},{"path":"https://recipes.tidymodels.org/dev/reference/step_shuffle.html","id":null,"dir":"Reference","previous_headings":"","what":"Shuffle variables ‚Äî step_shuffle","title":"Shuffle variables ‚Äî step_shuffle","text":"step_shuffle() creates specification recipe step randomly change order rows selected variables.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_shuffle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shuffle variables ‚Äî step_shuffle","text":"","code":"step_shuffle(   recipe,   ...,   role = NA,   trained = FALSE,   columns = NULL,   skip = FALSE,   id = rand_id(\"shuffle\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_shuffle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shuffle variables ‚Äî step_shuffle","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. columns character string selected variable names. field placeholder populated prep() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_shuffle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shuffle variables ‚Äî step_shuffle","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_shuffle.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Shuffle variables ‚Äî step_shuffle","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_shuffle.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Shuffle variables ‚Äî step_shuffle","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_shuffle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shuffle variables ‚Äî step_shuffle","text":"","code":"integers <- data.frame(A = 1:12, B = 13:24, C = 25:36)  library(dplyr) rec <- recipe(~ A + B + C, data = integers) %>%   step_shuffle(A, B)  rand_set <- prep(rec, training = integers)  set.seed(5377) bake(rand_set, integers) #> # A tibble: 12 √ó 3 #>        A     B     C #>    <int> <int> <int> #>  1     5    13    25 #>  2     4    24    26 #>  3     9    23    27 #>  4     1    18    28 #>  5    11    14    29 #>  6    10    21    30 #>  7     6    19    31 #>  8     3    22    32 #>  9    12    16    33 #> 10     7    15    34 #> 11     2    17    35 #> 12     8    20    36  tidy(rec, number = 1) #> # A tibble: 2 √ó 2 #>   terms id            #>   <chr> <chr>         #> 1 A     shuffle_j0rp7 #> 2 B     shuffle_j0rp7 tidy(rand_set, number = 1) #> # A tibble: 2 √ó 2 #>   terms id            #>   <chr> <chr>         #> 1 A     shuffle_j0rp7 #> 2 B     shuffle_j0rp7"},{"path":"https://recipes.tidymodels.org/dev/reference/step_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter rows by position using dplyr ‚Äî step_slice","title":"Filter rows by position using dplyr ‚Äî step_slice","text":"step_slice() creates specification recipe step filter rows using dplyr::slice().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter rows by position using dplyr ‚Äî step_slice","text":"","code":"step_slice(   recipe,   ...,   role = NA,   trained = FALSE,   inputs = NULL,   skip = TRUE,   id = rand_id(\"slice\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter rows by position using dplyr ‚Äî step_slice","text":"recipe recipe object. step added sequence operations recipe. ... Integer row values. See dplyr::slice() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. inputs Quosure values given .... skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = FALSE. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter rows by position using dplyr ‚Äî step_slice","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_slice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter rows by position using dplyr ‚Äî step_slice","text":"object user's global environment referenced expression defining new variable(s), good idea use quasiquotation (e.g. !!) embed value object expression (portable sessions). See examples.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_slice.html","id":"row-filtering","dir":"Reference","previous_headings":"","what":"Row Filtering","title":"Filter rows by position using dplyr ‚Äî step_slice","text":"step can entirely remove observations (rows data), can unintended /problematic consequences applying step new data later via bake(). Consider whether skip = TRUE skip = FALSE appropriate given use case. instances affect rows data predicted, step probably applied ; instead, execute operations like outside starting preprocessing recipe().","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_slice.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Filter rows by position using dplyr ‚Äî step_slice","text":"tidy() step, tibble returned columns terms id: terms character, containing filtering indices id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_slice.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Filter rows by position using dplyr ‚Äî step_slice","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter rows by position using dplyr ‚Äî step_slice","text":"","code":"rec <- recipe(~., data = iris) %>%   step_slice(1:3)  prepped <- prep(rec, training = iris %>% slice(1:75)) tidy(prepped, number = 1) #> # A tibble: 1 √ó 2 #>   terms id          #>   <chr> <chr>       #> 1 1:3   slice_FPmAy  library(dplyr)  dplyr_train <-   iris %>%   as_tibble() %>%   slice(1:75) %>%   slice(1:3)  rec_train <- bake(prepped, new_data = NULL) all.equal(dplyr_train, rec_train) #> [1] TRUE  dplyr_test <-   iris %>%   as_tibble() %>%   slice(76:150)  rec_test <- bake(prepped, iris %>% slice(76:150)) all.equal(dplyr_test, rec_test) #> [1] TRUE  # Embedding the integer expression (or vector) into the # recipe:  keep_rows <- 1:6  qq_rec <-   recipe(~., data = iris) %>%   # Embed `keep_rows` in the call using !!!   step_slice(!!!keep_rows) %>%   prep(training = iris)  tidy(qq_rec, number = 1) #> # A tibble: 6 √ó 2 #>   terms id          #>   <chr> <chr>       #> 1 1L    slice_xhh4Y #> 2 2L    slice_xhh4Y #> 3 3L    slice_xhh4Y #> 4 4L    slice_xhh4Y #> 5 5L    slice_xhh4Y #> 6 6L    slice_xhh4Y"},{"path":"https://recipes.tidymodels.org/dev/reference/step_spatialsign.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial sign preprocessing ‚Äî step_spatialsign","title":"Spatial sign preprocessing ‚Äî step_spatialsign","text":"step_spatialsign() specification recipe step convert numeric data projection unit sphere.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spatialsign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial sign preprocessing ‚Äî step_spatialsign","text":"","code":"step_spatialsign(   recipe,   ...,   role = \"predictor\",   na_rm = TRUE,   trained = FALSE,   columns = NULL,   skip = FALSE,   id = rand_id(\"spatialsign\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_spatialsign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial sign preprocessing ‚Äî step_spatialsign","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. na_rm logical: missing data removed norm computation? trained logical indicate quantities preprocessing estimated. columns character string selected variable names. field placeholder populated prep() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spatialsign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial sign preprocessing ‚Äî step_spatialsign","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spatialsign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spatial sign preprocessing ‚Äî step_spatialsign","text":"spatial sign transformation projects variables onto unit sphere related global contrast normalization. spatial sign vector w w/norm(w). variables centered scaled prior computations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spatialsign.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Spatial sign preprocessing ‚Äî step_spatialsign","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spatialsign.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Spatial sign preprocessing ‚Äî step_spatialsign","text":"step performs unsupervised operation can utilize case weights. result, frequency weights allowed. information, see documentation case_weights examples tidymodels.org. Unlike , step requires case weights available new samples processed (e.g., bake() used predict() workflow). tell recipes case weights required bake time, use recipe %>% update_role_requirements(role = \"case_weights\", bake = TRUE). See update_role_requirements() information.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spatialsign.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spatial sign preprocessing ‚Äî step_spatialsign","text":"Serneels, S., De Nolf, E., Van Espen, P. (2006). Spatial sign preprocessing: simple way impart moderate robustness multivariate estimators. Journal Chemical Information Modeling, 46(3), 1402-1409.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_spatialsign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial sign preprocessing ‚Äî step_spatialsign","text":"","code":"data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr )  ss_trans <- rec %>%   step_center(carbon, hydrogen) %>%   step_scale(carbon, hydrogen) %>%   step_spatialsign(carbon, hydrogen)  ss_obj <- prep(ss_trans, training = biomass_tr)  transformed_te <- bake(ss_obj, biomass_te)  plot(biomass_te$carbon, biomass_te$hydrogen)   plot(transformed_te$carbon, transformed_te$hydrogen)   tidy(ss_trans, number = 3) #> # A tibble: 2 √ó 2 #>   terms    id                #>   <chr>    <chr>             #> 1 carbon   spatialsign_Geidk #> 2 hydrogen spatialsign_Geidk tidy(ss_obj, number = 3) #> # A tibble: 2 √ó 2 #>   terms    id                #>   <chr>    <chr>             #> 1 carbon   spatialsign_Geidk #> 2 hydrogen spatialsign_Geidk"},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_b.html","id":null,"dir":"Reference","previous_headings":"","what":"Basis splines ‚Äî step_spline_b","title":"Basis splines ‚Äî step_spline_b","text":"step_spline_b() creates specification recipe step creates b-spline features.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_b.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basis splines ‚Äî step_spline_b","text":"","code":"step_spline_b(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   deg_free = 10,   degree = 3,   complete_set = FALSE,   options = NULL,   keep_original_cols = FALSE,   results = NULL,   skip = FALSE,   id = rand_id(\"spline_b\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_b.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basis splines ‚Äî step_spline_b","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. deg_free degrees freedom b-spline. degrees freedom b-spline increase, flexible complex curves can generated. degree non-negative integer specifying degree piece-wise polynomial. default value 3 cubic splines. Zero degree allowed piece-wise constant basis functions. complete_set TRUE, complete basis matrix returned. Otherwise, first basis excluded output. maps intercept argument corresponding function splines2 package default value. options list options splines2::bSpline() include x, df, degree, intercept. keep_original_cols logical keep original variables output. Defaults FALSE. results list objects created step trained. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_b.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basis splines ‚Äî step_spline_b","text":"object classes \"step_spline_b\" \"step\".","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_b.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Basis splines ‚Äî step_spline_b","text":"Spline transformations take numeric column create multiple features , used model, can estimate nonlinear trends column outcome. degrees freedom determines many new features added data. Setting periodic = TRUE list passed options, periodic version spline used. spline expansion fails selected column, step remove column's results (retain original data). Use tidy() method determine columns used.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_b.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Basis splines ‚Äî step_spline_b","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_b.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Basis splines ‚Äî step_spline_b","text":"step 2 tuning parameters: deg_free: Spline Degrees Freedom (type: integer, default: 10) degree: Polynomial Degree (type: integer, default: 3)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_b.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Basis splines ‚Äî step_spline_b","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_b.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basis splines ‚Äî step_spline_b","text":"","code":"library(tidyr) library(dplyr)  library(ggplot2) data(ames, package = \"modeldata\")  spline_rec <- recipe(Sale_Price ~ Longitude, data = ames) %>%   step_spline_b(Longitude, deg_free = 6, keep_original_cols = TRUE) %>%   prep()  tidy(spline_rec, number = 1) #> # A tibble: 1 √ó 2 #>   terms     id             #>   <chr>     <chr>          #> 1 Longitude spline_b_FXUpF  # Show where each feature is active spline_rec %>%   bake(new_data =  NULL,-Sale_Price) %>%   pivot_longer(c(starts_with(\"Longitude_\")), names_to = \"feature\", values_to = \"value\") %>%   mutate(feature = gsub(\"Longitude_\", \"feature \", feature)) %>%   filter(value > 0) %>%   ggplot(aes(x = Longitude, y = value)) +   geom_line() +   facet_wrap(~ feature)"},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_convex.html","id":null,"dir":"Reference","previous_headings":"","what":"Convex splines ‚Äî step_spline_convex","title":"Convex splines ‚Äî step_spline_convex","text":"step_spline_convex() creates specification recipe step creates convex spline features.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_convex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convex splines ‚Äî step_spline_convex","text":"","code":"step_spline_convex(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   deg_free = 10,   degree = 3,   complete_set = TRUE,   options = NULL,   keep_original_cols = FALSE,   results = NULL,   skip = FALSE,   id = rand_id(\"spline_convex\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_convex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convex splines ‚Äî step_spline_convex","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. deg_free degrees freedom b-spline. degrees freedom b-spline increase, flexible complex curves can generated. degree degree C-spline defined degree associated M-spline instead actual polynomial degree. example, C-spline basis degree 2 defined scaled double integral associated M-spline basis degree 2. complete_set TRUE, complete basis matrix returned. Otherwise, first basis excluded output. maps intercept argument corresponding function splines2 package default value. options list options splines2::cSpline() include x, df, degree, intercept. keep_original_cols logical keep original variables output. Defaults FALSE. results list objects created step trained. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_convex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convex splines ‚Äî step_spline_convex","text":"object classes \"step_spline_convex\" \"step\".","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_convex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convex splines ‚Äî step_spline_convex","text":"Spline transformations take numeric column create multiple features , used model, can estimate nonlinear trends column outcome. degrees freedom determines many new features added data. particular spline functions forms guaranteed convex. spline expansion fails selected column, step remove column's results (retain original data). Use tidy() method determine columns used.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_convex.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Convex splines ‚Äî step_spline_convex","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_convex.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Convex splines ‚Äî step_spline_convex","text":"step 2 tuning parameters: deg_free: Spline Degrees Freedom (type: integer, default: 10) degree: Polynomial Degree (type: integer, default: 3)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_convex.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Convex splines ‚Äî step_spline_convex","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_convex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convex splines ‚Äî step_spline_convex","text":"","code":"library(tidyr) library(dplyr)  library(ggplot2) data(ames, package = \"modeldata\")  spline_rec <- recipe(Sale_Price ~ Longitude, data = ames) %>%   step_spline_convex(Longitude, deg_free = 6, keep_original_cols = TRUE) %>%   prep()  tidy(spline_rec, number = 1) #> # A tibble: 1 √ó 2 #>   terms     id                  #>   <chr>     <chr>               #> 1 Longitude spline_convex_TpMy9  # Show where each feature is active spline_rec %>%   bake(new_data =  NULL,-Sale_Price) %>%   pivot_longer(c(starts_with(\"Longitude_\")), names_to = \"feature\", values_to = \"value\") %>%   mutate(feature = gsub(\"Longitude_\", \"feature \", feature)) %>%   filter(value > 0) %>%   ggplot(aes(x = Longitude, y = value)) +   geom_line() +   facet_wrap(~ feature)"},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_monotone.html","id":null,"dir":"Reference","previous_headings":"","what":"Monotone splines ‚Äî step_spline_monotone","title":"Monotone splines ‚Äî step_spline_monotone","text":"step_spline_monotone() creates specification recipe step creates monotone spline features.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_monotone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monotone splines ‚Äî step_spline_monotone","text":"","code":"step_spline_monotone(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   deg_free = 10,   degree = 3,   complete_set = TRUE,   options = NULL,   keep_original_cols = FALSE,   results = NULL,   skip = FALSE,   id = rand_id(\"spline_monotone\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_monotone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monotone splines ‚Äî step_spline_monotone","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. deg_free degrees freedom b-spline. degrees freedom b-spline increase, flexible complex curves can generated. degree degree -spline defined degree associated M-spline instead actual polynomial degree. example, -spline basis degree 2 defined integral associated M-spline basis degree 2. complete_set TRUE, complete basis matrix returned. Otherwise, first basis excluded output. maps intercept argument corresponding function splines2 package default value. options list options splines2::iSpline() include x, df, degree, periodic, intercept. keep_original_cols logical keep original variables output. Defaults FALSE. results list objects created step trained. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_monotone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monotone splines ‚Äî step_spline_monotone","text":"object classes \"step_spline_monotone\" \"step\".","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_monotone.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monotone splines ‚Äî step_spline_monotone","text":"Spline transformations take numeric column create multiple features , used model, can estimate nonlinear trends column outcome. degrees freedom determines many new features added data. splines integrated forms M-splines non-negative monotonic. means , used fitting function produces non-negative regression coefficients, resulting fit monotonic. spline expansion fails selected column, step remove column's results (retain original data). Use tidy() method determine columns used.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_monotone.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Monotone splines ‚Äî step_spline_monotone","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_monotone.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Monotone splines ‚Äî step_spline_monotone","text":"step 2 tuning parameters: deg_free: Spline Degrees Freedom (type: integer, default: 10) degree: Polynomial Degree (type: integer, default: 3)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_monotone.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Monotone splines ‚Äî step_spline_monotone","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_monotone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monotone splines ‚Äî step_spline_monotone","text":"","code":"library(tidyr) library(dplyr)  library(ggplot2) data(ames, package = \"modeldata\")  spline_rec <- recipe(Sale_Price ~ Longitude, data = ames) %>%   step_spline_monotone(Longitude, deg_free = 6, keep_original_cols = TRUE) %>%   prep()  tidy(spline_rec, number = 1) #> # A tibble: 1 √ó 2 #>   terms     id                    #>   <chr>     <chr>                 #> 1 Longitude spline_monotone_QEg7v  # Show where each feature is active spline_rec %>%   bake(new_data =  NULL,-Sale_Price) %>%   pivot_longer(c(starts_with(\"Longitude_\")), names_to = \"feature\", values_to = \"value\") %>%   mutate(feature = gsub(\"Longitude_\", \"feature \", feature)) %>%   filter(value > 0) %>%   ggplot(aes(x = Longitude, y = value)) +   geom_line() +   facet_wrap(~ feature)"},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_natural.html","id":null,"dir":"Reference","previous_headings":"","what":"Natural splines ‚Äî step_spline_natural","title":"Natural splines ‚Äî step_spline_natural","text":"step_spline_natural() creates specification recipe step creates natural spline features.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_natural.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Natural splines ‚Äî step_spline_natural","text":"","code":"step_spline_natural(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   deg_free = 10,   complete_set = FALSE,   options = NULL,   keep_original_cols = FALSE,   results = NULL,   skip = FALSE,   id = rand_id(\"spline_natural\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_natural.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Natural splines ‚Äî step_spline_natural","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. deg_free degrees freedom natural spline. degrees freedom natural spline increase, flexible complex curves can generated. step requires least two degrees freedom. complete_set TRUE, complete basis matrix returned. Otherwise, first basis excluded output. maps intercept argument corresponding function splines2 package default value. options list options splines2::naturalSpline() include x, df, intercept. keep_original_cols logical keep original variables output. Defaults FALSE. results list objects created step trained. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_natural.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Natural splines ‚Äî step_spline_natural","text":"object classes \"step_spline_natural\" \"step\".","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_natural.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Natural splines ‚Äî step_spline_natural","text":"Spline transformations take numeric column create multiple features , used model, can estimate nonlinear trends column outcome. degrees freedom determines many new features added data. spline piece-wise cubic polynomial function. spline expansion fails selected column, step remove column's results (retain original data). Use tidy() method determine columns used.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_natural.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Natural splines ‚Äî step_spline_natural","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_natural.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Natural splines ‚Äî step_spline_natural","text":"step 1 tuning parameters: deg_free: Spline Degrees Freedom (type: integer, default: 10)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_natural.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Natural splines ‚Äî step_spline_natural","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_natural.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Natural splines ‚Äî step_spline_natural","text":"","code":"library(tidyr) library(dplyr)  library(ggplot2) data(ames, package = \"modeldata\")  spline_rec <- recipe(Sale_Price ~ Longitude, data = ames) %>%   step_spline_natural(Longitude, deg_free = 6, keep_original_cols = TRUE) %>%   prep()  tidy(spline_rec, number = 1) #> # A tibble: 1 √ó 2 #>   terms     id                   #>   <chr>     <chr>                #> 1 Longitude spline_natural_g2f22  # Show where each feature is active spline_rec %>%   bake(new_data =  NULL,-Sale_Price) %>%   pivot_longer(c(starts_with(\"Longitude_\")), names_to = \"feature\", values_to = \"value\") %>%   mutate(feature = gsub(\"Longitude_\", \"feature \", feature)) %>%   filter(value > 0) %>%   ggplot(aes(x = Longitude, y = value)) +   geom_line() +   facet_wrap(~ feature)"},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_nonnegative.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-negative splines ‚Äî step_spline_nonnegative","title":"Non-negative splines ‚Äî step_spline_nonnegative","text":"step_spline_nonnegative() creates specification recipe step creates non-negative spline features.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_nonnegative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-negative splines ‚Äî step_spline_nonnegative","text":"","code":"step_spline_nonnegative(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   deg_free = 10,   degree = 3,   complete_set = FALSE,   options = NULL,   keep_original_cols = FALSE,   results = NULL,   skip = FALSE,   id = rand_id(\"spline_nonnegative\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_nonnegative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non-negative splines ‚Äî step_spline_nonnegative","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. deg_free degrees freedom b-spline. degrees freedom b-spline increase, flexible complex curves can generated. degree nonnegative integer specifying degree piecewise polynomial. default value 3 cubic splines. Zero degree allowed piecewise constant basis functions. complete_set TRUE, complete basis matrix returned. Otherwise, first basis excluded output. maps intercept argument corresponding function splines2 package default value. options list options splines2::mSpline() include x, df, degree, periodic, intercept. keep_original_cols logical keep original variables output. Defaults FALSE. results list objects created step trained. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_nonnegative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non-negative splines ‚Äî step_spline_nonnegative","text":"object classes \"step_spline_nonnegative\" \"step\".","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_nonnegative.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Non-negative splines ‚Äî step_spline_nonnegative","text":"Spline transformations take numeric column create multiple features , used model, can estimate nonlinear trends column outcome. degrees freedom determines many new features added data. function generates M-splines (Curry, Schoenberg 1988) non-negative interesting statistical properties (integrating one). zero-degree M-spline generates box/step functions first degree basis function triangular. Setting periodic = TRUE list passed options, periodic version spline used. spline expansion fails selected column, step remove column's results (retain original data). Use tidy() method determine columns used.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_nonnegative.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Non-negative splines ‚Äî step_spline_nonnegative","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_nonnegative.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Non-negative splines ‚Äî step_spline_nonnegative","text":"step 2 tuning parameters: deg_free: Spline Degrees Freedom (type: integer, default: 10) degree: Polynomial Degree (type: integer, default: 3)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_nonnegative.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Non-negative splines ‚Äî step_spline_nonnegative","text":"underlying operation allow case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_nonnegative.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Non-negative splines ‚Äî step_spline_nonnegative","text":"Curry, H.B., Schoenberg, .J. (1988). Polya Frequency Functions IV: Fundamental Spline Functions Limits. : de Boor, C. (eds) . J. Schoenberg Selected Papers. Contemporary Mathematicians. Birkh√§user, Boston, MA Ramsay, J. O. \"Monotone Regression Splines Action.\" Statistical Science, vol. 3, . 4, 1988, pp. 425‚Äì41","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_spline_nonnegative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non-negative splines ‚Äî step_spline_nonnegative","text":"","code":"library(tidyr) library(dplyr)  library(ggplot2) data(ames, package = \"modeldata\")  spline_rec <- recipe(Sale_Price ~ Longitude, data = ames) %>%   step_spline_nonnegative(Longitude, deg_free = 6, keep_original_cols = TRUE) %>%   prep()  tidy(spline_rec, number = 1) #> # A tibble: 1 √ó 2 #>   terms     id                       #>   <chr>     <chr>                    #> 1 Longitude spline_nonnegative_KVV9Z  # Show where each feature is active spline_rec %>%   bake(new_data =  NULL,-Sale_Price) %>%   pivot_longer(c(starts_with(\"Longitude_\")), names_to = \"feature\", values_to = \"value\") %>%   mutate(feature = gsub(\"Longitude_\", \"feature \", feature)) %>%   filter(value > 0) %>%   ggplot(aes(x = Longitude, y = value)) +   geom_line() +   facet_wrap(~ feature)"},{"path":"https://recipes.tidymodels.org/dev/reference/step_sqrt.html","id":null,"dir":"Reference","previous_headings":"","what":"Square root transformation ‚Äî step_sqrt","title":"Square root transformation ‚Äî step_sqrt","text":"step_sqrt() creates specification recipe step apply square root transform variables.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_sqrt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Square root transformation ‚Äî step_sqrt","text":"","code":"step_sqrt(   recipe,   ...,   role = NA,   trained = FALSE,   columns = NULL,   skip = FALSE,   id = rand_id(\"sqrt\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_sqrt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Square root transformation ‚Äî step_sqrt","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. columns character string selected variable names. field placeholder populated prep() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_sqrt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Square root transformation ‚Äî step_sqrt","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_sqrt.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Square root transformation ‚Äî step_sqrt","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_sqrt.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Square root transformation ‚Äî step_sqrt","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_sqrt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Square root transformation ‚Äî step_sqrt","text":"","code":"set.seed(313) examples <- matrix(rnorm(40)^2, ncol = 2) examples <- as.data.frame(examples)  rec <- recipe(~ V1 + V2, data = examples)  sqrt_trans <- rec %>%   step_sqrt(all_numeric_predictors())  sqrt_obj <- prep(sqrt_trans, training = examples)  transformed_te <- bake(sqrt_obj, examples) plot(examples$V1, transformed_te$V1)   tidy(sqrt_trans, number = 1) #> # A tibble: 1 √ó 2 #>   terms                    id         #>   <chr>                    <chr>      #> 1 all_numeric_predictors() sqrt_IhS7o tidy(sqrt_obj, number = 1) #> # A tibble: 2 √ó 2 #>   terms id         #>   <chr> <chr>      #> 1 V1    sqrt_IhS7o #> 2 V2    sqrt_IhS7o"},{"path":"https://recipes.tidymodels.org/dev/reference/step_string2factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert strings to factors ‚Äî step_string2factor","title":"Convert strings to factors ‚Äî step_string2factor","text":"step_string2factor() convert one character vectors factors (ordered unordered). Use step special cases (see Details) instead convert strings factors using tidymodels functions.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_string2factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert strings to factors ‚Äî step_string2factor","text":"","code":"step_string2factor(   recipe,   ...,   role = NA,   trained = FALSE,   levels = NULL,   ordered = FALSE,   skip = FALSE,   id = rand_id(\"string2factor\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_string2factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert strings to factors ‚Äî step_string2factor","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. levels options specification levels used new factor. left NULL, sorted unique values present bake called used. ordered single logical value; factor(s) ordered? skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_string2factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert strings to factors ‚Äî step_string2factor","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_string2factor.html","id":"when-should-you-use-this-step-","dir":"Reference","previous_headings":"","what":"When should you use this step?","title":"Convert strings to factors ‚Äî step_string2factor","text":"cases, planning use step_string2factor() without setting levels, better converting character variables factor variables using recipe. can done using dplyr following code   resampling, complete set values might character data. Converting factors step_string2factor()  misconfigure levels. levels argument step_string2factor()used, convert variables affected step levels. , need know full set level define recipe. Also, note prep() option strings_as_factors defaults TRUE. changed raw character data applied step_string2factor(). However, step can also take existing factors (leave -).","code":"df <- mutate(df, across(where(is.character), as.factor))"},{"path":"https://recipes.tidymodels.org/dev/reference/step_string2factor.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Convert strings to factors ‚Äî step_string2factor","text":"tidy() step, tibble returned columns terms, ordered , id: terms character, selectors variables selected ordered logical, factors ordered id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_string2factor.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Convert strings to factors ‚Äî step_string2factor","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_string2factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert strings to factors ‚Äî step_string2factor","text":"","code":"data(Sacramento, package = \"modeldata\")  # convert factor to string to demonstrate Sacramento$city <- as.character(Sacramento$city)  rec <- recipe(~ city + zip, data = Sacramento)  make_factor <- rec %>%   step_string2factor(city)  make_factor <- prep(make_factor,   training = Sacramento )  make_factor #>  #> ‚îÄ‚îÄ Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> predictor: 2 #>  #> ‚îÄ‚îÄ Training information  #> Training data contained 932 data points and no incomplete rows. #>  #> ‚îÄ‚îÄ Operations  #> ‚Ä¢ Factor variables from: city | Trained  # note that `city` is a factor in recipe output bake(make_factor, new_data = NULL) %>% head() #> # A tibble: 6 √ó 2 #>   city       zip    #>   <fct>      <fct>  #> 1 SACRAMENTO z95838 #> 2 SACRAMENTO z95823 #> 3 SACRAMENTO z95815 #> 4 SACRAMENTO z95815 #> 5 SACRAMENTO z95824 #> 6 SACRAMENTO z95841  # ...but remains a string in the data Sacramento %>% head() #> # A tibble: 6 √ó 9 #>   city       zip     beds baths  sqft type        price latitude longitude #>   <chr>      <fct>  <int> <dbl> <int> <fct>       <int>    <dbl>     <dbl> #> 1 SACRAMENTO z95838     2     1   836 Residential 59222     38.6     -121. #> 2 SACRAMENTO z95823     3     1  1167 Residential 68212     38.5     -121. #> 3 SACRAMENTO z95815     2     1   796 Residential 68880     38.6     -121. #> 4 SACRAMENTO z95815     2     1   852 Residential 69307     38.6     -121. #> 5 SACRAMENTO z95824     2     1   797 Residential 81900     38.5     -121. #> 6 SACRAMENTO z95841     3     1  1122 Condo       89921     38.7     -121."},{"path":"https://recipes.tidymodels.org/dev/reference/step_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Time feature generator ‚Äî step_time","title":"Time feature generator ‚Äî step_time","text":"step_time() creates specification recipe step convert date-time data one factor numeric variables.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time feature generator ‚Äî step_time","text":"","code":"step_time(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   features = c(\"hour\", \"minute\", \"second\"),   columns = NULL,   keep_original_cols = TRUE,   skip = FALSE,   id = rand_id(\"time\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time feature generator ‚Äî step_time","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. selected variables class POSIXct POSIXlt. See selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. features character string includes least one following values: (), hour, hour12, minute, second, decimal_day. columns character string selected variable names. field placeholder populated prep() used. keep_original_cols logical keep original variables output. Defaults TRUE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time feature generator ‚Äî step_time","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time feature generator ‚Äî step_time","text":"Unlike steps, step_time() remove original time variables default. Set keep_original_cols FALSE remove . decimal_day return time day decimal number 0 24. example \"07:15:00\" transformed 7.25  \"03:59:59\" transformed 3.999722. formula calculations hour(x) + (second(x) + minute(x) * 60) / 3600. See step_date() want calculate features larger hours.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_time.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Time feature generator ‚Äî step_time","text":"tidy() step, tibble returned columns terms, value , id: terms character, selectors variables selected value character, feature names id character, id step","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time feature generator ‚Äî step_time","text":"","code":"library(lubridate)  examples <- data.frame(   times = ymd_hms(\"2022-05-06 23:51:07\") +   hours(1:5) + minutes(1:5) + seconds(1:5) ) time_rec <- recipe(~ times, examples) %>%   step_time(all_predictors())  tidy(time_rec, number = 1) #> # A tibble: 3 √ó 3 #>   terms            value  id         #>   <chr>            <chr>  <chr>      #> 1 all_predictors() hour   time_wvoo0 #> 2 all_predictors() minute time_wvoo0 #> 3 all_predictors() second time_wvoo0  time_rec <- prep(time_rec, training = examples)  time_values <- bake(time_rec, new_data = examples) time_values #> # A tibble: 5 √ó 4 #>   times               times_hour times_minute times_second #>   <dttm>                   <int>        <int>        <dbl> #> 1 2022-05-07 00:52:08          0           52            8 #> 2 2022-05-07 01:53:09          1           53            9 #> 3 2022-05-07 02:54:10          2           54           10 #> 4 2022-05-07 03:55:11          3           55           11 #> 5 2022-05-07 04:56:12          4           56           12  tidy(time_rec, number = 1) #> # A tibble: 3 √ó 3 #>   terms value  id         #>   <chr> <chr>  <chr>      #> 1 times hour   time_wvoo0 #> 2 times minute time_wvoo0 #> 3 times second time_wvoo0"},{"path":"https://recipes.tidymodels.org/dev/reference/step_unknown.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign missing categories to ","title":"Assign missing categories to ","text":"step_unknown() creates specification recipe step assign missing value factor level \"unknown\".","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_unknown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign missing categories to ","text":"","code":"step_unknown(   recipe,   ...,   role = NA,   trained = FALSE,   new_level = \"unknown\",   objects = NULL,   skip = FALSE,   id = rand_id(\"unknown\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_unknown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign missing categories to ","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. new_level single character value assigned new factor levels. objects list objects contain information factor levels determined prep(). skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_unknown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign missing categories to ","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_unknown.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign missing categories to ","text":"selected variables adjusted new level (given new_level) placed last position. Note original columns character, converted factors step. new_level already data given prep, error thrown.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_unknown.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Assign missing categories to ","text":"tidy() step, tibble returned columns terms, value , id: terms character, selectors variables selected statistic character, factor levels new values id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_unknown.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Assign missing categories to ","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_unknown.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign missing categories to ","text":"","code":"data(Sacramento, package = \"modeldata\")  rec <-   recipe(~ city + zip, data = Sacramento) %>%   step_unknown(city, new_level = \"unknown city\") %>%   step_unknown(zip, new_level = \"unknown zip\") %>%   prep()  table(bake(rec, new_data = NULL) %>% pull(city),   Sacramento %>% pull(city),   useNA = \"always\" ) %>%   as.data.frame() %>%   dplyr::filter(Freq > 0) #>               Var1            Var2 Freq #> 1         ANTELOPE        ANTELOPE   33 #> 2           AUBURN          AUBURN    5 #> 3     CAMERON_PARK    CAMERON_PARK    9 #> 4       CARMICHAEL      CARMICHAEL   20 #> 5   CITRUS_HEIGHTS  CITRUS_HEIGHTS   35 #> 6             COOL            COOL    1 #> 7  DIAMOND_SPRINGS DIAMOND_SPRINGS    1 #> 8        EL_DORADO       EL_DORADO    2 #> 9  EL_DORADO_HILLS EL_DORADO_HILLS   23 #> 10       ELK_GROVE       ELK_GROVE  114 #> 11         ELVERTA         ELVERTA    4 #> 12       FAIR_OAKS       FAIR_OAKS    9 #> 13          FOLSOM          FOLSOM   17 #> 14      FORESTHILL      FORESTHILL    1 #> 15            GALT            GALT   21 #> 16   GARDEN_VALLEY   GARDEN_VALLEY    1 #> 17      GOLD_RIVER      GOLD_RIVER    4 #> 18     GRANITE_BAY     GRANITE_BAY    3 #> 19       GREENWOOD       GREENWOOD    1 #> 20         LINCOLN         LINCOLN   22 #> 21          LOOMIS          LOOMIS    2 #> 22          MATHER          MATHER    1 #> 23    MEADOW_VISTA    MEADOW_VISTA    1 #> 24 NORTH_HIGHLANDS NORTH_HIGHLANDS   21 #> 25      ORANGEVALE      ORANGEVALE   11 #> 26          PENRYN          PENRYN    1 #> 27     PLACERVILLE     PLACERVILLE   10 #> 28   POLLOCK_PINES   POLLOCK_PINES    3 #> 29  RANCHO_CORDOVA  RANCHO_CORDOVA   28 #> 30  RANCHO_MURIETA  RANCHO_MURIETA    3 #> 31       RIO_LINDA       RIO_LINDA   13 #> 32         ROCKLIN         ROCKLIN   17 #> 33       ROSEVILLE       ROSEVILLE   48 #> 34      SACRAMENTO      SACRAMENTO  438 #> 35    WALNUT_GROVE    WALNUT_GROVE    1 #> 36 WEST_SACRAMENTO WEST_SACRAMENTO    3 #> 37          WILTON          WILTON    5  tidy(rec, number = 1) #> # A tibble: 1 √ó 3 #>   terms value        id            #>   <chr> <chr>        <chr>         #> 1 city  unknown city unknown_NRDyG"},{"path":"https://recipes.tidymodels.org/dev/reference/step_unorder.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ordered factors to unordered factors ‚Äî step_unorder","title":"Convert ordered factors to unordered factors ‚Äî step_unorder","text":"step_unorder() creates specification recipe step turn ordered factor variables unordered factor variables.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_unorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ordered factors to unordered factors ‚Äî step_unorder","text":"","code":"step_unorder(   recipe,   ...,   role = NA,   trained = FALSE,   columns = NULL,   skip = FALSE,   id = rand_id(\"unorder\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_unorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ordered factors to unordered factors ‚Äî step_unorder","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. columns character string selected variable names. field placeholder populated prep() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_unorder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert ordered factors to unordered factors ‚Äî step_unorder","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_unorder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert ordered factors to unordered factors ‚Äî step_unorder","text":"factors level order preserved transformation.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_unorder.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Convert ordered factors to unordered factors ‚Äî step_unorder","text":"tidy() step, tibble returned columns terms id: terms character, selectors variables selected id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_unorder.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Convert ordered factors to unordered factors ‚Äî step_unorder","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_unorder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert ordered factors to unordered factors ‚Äî step_unorder","text":"","code":"lmh <- c(\"Low\", \"Med\", \"High\")  examples <- data.frame(   X1 = factor(rep(letters[1:4], each = 3)),   X2 = ordered(rep(lmh, each = 4),     levels = lmh   ) )  rec <- recipe(~ X1 + X2, data = examples)  factor_trans <- rec %>%   step_unorder(all_nominal_predictors())  factor_obj <- prep(factor_trans, training = examples)  transformed_te <- bake(factor_obj, examples) table(transformed_te$X2, examples$X2) #>        #>        Low Med High #>   Low    4   0    0 #>   Med    0   4    0 #>   High   0   0    4  tidy(factor_trans, number = 1) #> # A tibble: 1 √ó 2 #>   terms                    id            #>   <chr>                    <chr>         #> 1 all_nominal_predictors() unorder_uevI1 tidy(factor_obj, number = 1) #> # A tibble: 2 √ó 2 #>   terms id            #>   <chr> <chr>         #> 1 X1    unorder_uevI1 #> 2 X2    unorder_uevI1"},{"path":"https://recipes.tidymodels.org/dev/reference/step_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Moving window functions ‚Äî step_window","title":"Moving window functions ‚Äî step_window","text":"step_window() creates specification recipe step create new columns results functions compute statistics across moving windows.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moving window functions ‚Äî step_window","text":"","code":"step_window(   recipe,   ...,   role = NA,   trained = FALSE,   size = 3,   na_rm = TRUE,   statistic = \"mean\",   columns = NULL,   names = NULL,   keep_original_cols = TRUE,   skip = FALSE,   id = rand_id(\"window\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Moving window functions ‚Äî step_window","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? names left NULL, rolling statistics replace original columns roles left unchanged. names set, new columns role NULL unless argument value. trained logical indicate quantities preprocessing estimated. size odd integer >= 3 window size. na_rm logical whether missing values removed calculations within window. statistic character string type statistic calculated moving window. Possible values : 'max', 'mean', 'median', 'min', 'prod', 'sd', 'sum', 'var' columns character string selected variable names. field placeholder populated prep() used. names optional character string length number terms selected terms. sure columns selected, use summary function (see example ). names new columns created step. keep_original_cols logical keep original variables output. Defaults TRUE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Moving window functions ‚Äî step_window","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_window.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Moving window functions ‚Äî step_window","text":"calculations use somewhat atypical method handling beginning end parts rolling statistics. process starts center justified window calculations beginning ending parts rolling values determined using first last rolling values, respectively. example, column x 12 values smoothed 5-point moving median, first three smoothed values estimated median(x[1:5]) fourth uses median(x[2:6]). keep_original_cols also applies step names specified. step stop note installing package.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_window.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Moving window functions ‚Äî step_window","text":"tidy() step, tibble returned columns terms, statistic, size , id: terms character, selectors variables selected statistic character, summary function name size integer, window size id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_window.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Moving window functions ‚Äî step_window","text":"step 2 tuning parameters: statistic: Rolling Summary Statistic (type: character, default: mean) size: Window Size (type: integer, default: 3)","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_window.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Moving window functions ‚Äî step_window","text":"underlying operation allow case weights.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_window.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Moving window functions ‚Äî step_window","text":"","code":"if (FALSE) { # rlang::is_installed(c(\"RcppML\", \"ggplot2\")) library(recipes) library(dplyr) library(rlang) library(ggplot2, quietly = TRUE)  set.seed(5522) sim_dat <- data.frame(x1 = (20:100) / 10) n <- nrow(sim_dat) sim_dat$y1 <- sin(sim_dat$x1) + rnorm(n, sd = 0.1) sim_dat$y2 <- cos(sim_dat$x1) + rnorm(n, sd = 0.1) sim_dat$x2 <- runif(n) sim_dat$x3 <- rnorm(n)  rec <- recipe(y1 + y2 ~ x1 + x2 + x3, data = sim_dat) %>%   step_window(starts_with(\"y\"),     size = 7, statistic = \"median\",     names = paste0(\"med_7pt_\", 1:2),     role = \"outcome\"   ) %>%   step_window(starts_with(\"y\"),     names = paste0(\"mean_3pt_\", 1:2),     role = \"outcome\"   ) rec <- prep(rec, training = sim_dat)  smoothed_dat <- bake(rec, sim_dat)  ggplot(data = sim_dat, aes(x = x1, y = y1)) +   geom_point() +   geom_line(data = smoothed_dat, aes(y = med_7pt_1)) +   geom_line(data = smoothed_dat, aes(y = mean_3pt_1), col = \"red\") +   theme_bw()  tidy(rec, number = 1) tidy(rec, number = 2)  # If you want to replace the selected variables with the rolling statistic # don't set `names` sim_dat$original <- sim_dat$y1 rec <- recipe(y1 + y2 + original ~ x1 + x2 + x3, data = sim_dat) %>%   step_window(starts_with(\"y\")) rec <- prep(rec, training = sim_dat) smoothed_dat <- bake(rec, sim_dat) ggplot(smoothed_dat, aes(x = original, y = y1)) +   geom_point() +   theme_bw() }"},{"path":"https://recipes.tidymodels.org/dev/reference/step_zv.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero variance filter ‚Äî step_zv","title":"Zero variance filter ‚Äî step_zv","text":"step_zv() creates specification recipe step remove variables contain single value.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_zv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero variance filter ‚Äî step_zv","text":"","code":"step_zv(   recipe,   ...,   role = NA,   trained = FALSE,   group = NULL,   removals = NULL,   skip = FALSE,   id = rand_id(\"zv\") )"},{"path":"https://recipes.tidymodels.org/dev/reference/step_zv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero variance filter ‚Äî step_zv","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. group optional character string call dplyr::vars() can used specify group(s) within identify variables contain single value. grouping variables contained terms selector, considered removal. removals character string contains names columns removed. values determined prep() called. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_zv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero variance filter ‚Äî step_zv","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_zv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero variance filter ‚Äî step_zv","text":"step can potentially remove columns data set. may cause issues subsequent steps recipe missing columns specifically referenced name. avoid , see advice Tips saving recipes filtering columns section selections.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_zv.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Zero variance filter ‚Äî step_zv","text":"tidy() step, tibble returned columns terms id: terms character, names columns removed id character, id step","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/step_zv.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Zero variance filter ‚Äî step_zv","text":"underlying operation allow case weights.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/step_zv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero variance filter ‚Äî step_zv","text":"","code":"data(biomass, package = \"modeldata\")  biomass$one_value <- 1  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  rec <- recipe(HHV ~ carbon + hydrogen + oxygen +   nitrogen + sulfur + one_value, data = biomass_tr )  zv_filter <- rec %>%   step_zv(all_predictors())  filter_obj <- prep(zv_filter, training = biomass_tr)  filtered_te <- bake(filter_obj, biomass_te) any(names(filtered_te) == \"one_value\") #> [1] FALSE  tidy(zv_filter, number = 1) #> # A tibble: 1 √ó 2 #>   terms            id       #>   <chr>            <chr>    #> 1 all_predictors() zv_VT1qF tidy(filter_obj, number = 1) #> # A tibble: 1 √ó 2 #>   terms     id       #>   <chr>     <chr>    #> 1 one_value zv_VT1qF"},{"path":"https://recipes.tidymodels.org/dev/reference/summary.recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a recipe ‚Äî summary.recipe","title":"Summarize a recipe ‚Äî summary.recipe","text":"function prints current set variables/features characteristics.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/summary.recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a recipe ‚Äî summary.recipe","text":"","code":"# S3 method for class 'recipe' summary(object, original = FALSE, ...)"},{"path":"https://recipes.tidymodels.org/dev/reference/summary.recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a recipe ‚Äî summary.recipe","text":"object recipe object original logical: show current set variables original set recipe defined. ... arguments passed methods (currently used).","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/summary.recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a recipe ‚Äî summary.recipe","text":"tibble columns variable, type, role, source. original = TRUE, additional column included named required_to_bake (based results update_role_requirements()).","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/summary.recipe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize a recipe ‚Äî summary.recipe","text":"Note , recipe trained, current original variables . possible variables multiple roles adding add_role(). variable multiple roles, one row summary tibble.","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/reference/summary.recipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a recipe ‚Äî summary.recipe","text":"","code":"rec <- recipe(~., data = USArrests) summary(rec) #> # A tibble: 4 √ó 4 #>   variable type      role      source   #>   <chr>    <list>    <chr>     <chr>    #> 1 Murder   <chr [2]> predictor original #> 2 Assault  <chr [2]> predictor original #> 3 UrbanPop <chr [2]> predictor original #> 4 Rape     <chr [2]> predictor original rec <- step_pca(rec, all_numeric(), num_comp = 3) summary(rec) # still the same since not yet trained #> # A tibble: 4 √ó 4 #>   variable type      role      source   #>   <chr>    <list>    <chr>     <chr>    #> 1 Murder   <chr [2]> predictor original #> 2 Assault  <chr [2]> predictor original #> 3 UrbanPop <chr [2]> predictor original #> 4 Rape     <chr [2]> predictor original rec <- prep(rec, training = USArrests) summary(rec) #> # A tibble: 3 √ó 4 #>   variable type      role      source  #>   <chr>    <list>    <chr>     <chr>   #> 1 PC1      <chr [2]> predictor derived #> 2 PC2      <chr [2]> predictor derived #> 3 PC3      <chr [2]> predictor derived"},{"path":"https://recipes.tidymodels.org/dev/reference/terms_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select terms in a step function. ‚Äî terms_select","title":"Select terms in a step function. ‚Äî terms_select","text":"Please use recipes_eval_select() instead.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/terms_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select terms in a step function. ‚Äî terms_select","text":"","code":"terms_select(terms, info, empty_fun = function(x) x)"},{"path":"https://recipes.tidymodels.org/dev/reference/tidy.recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy the result of a recipe ‚Äî tidy.step_BoxCox","title":"Tidy the result of a recipe ‚Äî tidy.step_BoxCox","text":"tidy return data frame contains information regarding recipe operation within recipe (tidy method operation exists).","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/tidy.recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy the result of a recipe ‚Äî tidy.step_BoxCox","text":"","code":"# S3 method for class 'step_BoxCox' tidy(x, ...)  # S3 method for class 'step_YeoJohnson' tidy(x, ...)  # S3 method for class 'step_arrange' tidy(x, ...)  # S3 method for class 'step_bin2factor' tidy(x, ...)  # S3 method for class 'step_bs' tidy(x, ...)  # S3 method for class 'step_center' tidy(x, ...)  # S3 method for class 'check_class' tidy(x, ...)  # S3 method for class 'step_classdist' tidy(x, ...)  # S3 method for class 'step_classdist_shrunken' tidy(x, ...)  # S3 method for class 'check_cols' tidy(x, ...)  # S3 method for class 'step_corr' tidy(x, ...)  # S3 method for class 'step_count' tidy(x, ...)  # S3 method for class 'step_cut' tidy(x, ...)  # S3 method for class 'step_date' tidy(x, ...)  # S3 method for class 'step_depth' tidy(x, ...)  # S3 method for class 'step_discretize' tidy(x, ...)  # S3 method for class 'step_dummy' tidy(x, ...)  # S3 method for class 'step_dummy_extract' tidy(x, ...)  # S3 method for class 'step_dummy_multi_choice' tidy(x, ...)  # S3 method for class 'step_factor2string' tidy(x, ...)  # S3 method for class 'step_filter' tidy(x, ...)  # S3 method for class 'step_filter_missing' tidy(x, ...)  # S3 method for class 'step_geodist' tidy(x, ...)  # S3 method for class 'step_harmonic' tidy(x, ...)  # S3 method for class 'step_holiday' tidy(x, ...)  # S3 method for class 'step_hyperbolic' tidy(x, ...)  # S3 method for class 'step_ica' tidy(x, ...)  # S3 method for class 'step_impute_bag' tidy(x, ...)  # S3 method for class 'step_impute_knn' tidy(x, ...)  # S3 method for class 'step_impute_linear' tidy(x, ...)  # S3 method for class 'step_impute_lower' tidy(x, ...)  # S3 method for class 'step_impute_mean' tidy(x, ...)  # S3 method for class 'step_impute_median' tidy(x, ...)  # S3 method for class 'step_impute_mode' tidy(x, ...)  # S3 method for class 'step_impute_roll' tidy(x, ...)  # S3 method for class 'step_indicate_na' tidy(x, ...)  # S3 method for class 'step_integer' tidy(x, ...)  # S3 method for class 'step_interact' tidy(x, ...)  # S3 method for class 'step_intercept' tidy(x, ...)  # S3 method for class 'step_inverse' tidy(x, ...)  # S3 method for class 'step_invlogit' tidy(x, ...)  # S3 method for class 'step_isomap' tidy(x, ...)  # S3 method for class 'step_kpca' tidy(x, ...)  # S3 method for class 'step_kpca_poly' tidy(x, ...)  # S3 method for class 'step_kpca_rbf' tidy(x, ...)  # S3 method for class 'step_lag' tidy(x, ...)  # S3 method for class 'step_lincomb' tidy(x, ...)  # S3 method for class 'step_log' tidy(x, ...)  # S3 method for class 'step_logit' tidy(x, ...)  # S3 method for class 'check_missing' tidy(x, ...)  # S3 method for class 'step_mutate' tidy(x, ...)  # S3 method for class 'step_mutate_at' tidy(x, ...)  # S3 method for class 'step_naomit' tidy(x, ...)  # S3 method for class 'check_new_values' tidy(x, ...)  # S3 method for class 'step_nnmf' tidy(x, ...)  # S3 method for class 'step_nnmf_sparse' tidy(x, ...)  # S3 method for class 'step_normalize' tidy(x, ...)  # S3 method for class 'step_novel' tidy(x, ...)  # S3 method for class 'step_ns' tidy(x, ...)  # S3 method for class 'step_num2factor' tidy(x, ...)  # S3 method for class 'step_nzv' tidy(x, ...)  # S3 method for class 'step_ordinalscore' tidy(x, ...)  # S3 method for class 'step_other' tidy(x, ...)  # S3 method for class 'step_pca' tidy(x, type = \"coef\", ...)  # S3 method for class 'step_percentile' tidy(x, ...)  # S3 method for class 'step_pls' tidy(x, ...)  # S3 method for class 'step_poly' tidy(x, ...)  # S3 method for class 'step_poly_bernstein' tidy(x, ...)  # S3 method for class 'step_profile' tidy(x, ...)  # S3 method for class 'step_range' tidy(x, ...)  # S3 method for class 'check_range' tidy(x, ...)  # S3 method for class 'step_ratio' tidy(x, ...)  # S3 method for class 'step_regex' tidy(x, ...)  # S3 method for class 'step_relevel' tidy(x, ...)  # S3 method for class 'step_relu' tidy(x, ...)  # S3 method for class 'step_rename' tidy(x, ...)  # S3 method for class 'step_rename_at' tidy(x, ...)  # S3 method for class 'step_rm' tidy(x, ...)  # S3 method for class 'step_sample' tidy(x, ...)  # S3 method for class 'step_scale' tidy(x, ...)  # S3 method for class 'step_select' tidy(x, ...)  # S3 method for class 'step_shuffle' tidy(x, ...)  # S3 method for class 'step_slice' tidy(x, ...)  # S3 method for class 'step_spatialsign' tidy(x, ...)  # S3 method for class 'step_spline_b' tidy(x, ...)  # S3 method for class 'step_spline_convex' tidy(x, ...)  # S3 method for class 'step_spline_monotone' tidy(x, ...)  # S3 method for class 'step_spline_natural' tidy(x, ...)  # S3 method for class 'step_spline_nonnegative' tidy(x, ...)  # S3 method for class 'step_sqrt' tidy(x, ...)  # S3 method for class 'step_string2factor' tidy(x, ...)  # S3 method for class 'recipe' tidy(x, number = NA, id = NA, ...)  # S3 method for class 'step' tidy(x, ...)  # S3 method for class 'check' tidy(x, ...)  # S3 method for class 'step_time' tidy(x, ...)  # S3 method for class 'step_unknown' tidy(x, ...)  # S3 method for class 'step_unorder' tidy(x, ...)  # S3 method for class 'step_window' tidy(x, ...)  # S3 method for class 'step_zv' tidy(x, ...)"},{"path":"https://recipes.tidymodels.org/dev/reference/tidy.recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy the result of a recipe ‚Äî tidy.step_BoxCox","text":"x recipe object, step, check (trained otherwise). ... currently used. type step_pca, either \"coef\" (variable loadings per component) \"variance\" (much variance component account ). number integer NA. missing, id provided, return value list operations recipe. number given, tidy method executed operation recipe (exists). number must provided id . id character string NA. missing number provided, return value list operations recipe. character string given, tidy method executed operation recipe (exists). id must provided number .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/tidy.recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy the result of a recipe ‚Äî tidy.step_BoxCox","text":"tibble columns vary depending tidy method executed. number, id NA, tibble columns number (operation iteration), operation (either \"step\" \"check\"), type (method, e.g. \"nzv\", \"center\"), logical column called trained whether operation estimated using prep, logical skip, character column id.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/tidy.recipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy the result of a recipe ‚Äî tidy.step_BoxCox","text":"","code":"data(Sacramento, package = \"modeldata\")  Sacramento_rec <- recipe(~., data = Sacramento) %>%   step_other(all_nominal(), threshold = 0.05, other = \"another\") %>%   step_center(all_numeric()) %>%   step_dummy(all_nominal()) %>%   check_cols(ends_with(\"ude\"), sqft, price)  tidy(Sacramento_rec) #> # A tibble: 4 √ó 6 #>   number operation type   trained skip  id           #>    <int> <chr>     <chr>  <lgl>   <lgl> <chr>        #> 1      1 step      other  FALSE   FALSE other_rHEnN  #> 2      2 step      center FALSE   FALSE center_0byij #> 3      3 step      dummy  FALSE   FALSE dummy_GJcNB  #> 4      4 check     cols   FALSE   FALSE cols_IeIAm    tidy(Sacramento_rec, number = 2) #> # A tibble: 1 √ó 3 #>   terms         value id           #>   <chr>         <dbl> <chr>        #> 1 all_numeric()    NA center_0byij tidy(Sacramento_rec, number = 3) #> # A tibble: 1 √ó 3 #>   terms         columns id          #>   <chr>         <chr>   <chr>       #> 1 all_nominal() NA      dummy_GJcNB  Sacramento_rec_trained <- prep(Sacramento_rec, training = Sacramento)  tidy(Sacramento_rec_trained) #> # A tibble: 4 √ó 6 #>   number operation type   trained skip  id           #>    <int> <chr>     <chr>  <lgl>   <lgl> <chr>        #> 1      1 step      other  TRUE    FALSE other_rHEnN  #> 2      2 step      center TRUE    FALSE center_0byij #> 3      3 step      dummy  TRUE    FALSE dummy_GJcNB  #> 4      4 check     cols   TRUE    FALSE cols_IeIAm   tidy(Sacramento_rec_trained, number = 3) #> # A tibble: 6 √ó 3 #>   terms columns     id          #>   <chr> <chr>       <chr>       #> 1 city  ROSEVILLE   dummy_GJcNB #> 2 city  SACRAMENTO  dummy_GJcNB #> 3 city  another     dummy_GJcNB #> 4 zip   another     dummy_GJcNB #> 5 type  Residential dummy_GJcNB #> 6 type  another     dummy_GJcNB tidy(Sacramento_rec_trained, number = 4) #> # A tibble: 4 √ó 2 #>   terms     id         #>   <chr>     <chr>      #> 1 latitude  cols_IeIAm #> 2 longitude cols_IeIAm #> 3 sqft      cols_IeIAm #> 4 price     cols_IeIAm"},{"path":"https://recipes.tidymodels.org/dev/reference/update.step.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a recipe step ‚Äî update.step","title":"Update a recipe step ‚Äî update.step","text":"step method update() takes named arguments ... values replace elements name actual step.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/update.step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a recipe step ‚Äî update.step","text":"","code":"# S3 method for class 'step' update(object, ...)"},{"path":"https://recipes.tidymodels.org/dev/reference/update.step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a recipe step ‚Äî update.step","text":"object recipe step. ... Key-value pairs keys match names elements step, values new values update step .","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/update.step.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update a recipe step ‚Äî update.step","text":"step updated, must already trained. Otherwise, conflicting information can arise data returned bake(object, new_data = NULL) information step.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/update.step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a recipe step ‚Äî update.step","text":"","code":"data(biomass, package = \"modeldata\")  biomass_tr <- biomass[biomass$dataset == \"Training\", ] biomass_te <- biomass[biomass$dataset == \"Testing\", ]  # Create a recipe using step_bs() with degree = 3 rec <- recipe(   HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,   data = biomass_tr ) %>%   step_bs(carbon, hydrogen, degree = 3)  # Update the step to use degree = 4 rec2 <- rec rec2$steps[[1]] <- update(rec2$steps[[1]], degree = 4)  # Prep both recipes rec_prepped <- prep(rec, training = biomass_tr) rec2_prepped <- prep(rec2, training = biomass_tr)  # To see what changed bake(rec_prepped, new_data = NULL) #> # A tibble: 456 √ó 10 #>    oxygen nitrogen sulfur   HHV carbon_bs_1 carbon_bs_2 carbon_bs_3 #>     <dbl>    <dbl>  <dbl> <dbl>       <dbl>       <dbl>       <dbl> #>  1   42.9     0.41   0     20.0       0.421       0.313      0.0775 #>  2   41.3     0.2    0     19.2       0.423       0.309      0.0754 #>  3   46.2     0.11   0.02  18.3       0.431       0.290      0.0651 #>  4   35.6     3.3    0.16  18.2       0.441       0.258      0.0504 #>  5   40.7     1      0.02  18.4       0.436       0.278      0.0590 #>  6   40.2     2.04   0.1   18.5       0.440       0.262      0.0519 #>  7   38.2     2.68   0.2   18.7       0.434       0.283      0.0613 #>  8   39.7     1.7    0.2   18.3       0.439       0.265      0.0534 #>  9   40.9     0.8    0     18.6       0.426       0.301      0.0710 #> 10   40       1.2    0.1   18.9       0.434       0.282      0.0609 #> # ‚Ñπ 446 more rows #> # ‚Ñπ 3 more variables: hydrogen_bs_1 <dbl>, hydrogen_bs_2 <dbl>, #> #   hydrogen_bs_3 <dbl> bake(rec2_prepped, new_data = NULL) #> # A tibble: 456 √ó 12 #>    oxygen nitrogen sulfur   HHV carbon_bs_1 carbon_bs_2 carbon_bs_3 #>     <dbl>    <dbl>  <dbl> <dbl>       <dbl>       <dbl>       <dbl> #>  1   42.9     0.41   0     20.0       0.322       0.359       0.178 #>  2   41.3     0.2    0     19.2       0.325       0.357       0.174 #>  3   46.2     0.11   0.02  18.3       0.344       0.347       0.156 #>  4   35.6     3.3    0.16  18.2       0.371       0.325       0.127 #>  5   40.7     1      0.02  18.4       0.355       0.339       0.144 #>  6   40.2     2.04   0.1   18.5       0.368       0.328       0.130 #>  7   38.2     2.68   0.2   18.7       0.350       0.342       0.149 #>  8   39.7     1.7    0.2   18.3       0.365       0.331       0.133 #>  9   40.9     0.8    0     18.6       0.333       0.353       0.166 #> 10   40       1.2    0.1   18.9       0.351       0.342       0.148 #> # ‚Ñπ 446 more rows #> # ‚Ñπ 5 more variables: carbon_bs_4 <dbl>, hydrogen_bs_1 <dbl>, #> #   hydrogen_bs_2 <dbl>, hydrogen_bs_3 <dbl>, hydrogen_bs_4 <dbl>  # Cannot update a recipe step that has been trained! if (FALSE) { # \\dontrun{ update(rec_prepped$steps[[1]], degree = 4) } # }"},{"path":"https://recipes.tidymodels.org/dev/reference/update_role_requirements.html","id":null,"dir":"Reference","previous_headings":"","what":"Update role specific requirements ‚Äî update_role_requirements","title":"Update role specific requirements ‚Äî update_role_requirements","text":"update_role_requirements() allows fine tune requirements various roles might come across recipes (see update_role() general information roles). Role requirements can altered roles exist original data supplied recipe(), applied columns computed steps. Like update_role(), update_role_requirements() applied recipe immediately, unlike step_*() functions work prep() time.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/update_role_requirements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update role specific requirements ‚Äî update_role_requirements","text":"","code":"update_role_requirements(recipe, role, ..., bake = NULL)"},{"path":"https://recipes.tidymodels.org/dev/reference/update_role_requirements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update role specific requirements ‚Äî update_role_requirements","text":"recipe recipe. role string representing role like modify requirements . must role already exists recipe. ... dots future extensions must empty. bake bake() time, check done ensure columns role supplied recipe() also present new_data supplied bake()? Must single TRUE FALSE. default, NULL, modify requirement. following represents default bake time requirements specific types roles: \"outcome\": required bake time. changed. \"predictor\": Required bake time. changed. \"case_weights\": required bake time default. NA: Required bake time default. Custom roles: Required bake time default.","code":""},{"path":"https://recipes.tidymodels.org/dev/reference/update_role_requirements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update role specific requirements ‚Äî update_role_requirements","text":"","code":"df <- tibble(y = c(1, 2, 3), x = c(4, 5, 6), var = c(\"a\", \"b\", \"c\"))  # Let's assume that you have a `var` column that isn't used in the recipe. # We typically recommend that you remove this column before passing the # `data` to `recipe()`, but for now let's pass it through and assign it an # `\"id\"` role. rec <- recipe(y ~ ., df) %>%   update_role(var, new_role = \"id\") %>%   step_center(x)  prepped <- prep(rec, df)  # Now assume you have some \"new data\" and you are ready to `bake()` it # to prepare it for prediction purposes. Here, you might not have `var` # available as a column because it isn't important to your model. new_data <- df[c(\"y\", \"x\")]  # By default `var` is required at `bake()` time because we don't know if # you actually use it in the recipe or not try(bake(prepped, new_data)) #> Error in bake(prepped, new_data) :  #>   ‚úñ The following required columns are missing from `new_data`: #>   `var`. #> ‚Ñπ These columns have one of the following roles, which are required at #>   `bake()` time: `id`. #> ‚Ñπ If these roles are not required at `bake()` time, use #>   `update_role_requirements(role = \"your_role\", bake = FALSE)`.  # You can turn off this check by using `update_role_requirements()` and # setting `bake = FALSE` for the `\"id\"` role. We recommend doing this on # the original unprepped recipe, but it will also work on a prepped recipe. rec <- update_role_requirements(rec, \"id\", bake = FALSE) prepped <- prep(rec, df)  # Now you can `bake()` on `new_data` even though `var` is missing bake(prepped, new_data) #> # A tibble: 3 √ó 2 #>       x     y #>   <dbl> <dbl> #> 1    -1     1 #> 2     0     2 #> 3     1     3"},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-110","dir":"Changelog","previous_headings":"","what":"recipes 1.1.0","title":"recipes 1.1.0","text":"CRAN release: 2024-07-04","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"recipes 1.1.0","text":"Improved error message misspelled argument step functions. (#1318) recipe() can now take data.frames list-columns sf data.frames input data. (#1283) recipe() now show better error columns misspelled formula (#1283). add_role() now errors column simultaneously roles \"outcome\" \"predictor\". (#935) prep() now error ptype data doesn‚Äôt match used define recipe. (#793) Added documentation ?selections tidyselect::everything() works recipes. (#1259) New extract_fit_time() method added returns time took train recipe. (#1071) step_spline_b(), step_spline_convex(), step_spline_monotone(), step_spline_nonnegative() now throws informative errors thedegree, deg_free, complete_set arguments causes error. (#1170) step_mutate() gained .pkgs argument specify packages need loaded step work. (#1282) step_interact() now gives better error terms isn‚Äôt formula. (#1299) prefix argument step_dummy_multi_choice() now properly documented. (#1298) Significant speedup step_dummy() applied many columns. (#1305) step_dummy() now gives informative error attempt generate many columns fit memory. (#828) step_dummy() step_unknown() now throw informative warnings unseen levels. (#450) step_dummy() now throws informative warnings NA values. (#450) step_date() now accepts \"mday\" possible feature. (@Edgar-Zamora, #1211)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"recipes 1.1.0","text":"NA levels factors aren‚Äôt dropped passed recipe(). (#1291) recipe() longer crashes given long formula expression (#1283). Fixed bug step_ns() step_bs() knots field options argument wasn‚Äôt correctly used. (#1297) Bug fixed step_interact() long formulas used. (#1231, #1289) Fixed documentation mistake default value keep_original_cols argument wrong. (#1314)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"developer-1-1-0","dir":"Changelog","previous_headings":"","what":"Developer","title":"recipes 1.1.0","text":"Developer helper function recipes_ptype() added, returning expected input data prep() bake() given recipe object. (#1329) Developer helper function recipes_ptype_validate() added, validate new data compatible recipe ptype. (#793) Developer helper functions recipes_names_predictors() recipes_names_outcomes() added aid variable selection steps. (#1026)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-1010","dir":"Changelog","previous_headings":"","what":"recipes 1.0.10","title":"recipes 1.0.10","text":"CRAN release: 2024-02-18","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"bug-fixes-1-0-10","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"recipes 1.0.10","text":"Fixed bug step_log() breaks legacy recipe objects indexing names(object) bake(). (@stufield, #1284)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-109","dir":"Changelog","previous_headings":"","what":"recipes 1.0.9","title":"recipes 1.0.9","text":"CRAN release: 2023-12-13","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"improvements-1-0-9","dir":"Changelog","previous_headings":"","what":"Improvements","title":"recipes 1.0.9","text":"Minor speed-reduced memory consumption step_pca() bake() stage reducing unused multiplications (@jkennel, #1265) Document update_role(), add_role() remove_role() applied steps checks. (#778) Documentation tidy methods steps added missing improved describe return value accurately. (#936) step_dummy() now error passed character instead loudly ignoring . applicable setting strings_as_factors = FALSE. (#1233) now documented step_spline_b() can made periodic. (#1223) prep() now correctly throws warning training argument set prepping prepped recipe, telling user ignored. (#1244) errors thrown wrongly typed input steps, offending variables types now listed. (#1217) warnings errors updated use cli package increased clarity consistency. (#1237) Added warnings step_scale(), step_normalise(), step_center() step_range() result NaN columns. (@mastoffel, #1221)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"bug-fixes-1-0-9","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"recipes 1.0.9","text":"Fixed bug step_factor2string() strings_as_factors = TRUE set prep(). (#317) Fixed bug tidy.step_cut() always returned zero row tibbles trained recipes. (#1229)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-108","dir":"Changelog","previous_headings":"","what":"recipes 1.0.8","title":"recipes 1.0.8","text":"CRAN release: 2023-08-25","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"improvements-1-0-8","dir":"Changelog","previous_headings":"","what":"Improvements","title":"recipes 1.0.8","text":"Minor speed-reduced memory consumption spline steps rely spline2_apply (#1200)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"bug-fixes-1-0-8","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"recipes 1.0.8","text":"Fixed bugs spline steps (step_ns(), step_bs(), step_spline_b(), step_spline_convex(), step_spline_monotone(), step_spline_natural(), step_spline_nonnegative()) error baked 1 row. (#1191)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-107","dir":"Changelog","previous_headings":"","what":"recipes 1.0.7","title":"recipes 1.0.7","text":"CRAN release: 2023-08-10","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"new-steps-1-0-7","dir":"Changelog","previous_headings":"","what":"New Steps","title":"recipes 1.0.7","text":"step_classdist_shrunken(), regularized version step_classdist(), added. (#1185)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"improvements-1-0-7","dir":"Changelog","previous_headings":"","what":"Improvements","title":"recipes 1.0.7","text":"step_bs() step_ns() gained keep_original_cols argument. (#1164) keep_original_cols argument added step_classdist(), step_count(), step_depth(), step_geodist(), step_indicate_na(), step_interact(), step_lag(), step_poly(), step_regex(), step_window(). default step set preserve past behavior. change mean every step produces new columns keep_original_cols argument. (#1167)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"bug-fixes-1-0-7","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"recipes 1.0.7","text":"Fixed bugs step_classdist(), step_count(), step_depth(), step_geodist(), step_interact(), step_nnmf_sparse(), step_regex() didn‚Äôt work empty selection. steps now leave data unmodified empty selections. (#1142) step_classdist(), step_count() step_depth() longer returns column NAs empty selections. (#1142) step_regex() longer returns column 0s empty selections. (#1142) tidy() methods step_geodist(), step_nnmf_sparse(), step_sample() now correctly return zero-row tibbles used empty selections. (#1144) step_poly_bernstein(), step_profile(), step_spline_b(), step_spline_convex(), step_spline_monotone(), step_spline_natural(), step_spline_nonnegative() now correctly return zero row tibble used empty selection. (#1133) Fixed bug tidy() method step_sample() didn‚Äôt return id column. (#1144) check_class(), check_missing(), check_new_values(), check_range(), step_naomit(), step_poly_bernstein(), step_spline_b(), step_spline_convex(), step_spline_monotone(), step_spline_natural(), step_spline_nonnegative(), step_string2factor() now throw informative error needed non-standard role columns missing bake(). (#1145)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"breaking-changes-1-0-7","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"recipes 1.0.7","text":"step_window() now throws error instead silently overwriting names argument overlaps existing columns. (#1172) step_regex() step_count() now informatively error name collision occurs. (#1169)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"developer-1-0-7","dir":"Changelog","previous_headings":"","what":"Developer","title":"recipes 1.0.7","text":"Added developer function remove_original_cols() help remove original columns longer needed. (#1149) Added developer function recipes_remove_cols() provide standardized way remove columns column names. (#1155)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-106","dir":"Changelog","previous_headings":"","what":"recipes 1.0.6","title":"recipes 1.0.6","text":"CRAN release: 2023-04-25","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"improvements-1-0-6","dir":"Changelog","previous_headings":"","what":"Improvements","title":"recipes 1.0.6","text":"Steps tunable arguments now arguments listed documentation. steps add new columns now informatively error name collision occurs. (#983)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"bug-fixes-1-0-6","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"recipes 1.0.6","text":"Fixed bug step_spline_b(), step_spline_convex(), step_spline_monotone(), spline_nonnegative() weren‚Äôt able tune degree argument. step_range() now perform correctly performs clipping recipes created 1.0.3. (#1097)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"breaking-changes-1-0-6","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"recipes 1.0.6","text":"tidy() method step_impute_mean(), step_impute_median(), step_impute_mode() now imputed value column name value instead model. line output step_impute_lower(). (#826)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-105","dir":"Changelog","previous_headings":"","what":"recipes 1.0.5","title":"recipes 1.0.5","text":"CRAN release: 2023-02-20 Added outside argument step_percentile() determine different ways handling values outside range training data. step_range() now backwards compatible respect clipping argument added 1.0.3, old saved recipes can now baked. (#1090) update print methods use cli package formatting. (#426) Print methods longer errors untrained recipes long selections. (#1083) recipe, step, check methods generics::tune_args() now registered unconditionally (tidymodels/workflows#192). Added conditionMessage() method recipes_errors consistently point step errors occurred reporting errors. (#1080)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-104","dir":"Changelog","previous_headings":"","what":"recipes 1.0.4","title":"recipes 1.0.4","text":"CRAN release: 2023-01-11 Added missing tidy method step_intercept() step_lag(). (#730) Errors prep() bake() now indicate step caused error. (#420) Developer focused check_type() got new types argument precise checking column types. recipes_extension_check() added. developer focused function checks steps required S3 methods. recipe() now error informatively data missing. (#1042)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-103","dir":"Changelog","previous_headings":"","what":"recipes 1.0.3","title":"recipes 1.0.3","text":"CRAN release: 2022-11-09 step_dummy() longer returns integer columns number contrast methods return fractional values. (#1053) Fixed 0-length recycling bug step_dummy_extract() exposed development version purrr (#1052). Types variables made granular. \"nominal\" split \"ordered\" \"unordered\" \"numeric\" split \"double\" \"integer\". (#993) New selectors: all_double(), all_ordered(), all_unordered(), all_date() all_datetime(), addition existing all_numeric() all_nominal(). selectors come *_predictors() variant. (#993) Developer focused .get_data_types() generic added designate types columns. Exported use extension packages deal types supported recipes directly. (#993) step_date() function now defaults using clock package format day--week month labels. (#1048) step_range() gained argument clipping set FALSE longer clips data min max. Added documentation regarding developer functions ?developer_functions. (#1163)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-102","dir":"Changelog","previous_headings":"","what":"recipes 1.0.2","title":"recipes 1.0.2","text":"CRAN release: 2022-10-15 new set basis functions added: step_spline_b(), step_spline_convex(), step_spline_monotone(), step_spline_natural(), step_spline_nonnegative(), step_poly_bernstein(). step_date(), step_dummy(), step_dummy_extract(), step_holiday(), step_ordinalscore(), step_regex() now returns integer results appropriate. (#766) default strict argument step_integer() changed FALSE TRUE. function thus return integers, rather whole-number numerics, default. (#766) default value argument step_intercept() changed 1 1L. (#766)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-101","dir":"Changelog","previous_headings":"","what":"recipes 1.0.1","title":"recipes 1.0.1","text":"CRAN release: 2022-07-07 Fixed bug step_holiday() didn‚Äôt work isn‚Äôt missing values. (#1019)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-100","dir":"Changelog","previous_headings":"","what":"recipes 1.0.0","title":"recipes 1.0.0","text":"CRAN release: 2022-07-01","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"improvements-and-other-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Improvements and Other Changes","title":"recipes 1.0.0","text":"Added support case weights following steps step_center() step_classdist() step_corr() step_dummy_extract() step_filter_missing() step_impute_linear() step_impute_mean() step_impute_median() step_impute_mode() step_normalize() step_nzv() step_other() step_percentile() step_pca() step_sample() step_scale() number developer focused functions deal case weights added: are_weights_used(), get_case_weights(), averages(), medians(), variances(), correlations(), covariances(), pca_wts() recipes now checks columns data supplied recipe() also present new_data supplied bake(). exception made columns roles either \"outcome\" \"case_weights\", typically required bake() time. new update_role_requirements() function can used adjust whether columns particular role required bake() time need opt check (#1011). summary() method recipe objects now contains extra column indicate columns required bake() used.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"new-steps-1-0-0","dir":"Changelog","previous_headings":"","what":"New Steps","title":"recipes 1.0.0","text":"step_time() added extracts time features hour, minute, second. (#968)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"recipes 1.0.0","text":"Fixed bug functions step_hyperbolic() uses (#932). step_dummy_multi_choice() now respects factor-levels selected variables creating dummies. (#916) step_dummy() works correctly recipes trained version 0.1.17 earlier. (#921) Fixed bug setting fresh = TRUE prep() wouldn‚Äôt result re-prepping recipe. (#492) Bug fixed step_holiday() used error applied variable missing values. (#743) bug fixed step_normalize() used error 1 variable selected. (#963)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"improvements-and-other-changes-1-0-0-1","dir":"Changelog","previous_headings":"","what":"Improvements and Other Changes","title":"recipes 1.0.0","text":"Finally removed step_upsample() step_downsample() recipes now available themis package. discretize() step_discretize() now can return factor levels similar cut(). (#674) step_naomit() now actually defaults skip changed TRUE stated release 0.1.13. (934) step_dummy() made robust non-standard column names. (#879) step_pls() now allows use use multiple outcomes numeric. (#651) step_normalize() step_scale() ignore columns zero variance, generate warning suggest use step_zv() (#920). printing step_impute_knn() now show variables imputed instead variables used imputing. (#837) step_discretize() discretize() automatically remove missing values keep_na = TRUE, removing need specify keep_na = TRUE na.rm = TRUE. (#982) prep() bake() checks errors output bake.bake_*() isn‚Äôt tibble. step_date() now locale argument can used control month dow features returned. (#1000)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-020","dir":"Changelog","previous_headings":"","what":"recipes 0.2.0","title":"recipes 0.2.0","text":"CRAN release: 2022-02-18","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"new-steps-0-2-0","dir":"Changelog","previous_headings":"","what":"New Steps","title":"recipes 0.2.0","text":"step_nnmf_sparse() uses different implementation non-negative matrix factorization much faster enables regularized estimation. (#790) step_dummy_extract() creates multiple variables character variable extracting elements using regular expressions counting elements. step_filter_missing() can filter columns based proportion missingness (#270). step_percentile() replaces value variable percentile training set. (#765)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"improvements-and-other-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Improvements and Other Changes","title":"recipes 0.2.0","text":"recipe steps now officially support empty selections aligned dplyr packages use tidyselect (#603, #531). example, previous step removed columns need later step, recipe fail estimated (exception step_mutate()). documentation ?selections updated advice writing selectors filtering steps used. (#813) Fixed bug step_harmonic() printing changed defaults role = \"predictor\" keep_original_cols = FALSE (#822). Improved efficiency computations Box-Cox transformation (#820). feature extraction step (e.g., step_pca(), step_ica(), etc.) zero components specified, tidy() method now lists selected columns terms column. Deprecation started step_nnmf() favor step_nnmf_sparse(). (#790) Steps now dedicated subsection detailing happens tidy() applied. (#876) step_ica() now runs fastICA() using specific set random numbers initialization reproducible. tidy.recipe() now returns zero row tibble instead error applied empty recipe. (#867) step_zv() now group argument. filter applied looks zero-variance within 1 columns define groups. (#711) detect_step() longer restricted steps created recipes (#869). New extract_parameter_set_dials() extract_parameter_dials() methods extract parameter sets single parameters recipe objects. step_other() now allow setting threshold = 0 result othering. (#904)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"recipes 0.2.0","text":"step_ica() now indirectly uses fastICA package since package increased R version requirement. Recipe objects previous versions error applied new data. (#823) step_kpca*() now directly use kernlab package. Recipe objects previous versions error applied new data. bake() now error new_data doesn‚Äôt contain required columns. (#491)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"developer-0-2-0","dir":"Changelog","previous_headings":"","what":"Developer","title":"recipes 0.2.0","text":"print methods internally changes use print_step() instead printer(). done smoother transition use cli next version. (#871)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-0117","dir":"Changelog","previous_headings":"","what":"recipes 0.1.17","title":"recipes 0.1.17","text":"CRAN release: 2021-09-27","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"new-steps-0-1-17","dir":"Changelog","previous_headings":"","what":"New Steps","title":"recipes 0.1.17","text":"Added new step_harmonic() (#702). Added new step called step_dummy_multi_choice(), take multiple nominal variables produces shared dummy variables. (#716)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"deprecation-news-0-1-17","dir":"Changelog","previous_headings":"","what":"Deprecation News","title":"recipes 0.1.17","text":"deprecation step_upsample() step_downsample() escalated deprecation warning deprecation error; functions available themis package. Escalate deprecation old versions imputation steps (step_bagimpute()) soft deprecation regular deprecation; imputation steps new names like step_impute_bag() (#753). step_kpca() un-deprecated gained keep_original_cols argument. deprecation preserve argument step_pls() step_dummy() escalated soft deprecation regular deprecation. deprecation options argument step_nzv() escalated deprecation error.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"bug-fixes-0-1-17","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"recipes 0.1.17","text":"Fix imputation steps new data NA, generate warning recipes created previous versions imputed fix (#719). bug fixed imputed values via bagged trees wrong levels.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"improvements-and-other-changes-0-1-17","dir":"Changelog","previous_headings":"","what":"Improvements and Other Changes","title":"recipes 0.1.17","text":"computations Yeo-Johnson transformation made efficient (#782). New recipes_eval_select() developer tool useful creating new recipes steps. powers tidyselect semantics specific recipes supports modern tidyselect API introduced tidyselect 1.0.0. Additionally, older terms_select() deprecated favor new helper (#739). Speed-/simplification step_spatialsign() terms attributes desired model.frame use first row data improve speed memory use (#726). Use Haversine formula latitude-longitude pairs step_geodist() (#725). Reorganize documentation recipe step tidy methods (#701). Generate warning user attempts Box-Cox transformation non-positive data (@LiamBlake, #713). step_logit() gained offset argument cases input either zero one (#784) tidy() methods objects check_new_values(), check_class() step_nnmf() now exported.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-0116","dir":"Changelog","previous_headings":"","what":"recipes 0.1.16","title":"recipes 0.1.16","text":"CRAN release: 2021-04-16","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"new-steps-0-1-16","dir":"Changelog","previous_headings":"","what":"New Steps","title":"recipes 0.1.16","text":"Added new step called step_indicate_na(), create append additional binary columns data set indicate observations missing (#623). Added new step_select() (#199).","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"bug-fixes-0-1-16","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"recipes 0.1.16","text":"threshold argument step_pca() now tunable() (#534). Integer variables used step_profile() now kept integers (doubles). Preserve multiple roles last_term_info bake() can correctly respond has_roles. (#632) Fixed behavior retain flag prep() (#652). tidy() methods step_nnmf() rewritten since great (#665), step_nnmf() now longer fully loads underlying packages (#685).","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"improvements-and-other-changes-0-1-16","dir":"Changelog","previous_headings":"","what":"Improvements and Other Changes","title":"recipes 0.1.16","text":"Two new selectors combine role data type added: all_numeric_predictors() all_nominal_predictors(). (#620) Changed names imputation steps, example, step_knnimpute() step_medianimpute() (old) step_impute_knn() step_impute_median() (new) (#614). Added keep_original_cols argument several steps: step_pca(), step_ica(), step_nnmf(), step_kpca_rbf(), step_kpca_poly(), step_pls(), step_isomap() default FALSE (#635). step_ratio(), step_holiday(), step_date() default TRUE maintain original behavior, well step_dummy() defaults FALSE (#645). Added allow_rename argument recipes_eval_select() (#646). Performance improvements step_bs() step_ns(). prep() step longer evaluates basis functions training set bake() steps evaluates basis functions unique input value (#574) neighbors parameter‚Äôs default range step_isomap() changed 20-80. deprecation step_upsample() step_downsample() escalated soft deprecation regular deprecation; functions available themis package. Re-licensed package GPL-2 MIT. See consent copyright holders .","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-0115","dir":"Changelog","previous_headings":"","what":"recipes 0.1.15","title":"recipes 0.1.15","text":"CRAN release: 2020-11-11 full tidyselect DSL now allowed inside recipes step_*() functions. includes operators &, |, - ! new () function. Additionally, restriction preventing user defined selectors used lifted (#572). steps drop/add variables skipped baking test set, resulting column ordering baked test set now relative original recipe specification rather relative baked training set. often intuitive. infrastructure work make parallel processing Windows less buggy PSOCK clusters fully_trained() now returns FALSE unprepped recipe used.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-0114","dir":"Changelog","previous_headings":"","what":"recipes 0.1.14","title":"recipes 0.1.14","text":"CRAN release: 2020-10-17 prep() gained option print summary columns added /removed execution. reduce confusion bake() juice(), latter superseded favor using bake(object, new_data = NULL). new_data argument now default, NULL value must explicitly used order emulate results juice(). juice() remain package (used internally) communication training use bake(object, new_data = NULL). (#543) Tim Zhou added step use linear models imputation (#555)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-0113","dir":"Changelog","previous_headings":"","what":"recipes 0.1.13","title":"recipes 0.1.13","text":"CRAN release: 2020-06-23","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"breaking-changes-0-1-13","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"recipes 0.1.13","text":"step_filter(), step_slice(), step_sample(), step_naomit() defaults skip changed TRUE. vast majority applications, steps applied test assessment sets. tidyr version 1.0.0 later now required.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"other-changes-0-1-13","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"recipes 0.1.13","text":"step_pls() changed uses Bioconductor mixOmics package. Objects created previous versions recipes can still use juice() bake(). current version, categorical outcomes can used now multivariate models . Also, new method allows sparse results. suggested @StefanBRas, step_ica() now defaults C engine (#518) Avoided partial matching seq() arguments internal functions. Improved error messaging, example user tries prep() tuneable recipe. step_upsample() step_downsample() soft deprecated recipes now available themis package. removed next version. step_zv() now handles NA values variables zero variance plus removed. selectors all_of() any_of() can now used step selections (#477). tune pacakge can now use recipes check operations (also requires tune >= 0.1.0.9000). tidy method step_pca() now option returning variance statistics component.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-0112","dir":"Changelog","previous_headings":"","what":"recipes 0.1.12","title":"recipes 0.1.12","text":"CRAN release: 2020-05-01 S3 methods registered previously. caused issues R 4.0.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-0111","dir":"Changelog","previous_headings":"","what":"recipes 0.1.11","title":"recipes 0.1.11","text":"CRAN release: 2020-04-30","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"other-changes-0-1-11","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"recipes 0.1.11","text":"recipes directly depend dials, several S3 methods generics dials. Version 0.0.5 dials added stricter validation methods, changes required recipes.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"new-operations-0-1-11","dir":"Changelog","previous_headings":"","what":"New Operations","title":"recipes 0.1.11","text":"step_cut() enables create factor numeric based provided break (contributed Edwin Thoen)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-0110","dir":"Changelog","previous_headings":"","what":"recipes 0.1.10","title":"recipes 0.1.10","text":"CRAN release: 2020-03-18","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"breaking-changes-0-1-10","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"recipes 0.1.10","text":"renamed yj_trans() yj_transform() avoid conflicts.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"other-changes-0-1-10","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"recipes 0.1.10","text":"Added flexible naming options new columns created step_depth() step_classdist() (#262). Small changes base R‚Äôs stringsAsFactors change.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-019","dir":"Changelog","previous_headings":"","what":"recipes 0.1.9","title":"recipes 0.1.9","text":"CRAN release: 2020-01-07 Delayed S3 method registration tune::tunable() methods live recipes now work correctly R >=4.0.0 (#439, tidymodels/tune#146). step_relevel() added.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-018","dir":"Changelog","previous_headings":"","what":"recipes 0.1.8","title":"recipes 0.1.8","text":"CRAN release: 2019-12-18","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"breaking-changes-0-1-8","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"recipes 0.1.8","text":"imputation steps change data type imputed now. Previously, data integer, data changed numeric (step types). change breaking since underlying data imputed values now saved list instead vector (step types). data sets moved new modeldata package. step_num2factor() rewritten due bug ignored user-supplied levels (#425). results transform argument now required function levels must now supplied.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"other-changes-0-1-8","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"recipes 0.1.8","text":"Using minus formula recipes() longer allowed (didn‚Äôt remove variables anyway). step_rm() update_role() can used instead. using selector returns columns, juice() bake() now return tibble many rows original template data new_data respectively. consistent selectors work dplyr (#411). Code added explicitly register tunable methods recipes loaded. required changes occurring R 4.0. check_class() checks variable designated class. Class either learned train set provided check. (contributed Edwin Thoen) step_normalize() step_scale() gained factor argument values 1 2 can scale standard deviations used transform data. (#380) bake() now produces tibble columns order juice() (#365)","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-017","dir":"Changelog","previous_headings":"","what":"recipes 0.1.7","title":"recipes 0.1.7","text":"CRAN release: 2019-09-15 Release driven changes tidyr (v 1.0.0).","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"breaking-changes-0-1-7","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"recipes 0.1.7","text":"format_selector()‚Äôs wdth argument renamed width (#250).","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"new-operations-0-1-7","dir":"Changelog","previous_headings":"","what":"New Operations","title":"recipes 0.1.7","text":"step_mutate_at(), step_rename(), step_rename_at() added.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"other-changes-0-1-7","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"recipes 0.1.7","text":"use varying() deprecated favor upcoming function tune(). changes need version, subsequent versions work tune(). format_ch_vec() format_selector() now exported (#250). check_new_values breaks bake variable contains values observed train set (contributed Edwin Thoen) outcomes recipe, using juice(object, all_outcomes() bake(object, new_data, all_outcomes() return tibble zero rows zero columns (instead failing). (#298). also occur selectors select columns. alternatives step_kpca(), two separate steps added called step_kpca_rbf() step_kpca_poly(). use step_kpca() print deprecation message going away. step_nzv() step_poly() arguments promoted options slot. options can used short term deprecated. step_downsample() replace ratio argument under_ratio step_upsample() replace over_ratio. ratio still works (now) issues deprecation message. step_discretize() arguments moved options ; main arguments now num_breaks (instead cuts) min_unique. , deprecation messages issued old argument structure. Models using dimRed package (step_kpca(), step_isomap(), step_nnmf()) silently fail projection method failed. error issued now. Methods added future generic called tunable(). outlines parameters step can/tuned.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-016","dir":"Changelog","previous_headings":"","what":"recipes 0.1.6","title":"recipes 0.1.6","text":"CRAN release: 2019-07-02 Release driven changes rlang.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"breaking-changes-0-1-6","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"recipes 0.1.6","text":"Since 2018, warning issued wrong argument used bake(recipe, newdata). depredation period new_data officially required. Previously, step_other() collapse levels, still add ‚Äú‚Äù level factor. lump new factor levels ‚Äú‚Äù data baked (step_novel() ). longer occurs since inconsistent ?step_other, said ‚Äúpooling done data unmodified‚Äù.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"new-operations-0-1-6","dir":"Changelog","previous_headings":"","what":"New Operations","title":"recipes 0.1.6","text":"step_normalize() centers scales data (, like Max, lazy use two separate steps). step_unknown() convert missing data categorical columns ‚Äúunknown‚Äù update factor levels.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"other-changes-0-1-6","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"recipes 0.1.6","text":"threshold argument step_other greater one specifies minimum sample size levels factor collapsed ‚Äú‚Äù category. #289 step_knnimpute() can now pass two options underlying knn code, including number threads (#323). Due changes CRAN, step_nnmf() works versions R >= 3.6.0 due dependency issues. step_dummy() step_other() now tolerant cases step‚Äôs selectors capture columns. case, modifications data made. (#290, #348) step_dummy() can now retain original columns used make dummy variables. (#328) step_other()‚Äôs print method reports variables collapsed levels (opposed column tested see needed collapsing). (#338) step_pca(), step_kpca(), step_ica(), step_nnmf(), step_pls(), step_isomap() now accept zero components. case, original data returned.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-015","dir":"Changelog","previous_headings":"","what":"recipes 0.1.5","title":"recipes 0.1.5","text":"CRAN release: 2019-03-21 Small release driven changes sample() current r-devel.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"other-changes-0-1-5","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"recipes 0.1.5","text":"new vignette discussing roles added. provide infrastructure finalizing varying parameters, update() method recipe steps added. allows users alter information steps yet trained. step_interact longer fail interaction contains interaction using column previously filtered data. warning issued happens interaction terms created. step_corr made fault tolerant cases data contain zero-variance column columns missing values. Set embedded environment NULL prep.step_dummy reduce file size serialized recipe class objects using saveRDS.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"breaking-changes-0-1-5","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"recipes 0.1.5","text":"tidy method step_dummy now returns original variable levels future dummy variables.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"bug-fixes-0-1-5","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"recipes 0.1.5","text":"Updating role new columns generated recipe step longer also updates NA roles existing columns (#296).","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-014","dir":"Changelog","previous_headings":"","what":"recipes 0.1.4","title":"recipes 0.1.4","text":"CRAN release: 2018-11-19","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"breaking-changes-0-1-4","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"recipes 0.1.4","text":"Several argument names changed consistent tidymodels packages (e.g.¬†dials) general tidyverse naming conventions. K step_knnimpute changed neighbors. step_isomap number neighbors promoted main argument called neighbors step_pca, step_pls, step_kpca, step_ica now use num_comp instead num. , step_isomap uses num_terms instead num. step_bagimpute moved nbagg options main argument trees. step_bs step_ns degrees freedom promoted main argument name deg_free. Also, step_bs degree promoted main argument. step_BoxCox step_YeoJohnson nunique change num_unique. bake, juice functions newdata changed new_data. version , using newdata result wanring. Several steps na.rm changed na_rm. prep steps stringsAsFactors changed strings_as_factors. add_role() can now add new additional roles. alter existing roles, use update_role(). change also allows possibility multiple roles/types one variable. #221 steps gain id field used future reference steps. retain option prep now defaulted TRUE. verbose = TRUE, approximate size data set printed. #207","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"new-operations-0-1-4","dir":"Changelog","previous_headings":"","what":"New Operations","title":"recipes 0.1.4","text":"step_integer converts data ordered integers similar LabelEncoder #123 #185 step_geodist can used calculate distance geocodes single reference location. step_arrange, step_filter, step_mutate, step_sample, step_slice implement dplyr analogs. step_nnmf computes non-negative matrix factorization data.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"other-changes-0-1-4","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"recipes 0.1.4","text":"rsample function prepper moved recipes (issue). number packages moved ‚ÄúImports‚Äù ‚ÄúSuggests‚Äù reduce install footprint. function added prompt user install needed packages relevant steps invoked. step_step_string2factor now accept factors leave -. step_knnimpute now excludes missing data variable imputed nearest-neighbor calculation. resulted missing data imputed (.e.¬†return another missing value). step_dummy now produces warning (instead failing) non-factor columns selected. factor columns used; conversion done character data. issue #186 dummy_names gained separator argument. issue #183 step_downsample step_upsample now seed arguments control randomness. broom longer used get tidy generic. now contained generics package. recipe prepared, running list columns created last known use column kept. avoid bugs step skipped removes columns. issue #239","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-013","dir":"Changelog","previous_headings":"","what":"recipes 0.1.3","title":"recipes 0.1.3","text":"CRAN release: 2018-06-16","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"new-operations-0-1-3","dir":"Changelog","previous_headings":"","what":"New Operations","title":"recipes 0.1.3","text":"check_range breaks bake variable range new data outside range learned train set (contributed Edwin Thoen) step_lag can lag variables data set (contributed Alex Hayes). step_naomit removes rows missing data specific columns (contributed Alex Hayes). step_rollimpute can used impute data sequence series estimating values within moving window. step_pls can conduct supervised feature extraction predictors.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"other-changes-0-1-3","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"recipes 0.1.3","text":"step_log gained offset argument. step_log gained signed argument (contributed Edwin Thoen). internal functions sel2char printer exported enable packages contain steps. training new steps steps previously trained, retain = TRUE option set previous invocations prep. step_dummy: can now compute entire set dummy variables per factor predictor using one_hot = TRUE option. Thanks Davis Vaughan. contrast option removed. step uses global option contrasts. `step also produces missing indicator variables original factor missing value step_other now convert novel levels factor ‚Äú‚Äù level. step_bin2factor now option choose values translated levels (contributed Michael Levy). bake juice can now export basic data frames. okc data updated two additional columns.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"bug-fixes-0-1-3","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"recipes 0.1.3","text":"issue 125 prevented several steps working dplyr grouped data frames. (contributed Jeffrey Arnold) issue 127 options step_discretize passed discretize.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-012","dir":"Changelog","previous_headings":"","what":"recipes 0.1.2","title":"recipes 0.1.2","text":"CRAN release: 2018-01-11","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"general-changes-0-1-2","dir":"Changelog","previous_headings":"","what":"General Changes","title":"recipes 0.1.2","text":"Edwin Thoen suggested adding validation checks certain data characteristics. fed existing notion expanding recipes beyond steps (see non-step steps project). new set operations, called checks, can now used. throw informative error check conditions met return existing data otherwise. Steps now skip option apply preprocessing bake used. See article skipping steps information.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"new-operations-0-1-2","dir":"Changelog","previous_headings":"","what":"New Operations","title":"recipes 0.1.2","text":"check_missing validate none specified variables contain missing data. detect_step can used check recipe contains particular preprocessing operation. step_num2factor can used convert numeric data (especially integers) factors. step_novel adds new factor level nominal variables used new data contain level exist recipe prepared. step_profile can used generate design matrix grids prediction profile plots additive models one variable varied grid others fixed single value. step_downsample step_upsample can used change number rows data based frequency distributions factor variable training set. default, operation applied training set; bake ignores operation. step_naomit drops rows specified columns contain NA, similar tidyr::drop_na. step_lag allows creation lagged predictor columns.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"other-changes-0-1-2","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"recipes 0.1.2","text":"step_spatialsign now option removing missing data prior computing norm.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-011","dir":"Changelog","previous_headings":"","what":"recipes 0.1.1","title":"recipes 0.1.1","text":"CRAN release: 2017-11-20 default selectors bake changed all_predictors() everything(). verbose option prep now defaulted FALSE bug step_dummy fixed makes sure correct binary variables generated despite levels values incoming factor. Also, step_dummy now requires factor inputs. step_dummy also new default naming function works better factors. However, extra argument (ordinal) now functions can passed step_dummy. step_interact now allows selectors (e.g.¬†all_predictors() starts_with(\"prefix\") used interaction formula. step_YeoJohnson gained na.rm option. dplyr::one_of added list selectors. step_bs adds B-spline basis functions. step_unorder converts ordered factors unordered factors. step_count counts number instances pattern exists string. step_string2factor step_factor2string can used move encodings. step_lowerimpute numeric data values measured specific value. cases, random uniform values used truncated values. step remove simple zero-variance variables added (step_zv). series tidy methods added recipes many () steps. bake.recipe, argument newdata now without default. bake juice can now save final processed data set sparse format. Note , steps processed, non-sparse data frame used store results. formula method added recipes get formula outcome(s) predictors based trained recipe.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-010","dir":"Changelog","previous_headings":"","what":"recipes 0.1.0","title":"recipes 0.1.0","text":"CRAN release: 2017-07-27 First CRAN release. Changed prepare prep per issue #59","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-0019003","dir":"Changelog","previous_headings":"","what":"recipes 0.0.1.9003","title":"recipes 0.0.1.9003","text":"Two main functions changed names. learn become prepare process become bake","code":""},{"path":[]},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"new-steps-0-0-1-9002","dir":"Changelog","previous_headings":"","what":"New steps","title":"recipes 0.0.1.9002","text":"step_lincomb removes variables involved linear combinations resolve . step converting binary variables factors (step_bin2factor) step_regex applies regular expression character factor vector create dummy variables.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"other-changes-0-0-1-9002","dir":"Changelog","previous_headings":"","what":"Other changes","title":"recipes 0.0.1.9002","text":"step_dummy step_interact better job respecting missing values data set.","code":""},{"path":"https://recipes.tidymodels.org/dev/news/index.html","id":"recipes-0019001","dir":"Changelog","previous_headings":"","what":"recipes 0.0.1.9001","title":"recipes 0.0.1.9001","text":"class system recipe objects changed pipes can used create recipe formula. process.recipe lost role argument factor general set selectors. selector used, predictors returned. Two steps simple imputation using mean mode added.","code":""}]
